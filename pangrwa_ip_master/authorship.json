[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    mainClassName \u003d \"alfred.Launcher\"","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"    archiveBaseName \u003d \"alfred\"","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"checkstyle {","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":22,"-":38}},{"path":"data/alfred.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"D | 0 | lunch | 13/12/2023 1300","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"pangrwa":1}},{"path":"src/main/java/alfred/Alfred.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.command.Command;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.parser.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":" * Represents a Personal Assistant Chat-bot that helps a person to keep track of various things.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":" * An \u003ccode\u003eAlfred\u003c/code\u003e object corresponds to the Chat-bot that will interact with the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"public class Alfred {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    private boolean isExit;","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    // How to pass file path inside here? javaFx requires this constructor","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    public Alfred() {","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        this(\"data/alfred.txt\");","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"     * Constructs an Alfred object that takes in a String that represents the filepath.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"     * @param filePath The filepath will be used by Alfred to store its data.","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    public Alfred(String filePath) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        } catch (AlfredException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"     * Tells Alfred to craft an Introductory message when the application is open to let the users know the application","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"     * has started.","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"     * @return The Introductory message","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"    public String runIntro() {","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        return ui.getOpening();","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"            Command c \u003d parser.parse(input);","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"            String output \u003d c.execute(tasks, ui, storage);","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"            isExit \u003d c.isExit();","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"            storage.write(tasks);","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"            return output;","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        } catch (AlfredException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"            return ui.getErrorMessage(e);","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"     * Checks if Alfred is ready is to close the program.","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"     * @return True if the program is about to close, else false.","lastModifiedDate":"2023-02-09"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        return isExit;","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"     * Alfred handling the exit when it is time for the program to close.","lastModifiedDate":"2023-02-09"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"    public void handleExit() {","lastModifiedDate":"2023-02-08"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"            TimeUnit.SECONDS.sleep(2);","lastModifiedDate":"2023-02-09"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"        } catch (InterruptedException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"            System.out.println(e.getMessage()); // how to show an error?","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"        } finally {","lastModifiedDate":"2023-02-08"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"            Platform.exit();","lastModifiedDate":"2023-02-08"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"     * Creates an Alfred object and run the program","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"     * @param args No arguments will be given into the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"        Alfred alfred \u003d new Alfred(\"data/alfred.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":101}},{"path":"src/main/java/alfred/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"public class Launcher {","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"pangrwa":13}},{"path":"src/main/java/alfred/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.components.MainWindow;","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    private Alfred alfred \u003d new Alfred();","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"            System.out.println(\"tet\");","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"            stage.setTitle(\"Alfred\");","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"            stage.setResizable(false);","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setAlfred(alfred);","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showIntroduction(alfred.runIntro());","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            stage.show();","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"pangrwa":37}},{"path":"src/main/java/alfred/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":" * Abstracts all the commands available from the user and its methods.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"     * Executes the command given by manipulating the tasks, updating the storage and displaying","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"     * any results back to the ui.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"     * @param tasks The tasks that are to be operated by the command.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * @param ui The Ui that the user will interact with.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * @param storage The storage that handle the loading and writing of the tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException The error that is thrown when the command fails to execute.","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException;","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     * Checks if the command will result in the end of the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * @return True if the command closes the program, else false.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":28}},{"path":"src/main/java/alfred/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.InvalidCommandException;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Deadline;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":" * Represents the Deadline command when a user wishes to add a deadline task.","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    private final String controlLine;","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"     * Constructs a Deadline command with the given command.","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"     * @param controlLine The full command to determine what is to be added.","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    public DeadlineCommand(String controlLine) {","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        this.controlLine \u003d controlLine;","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        String[] lineArr \u003d controlLine.split(\"/by \");","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        if (lineArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(\"deadline\");","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        String[] descriptionArr \u003d lineArr[0].split(\" \", 2);","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        if (descriptionArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(\"deadline\");","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        Task task \u003d new Deadline(descriptionArr[0], lineArr[1]);","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        tasks.addTask(task);","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d tasks.getSize() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"        String output \u003d String.format(\"Noted, task added: \\n      %s\\n\"","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"                + \"    Number of %s in the list: %d\\n\", task, numTasks, tasks.getSize());","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(output);","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-10"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"pangrwa":56}},{"path":"src/main/java/alfred/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":" * Represents a delete command that is given by the user to delete a task.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private int taskIndex;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * Constructs a delete command with the given command.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * @param taskIndex The full command to determine what is to be added.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public DeleteCommand(String taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        this.taskIndex \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            tasks.removeTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"            String output \u003d \"Noted. I\u0027ve removed this task. Remember to clear your remaining tasks!\\n\";","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"            output +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            return ui.getCommandMessage(output);","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To delete, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", tasks.getSize()));","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":49}},{"path":"src/main/java/alfred/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.InvalidCommandException;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Event;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":" * Represents an event command when a user wishes to add an event.","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    private final String controlLine;","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     * Constructs a Event command with the given command.","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"     * @param controlLine The full command to determine what is to be added.","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public EventCommand(String controlLine) {","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        this.controlLine \u003d controlLine;","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        String[] lineArr \u003d controlLine.split(\"/from | /to \");","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        if (lineArr.length \u003c 2) { // not sure how to check if there\u0027s /from and /to","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(\"event\");","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        String[] descriptionArr \u003d lineArr[0].split(\" \", 2);","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        if (descriptionArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(\"event\");","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        Task task \u003d new Event(descriptionArr[0], lineArr[1], lineArr[2]);","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        tasks.addTask(task);","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d tasks.getSize() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        String output \u003d String.format(\"Noted, task added: \\n      %s\\n\"","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"                + \"    Number of %s in the list: %d\\n\", task, numTasks, tasks.getSize());","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(output);","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"pangrwa":52}},{"path":"src/main/java/alfred/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":" * Represents an exit command when a user wishes to exit.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        storage.write(tasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        return ui.getByeMessage();","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        return true; // does this part contradict LSP? but command is an abstract class","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":30}},{"path":"src/main/java/alfred/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":" * Represents a find command object which users can find tasks that contains","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":" * certain keywords.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    private String keyWords;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"     * Constructs a find command object that takes in the key-words","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * @param keyWords The key-words that are looking for inside the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    public FindCommand(String keyWords) {","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        this.keyWords \u003d keyWords;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(tasks.findTasks(keyWords));","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"pangrwa":39}},{"path":"src/main/java/alfred/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":" * Represents a help command object which users can execute to find out what are the available commands.","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final HashMap\u003cString, String\u003e getCommandGuide \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    private static final String[] ORDER_OF_TASK \u003d new String[]{","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        \"todo\", \"deadline\", \"event\",","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        \"mark\", \"unmark\", \"delete\",","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        \"list\", \"listDate\", \"exit\",","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        \"find\", \"help\"","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    };","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     * Constructs a HelpCommand object that creates a table that maps the task to its particular help message.","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    public HelpCommand() {","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"deadline\", \"To add a deadline: deadline \u003cname\u003e /by \u003cdeadline\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"delete\", \"To delete a task: delete \u003ctask-index\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"event\", \"To add an event: event \u003cname\u003e /from \u003cstart-date\u003e /to \u003cend-date\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"exit\", \"To exit the program: exit\");","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"find\", \"To find tasks that contains certain words: find \u003ckey-words\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"help\", \"To seek help regarding the program: help\");","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"list\", \"To list the given tasks: list\");","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"listDate\", \"To list the given tasks that contain such date: list \u003cdate\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"mark\", \"To mark a task: mark \u003ctask-index\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"todo\", \"To add a todo task: todo \u003ctask-name\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        getCommandGuide.put(\"unmark\", \"To unmark a task: unmark \u003ctask-index\u003e\");","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        StringBuilder message \u003d new StringBuilder(\"Here are some commands to help you work your way through\"","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"                + \" the program :)\\n\");","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        for (String task : ORDER_OF_TASK) {","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"            message.append(\"    \");","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"            message.append(getCommandGuide.get(task));","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"            message.append(\"\\n\");","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(message.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"pangrwa":62}},{"path":"src/main/java/alfred/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":" * Represents a list command when a user wishes to list all the tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        StringBuilder command \u003d new StringBuilder(\"Here are your pending tasks: \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"            return ui.getCommandMessage(\"Woohoo! You have no pending tasks\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        assert tasks.getSize() \u003e 0 : \"Tasks should not be empty\";","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        String itemList \u003d tasks.getList();","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(command.append(itemList).toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":34}},{"path":"src/main/java/alfred/command/ListDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":" * Represents a list date command when a user wishes to list all the tasks associated to a date.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"public class ListDateCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private LocalDate date;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * Constructs a list date command given a date.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     * @param date The date of tasks that we are interested in.","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    public ListDateCommand(LocalDate date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        String initial \u003d String.format(\"Here are your pending tasks on %s: \\n\", date);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        StringBuilder output \u003d new StringBuilder(initial);","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            return ui.getCommandMessage(\"Woohoo! You have no pending tasks\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        assert tasks.getSize() \u003e 0 : \"tasks should not be empty\";","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        String itemDateList \u003d tasks.getList(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(output.append(itemDateList).toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":48}},{"path":"src/main/java/alfred/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":" * Represents a mark command where the user wishes to mark a task.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private int taskIndex;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * Constructs a mark command with the given task index.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * @param taskIndex The index of the task in the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public MarkCommand(String taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        this.taskIndex \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"            String output \u003d \"Well done! Good job \"","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                    + \"for completing your task!\\n\";","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            output +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"            return ui.getCommandMessage(output);","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To mark, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", tasks.getSize()));","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":50}},{"path":"src/main/java/alfred/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.ToDo;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":" * Represents the todo command when a user wishes to add a ToDo.","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final String controlLine;","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * Constructs a Todo command with the given control line.","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     * @param controlLine The remaining description of the task after the command word.","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    public ToDoCommand(String controlLine) {","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        this.controlLine \u003d controlLine;","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        Task task \u003d new ToDo(controlLine);","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        tasks.addTask(task);","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d tasks.getSize() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        String output \u003d String.format(\"Noted, task added: \\n      %s\\n\"","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"                + \"    Number of %s in the list: %d\\n\", task, numTasks, tasks.getSize());","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        return ui.getCommandMessage(output);","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"pangrwa":46}},{"path":"src/main/java/alfred/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":" * Represents an un-mark command where the user wishes to un-mark a task.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    private int taskIndex;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"     * Constructs an un-mark command given the task index.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * @param taskIndex The index of the task in the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    public UnmarkCommand(String taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        this.taskIndex \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            task.unmarkTask();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            String output \u003d \"I have un-mark this task. Remember to complete \"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"                    + \"your task on time!\\n\";","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"            output +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            return ui.getCommandMessage(output);","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To mark, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", tasks.getSize()));","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":49}},{"path":"src/main/java/alfred/components/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.components;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"     * Constructs a Dialog Box object to represent the messages from Alfred or the User.","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"     * @param text The text that is either from the user or Alfred.","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"     * @param img The image representing Alfred or the user.","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    public DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"    private void flip() {","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        setAlignment(Pos.CENTER_LEFT);","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    public static DialogBox getAlfredDialog(String text, Image img) {","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        db.flip();","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        return db;","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"pangrwa":66}},{"path":"src/main/java/alfred/components/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.components;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.Alfred;","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":" * The MainWindow class represents the initial page of the Graphical User Interface when the user uses the application.","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    private Alfred alfred;","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    private Image alfredImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    public void setAlfred(Alfred a) {","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        alfred \u003d a;","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Alfred\u0027s reply and then appends them to","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    @FXML","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        String response \u003d alfred.getResponse(input);","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"                DialogBox.getAlfredDialog(response, alfredImage)","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        );","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        if (alfred.isExit()) {","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"            alfred.handleExit();","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"     * Shows the Introductory message displayed by Alfred when the application is opened.","lastModifiedDate":"2023-02-09"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"     * @param intro The introductory message.","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"    public void showIntroduction(String intro) {","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"                DialogBox.getAlfredDialog(intro, alfredImage)","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        );","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"pangrwa":68}},{"path":"src/main/java/alfred/exceptions/AlfredException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":" * Represents exceptions that are caused by the Alfred program.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"public class AlfredException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"     * Constructs an Alfred Exception given the error message.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"     * @param message The error message.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    public AlfredException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        super(\"OOPS!!! \" + message);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * Converts the task into a String which represents a readable format for the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * @return The readable format of the task.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        return this.getMessage();","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"pangrwa":24}},{"path":"src/main/java/alfred/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.exceptions;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":" * Represent an exception when the command has invalid formatting or is non-existential.","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"public class InvalidCommandException extends AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means\";","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"     * Constructs an InvalidCommandException object that contains the invalid command error message.","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"     * @param command The command given by the user.","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    public InvalidCommandException(String command) {","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"        super(getErrorMessage(command));","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    private static String getErrorMessage(String command) {","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        switch (command) {","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        case (\"bye\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"            return \"To exit the program type: bye\";","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        case (\"list\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            return \"To list the set of tasks: list\";","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        case (\"mark\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"            return \"To mark a task: mark \u003ctask-index\u003e\";","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        case (\"unmark\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"            return \"To unmark a task: unmark \u003ctask-index\u003e\";","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        case (\"delete\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"            return \"To delete a task: delete \u003ctask-index\u003e\";","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        case(\"todo\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            return \"To add a to ToDo task: todo \u003ctask-description\u003e\";","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        case (\"deadline\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"            return \"To add a Deadline task: deadline \u003cTaskName\u003e /by \u003cDueDate\u003e\";","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        case (\"event\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"            return \"To add an Event task: event \u003cEventName\u003e /from \u003cStartDate\u003e /to \u003cEndDate\u003e\";","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        default:","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"            return INVALID_COMMAND;","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"pangrwa":40}},{"path":"src/main/java/alfred/parser/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.parser;","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":" * Represents a parser that parses a string into its respective format.","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"public class DateTimeParser {","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * Parses the date into LocalDate for better representation.","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * @param date The date given by the user.","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     * @return The LocalDate object that contains the date.","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException The error when the date given by the user is in an invalid format.","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public LocalDate parseIntoLocalDate(String date) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"            return LocalDate.parse(date, format);","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"The date format should be given as dd/mm/yyyy\\n\");","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"     * Parses the date into LocalDateTime for better representation.","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"     * @param date The date given by the user.","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"     * @return The LocalDateTime object that contains the date.","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException The error when the date given by the user is in an invalid format.","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    public LocalDateTime parseIntoLocalDateTime(String date) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"            return LocalDateTime.parse(date, format);","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"The date format should be given as d/MM/yyyy HHmm\\n\");","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"pangrwa":45}},{"path":"src/main/java/alfred/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.command.Command;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.command.DeadlineCommand;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.command.DeleteCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.command.EventCommand;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.command.ExitCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import alfred.command.FindCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import alfred.command.HelpCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"import alfred.command.ListCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"import alfred.command.ListDateCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"import alfred.command.MarkCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"import alfred.command.ToDoCommand;","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"import alfred.command.UnmarkCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.InvalidCommandException;","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":" * Represents a parser that deals with making sense of the user command.","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"public class Parser {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    private final DateTimeParser dateTimeParser \u003d new DateTimeParser();","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     * Translates the user command into the respective command.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"     * @param fullCommand The full command given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"     * @return The command that is parsed out from the full command.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException The error thrown due to a failure to parse date and time.","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    public Command parse(String fullCommand) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        String[] commandArr \u003d fullCommand.split(\" \");","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        int commandSize \u003d commandArr.length;","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        switch (commandSize) {","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        case (1):","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            return getOneWordCommand(commandArr);","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        case (2):","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"            return getTwoWordCommand(commandArr);","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        default: // more than 3 word","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"            return getLongCommand(fullCommand);","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    private Command getOneWordCommand(String[] commandArr) throws InvalidCommandException {","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        String command \u003d commandArr[0];","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        switch (command) {","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        case (\"bye\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        case (\"list\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        case (\"help\"):","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"        default:","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(command);","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    private Command getTwoWordCommand(String[] commandArr) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"        String command \u003d commandArr[0];","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"        String secondWord \u003d commandArr[1];","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        switch (command) {","lastModifiedDate":"2023-02-10"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        case (\"mark\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"            return new MarkCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        case (\"unmark\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"            return new UnmarkCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        case (\"delete\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"            return new DeleteCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        case (\"list\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"            LocalDate date \u003d dateTimeParser.parseIntoLocalDate(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"            return new ListDateCommand(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        case (\"todo\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"            return new ToDoCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"        case (\"deadline\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"            return new DeadlineCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        case (\"event\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"            return new EventCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        case (\"find\"):","lastModifiedDate":"2023-02-10"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"            return new FindCommand(secondWord);","lastModifiedDate":"2023-02-10"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"        default:","lastModifiedDate":"2023-02-10"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(command);","lastModifiedDate":"2023-02-10"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"    private Command getLongCommand(String fullCommand) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"        String[] fullCommandArr \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-02-10"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"        int fullCommandSize \u003d fullCommandArr.length;","lastModifiedDate":"2023-02-10"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"        String command \u003d fullCommandArr[0];","lastModifiedDate":"2023-02-10"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"        switch (fullCommandSize) {","lastModifiedDate":"2023-02-10"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"        case (1):","lastModifiedDate":"2023-02-10"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"            return getOneWordCommand(fullCommandArr);","lastModifiedDate":"2023-02-10"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"        case (2):","lastModifiedDate":"2023-02-10"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"            return getTwoWordCommand(fullCommandArr);","lastModifiedDate":"2023-02-10"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"        default:","lastModifiedDate":"2023-02-10"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"            // this line should never happen because max size is 2","lastModifiedDate":"2023-02-10"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"            throw new InvalidCommandException(command);","lastModifiedDate":"2023-02-10"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":101}},{"path":"src/main/java/alfred/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Event;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"import alfred.task.ToDo;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":" * Represents the storage that deals with loading tasks from a file and","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":" * saving tasks in a file.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"public class Storage {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    private File dataFile;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * Constructs a Storage object that deals with loading tasks from a file and","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     * saving tasks in a file.","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     * @param filePath The file that works with the storage object regarding loading and writing.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        dataFile \u003d new File(filePath);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"     * Loads the tasks from the file into an array list","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"     * @return The array list containing all the tasks from the data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException The error that is thrown out when the file cannot be read.","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    public ArrayList\u003cTask\u003e load() throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        dataFile.getParentFile().mkdir();","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"            if (dataFile.createNewFile()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"                return tasks;","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"            Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"            return getTasksFromFile(tasks, sc);","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"Error, invalid file path\");","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"    private ArrayList\u003cTask\u003e getTasksFromFile(ArrayList\u003cTask\u003e tasks, Scanner sc) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"            String[] taskInfoArr \u003d sc.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"            Task task;","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"            // What happens if the data in the file is not as the format given?","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"            tasks.add(getTask(taskInfoArr));","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"        return tasks;","lastModifiedDate":"2023-02-10"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    private Task getTask(String[] taskInfoArr) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        class CheckMark {","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"            public void isMark(int value, Task task) {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"                if (value \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        CheckMark checkMark \u003d new CheckMark();","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"        String taskType \u003d taskInfoArr[0];","lastModifiedDate":"2023-02-10"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        Task task;","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"            switch (taskType) {","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"            case \"T\":","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"                task \u003d new ToDo(taskInfoArr[2]);","lastModifiedDate":"2023-02-10"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"                checkMark.isMark(Integer.parseInt(taskInfoArr[1]), task);","lastModifiedDate":"2023-02-10"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"            case \"D\":","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"                task \u003d new Deadline(taskInfoArr[2], taskInfoArr[3]);","lastModifiedDate":"2023-02-10"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"                checkMark.isMark(Integer.parseInt(taskInfoArr[1]), task);","lastModifiedDate":"2023-02-10"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"            case \"E\":","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"                String[] duration \u003d taskInfoArr[3].split(\"-\");","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"                task \u003d new Event(taskInfoArr[2], duration[0], duration[1]);","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"                checkMark.isMark(Integer.parseInt(taskInfoArr[1]), task);","lastModifiedDate":"2023-02-10"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"            default:","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"I\u0027m sorry but there is an invalid task in the data file\");","lastModifiedDate":"2023-02-10"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"There is probably a missing separator in your file\");","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"        return task;","lastModifiedDate":"2023-02-10"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"     * Writes all the tasks in the task list into the data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"     * @param tasks All the tasks in the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException The error given when writing tasks into the file results","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"     *     in an error.","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"pangrwa"},"content":"    public void write(TaskList tasks) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"pangrwa"},"content":"        tasks.writeToFile(dataFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":106}},{"path":"src/main/java/alfred/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import alfred.parser.DateTimeParser;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":" * Represents a task by the user that has a deadline.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    private final String description;","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    private final HashSet\u003cString\u003e wordDict \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    private final DateTimeParser dateTimeParser \u003d new DateTimeParser();","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     * Constructs a Deadline object that represents a unique task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * @param description {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     * @param deadline Provides the deadline of the task.","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public Deadline(String description, String deadline) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        this.deadline \u003d dateTimeParser.parseIntoLocalDateTime(deadline);","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"    public void unmarkTask() {","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"        return deadline.toLocalDate().isEqual(date);","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"    public String getFileFormat() {","lastModifiedDate":"2023-02-10"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\"D | %d | %s | %s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"                isDone ? 1 : 0, this.description, this.deadline.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"    public boolean containsKeyWords(String keyWords) {","lastModifiedDate":"2023-02-10"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"        String[] keyWordsArr \u003d keyWords.split(\" \");","lastModifiedDate":"2023-02-10"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"        if (wordDict.isEmpty()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"            wordDict.addAll(Arrays.asList(description.split(\" \")));","lastModifiedDate":"2023-02-10"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        for (String keyWord : keyWordsArr) {","lastModifiedDate":"2023-02-10"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"            if (!wordDict.contains(keyWord)) {","lastModifiedDate":"2023-02-10"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"                return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"        return true;","lastModifiedDate":"2023-02-10"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\");","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[D][%s] %s(by: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description,","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"                this.deadline.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":97}},{"path":"src/main/java/alfred/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import alfred.parser.DateTimeParser;","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":" * Represents an Event task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    private final String description;","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    private final HashSet\u003cString\u003e wordDict \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    private final DateTimeParser dateTimeParser \u003d new DateTimeParser();","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    private LocalDateTime startDate;","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    private LocalDateTime endDate;","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     * Constructs an Event object that represents a unique task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     * @param description {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"     * @param startDate Provides the start date of the event.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"     * @param endDate Provides the end date of the event.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    public Event(String description, String startDate, String endDate) throws AlfredException {","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        this.startDate \u003d dateTimeParser.parseIntoLocalDateTime(startDate);","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        this.endDate \u003d dateTimeParser.parseIntoLocalDateTime(endDate);","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"    public void unmarkTask() {","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"        return startDate.toLocalDate().isEqual(date) || endDate.toLocalDate().isEqual(date);","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"    public String getFileFormat() {","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\"E | %d | %s | %s-%s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"                isDone ? 1 : 0, this.description, this.startDate.format(formatter),","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"                this.endDate.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"    public boolean containsKeyWords(String keyWords) {","lastModifiedDate":"2023-02-10"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"        String[] keyWordsArr \u003d keyWords.split(\" \");","lastModifiedDate":"2023-02-10"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        if (wordDict.isEmpty()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"            wordDict.addAll(Arrays.asList(description.split(\" \")));","lastModifiedDate":"2023-02-10"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"        for (String keyWord : keyWordsArr) {","lastModifiedDate":"2023-02-10"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"            if (!wordDict.contains(keyWord)) {","lastModifiedDate":"2023-02-10"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"                return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"        return true;","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\");","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[E][%s] %s (from: %s to: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"                isDone ? \"X\" : \" \", description,","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"                startDate.format(formatter), endDate.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":99}},{"path":"src/main/java/alfred/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":" * Represents a task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"@SuppressWarnings(\"checkstyle:Regexp\")","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    public abstract void markAsDone();","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"     * Un-mark the task as completed.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    public abstract void unmarkTask();","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"     * Converts the file into a format that is suitable for data storage.","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"     * @return The converted format of the task that describes its attributes.","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    public abstract String getFileFormat();","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"     * Checks if the task contains a LocalDate object.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"     * @param date The LocalDate object that represents the date of the task.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"     * @return True if the task contains the given date, else False.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    public abstract boolean containsDate(LocalDate date);","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    // only problem is task: read book, keywords \"find book read\" will work","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    // need to find the order. Questions only mentions \"keyword\"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"     * Checks if the task description contains the key word. Order doesn\u0027t matter.","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"     * Eg: Keywords: book read. Description: read book. The method will still return true.","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"     * @param keyWords The words that we are looking for in the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"     * @return True if the task description contains the keywords else false.","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    public abstract boolean containsKeyWords(String keyWords);","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":47}},{"path":"src/main/java/alfred/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":" * Represents a task list that contains all the task given the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"public class TaskList {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"     * Constructs an empty task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"     * Constructs a task list that is filled with tasks from a data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"     * @param tasks Contains an array of tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"     * Adds a task into the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"     * @param task A task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"     * Creates a String that contains all the information of the tasks inside the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"     * @return The string that contains all the tasks in a format.","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    public String getList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        StringBuilder listOfItems \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        IntStream.range(0, tasks.size())","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"                .forEach(index -\u003e listOfItems.append(String.format(\"    %d. %s\\n\", index + 1, tasks.get(index))));","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"        listOfItems.append(String.format(\"    You have %d %s in the list\\n\", tasks.size(), numTasks));","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        return listOfItems.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"     * Creates a String that contains all the information of the tasks inside the task list","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"     * that has attribute of the date.","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"     * @param date The date that we wish to find all the tasks that contains.","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"     * @return The string that contains all the tasks in a format.","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"    public String getList(LocalDate date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        StringBuilder listOfItems \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        for (Task item : tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"            if (item.containsDate(date)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"                listOfItems.append(String.format(\"    %d. %s\\n\", itemIndex, item));","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"                itemIndex++;","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d (itemIndex - 1) \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        listOfItems.append(String.format(\"    You have %d %s on %s in the list\\n\", itemIndex - 1, numTasks, date));","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"        return listOfItems.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"     * Writes all the tasks in the task list into the data file given.","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"     * @param dataFile The data file that stores the data of this program","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"     * @throws AlfredException An exception thrown when there is an error writing the tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"     *     into the data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"    public void writeToFile(File dataFile) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"                fw.write(task.getFileFormat());","lastModifiedDate":"2023-02-10"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"            fw.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"Something went wrong while\"","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"                    + \" saving the tasks, %s\\n\", e.getMessage()));","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"     * Returns a string that contains the list of tasks that contains the key word.","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"     * @param keyWords The keywords that we are looking for the in the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"pangrwa"},"content":"     * @return The string that contains the list of tasks that contains the key word.","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"pangrwa"},"content":"    public String findTasks(String keyWords) {","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"pangrwa"},"content":"        StringBuilder listOfTasks \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"pangrwa"},"content":"        for (Task item : tasks) {","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"pangrwa"},"content":"            if (item.containsKeyWords(keyWords)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"pangrwa"},"content":"                listOfTasks.append(String.format(\"    %d. %s\\n\", itemIndex, item));","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"pangrwa"},"content":"                itemIndex++;","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d (itemIndex - 1) \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"pangrwa"},"content":"        listOfTasks.append(String.format(\"    You have %d %s in the list with %s\", itemIndex - 1, numTasks, keyWords));","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"pangrwa"},"content":"        return listOfTasks.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"pangrwa"},"content":"     * Deletes the task from the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"pangrwa"},"content":"     * @param taskIndex The index of the task in the list.","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"pangrwa"},"content":"    public void removeTask(int taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"pangrwa"},"content":"        tasks.remove(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"pangrwa"},"content":"     * Retrieves the task from the task list at the given index.","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"pangrwa"},"content":"     * @param taskIndex The index of the task in the list.","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"pangrwa"},"content":"     * @return The task that is retrieved from.","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"pangrwa"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"pangrwa"},"content":"        return tasks.get(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"pangrwa"},"content":"     * Retrieves the size of the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"pangrwa"},"content":"     * @return The size of the task list.","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":140,"author":{"gitId":"pangrwa"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"pangrwa"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-29"},{"lineNumber":142,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":144,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":145,"author":{"gitId":"pangrwa"},"content":"     * Checks if the task list is empty","lastModifiedDate":"2023-01-31"},{"lineNumber":146,"author":{"gitId":"pangrwa"},"content":"     * @return True if the task list is empty, else false.","lastModifiedDate":"2023-01-31"},{"lineNumber":147,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"pangrwa"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"pangrwa"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":151,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":151}},{"path":"src/main/java/alfred/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":" * Represents a to-do task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    private final String description;","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private final HashSet\u003cString\u003e wordDict \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"     * Constructs a to-do object that represents a unique task given by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    public void unmarkTask() {","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    public String getFileFormat() {","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\"T | %d | %s\", isDone ? 1 : 0, this.description);","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2023-02-10"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    public boolean containsKeyWords(String keyWords) {","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"        String[] keyWordsArr \u003d keyWords.split(\" \");","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        if (wordDict.isEmpty()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"            wordDict.addAll(Arrays.asList(description.split(\" \")));","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        for (String keyWord : keyWordsArr) {","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"            if (!wordDict.contains(keyWord)) {","lastModifiedDate":"2023-02-10"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"                return false;","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        return true;","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[T][%s] %s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":82}},{"path":"src/main/java/alfred/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":" * Represents the interface where it deals with the user interaction with the uer.","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"public class Ui {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    private Scanner sc;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"     * Constructs an Ui object where it defines how the system input is given.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    public Ui() {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"     * Asks the user for the next input.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"     * @return the input written by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    public String getCommand() {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"     * Displays the opening introduction by the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    public String getOpening() {","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        StringBuilder opening \u003d new StringBuilder();","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        opening.append(\"*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        opening.append(\"\\\"| Your favourite personal assistant:  |\\\"\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        opening.append(\"*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        opening.append(getLogo());","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        opening.append(getIntro());","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        return opening.toString();","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"     * Displays the command given.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"     * @param command The command written by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    public String getCommandMessage(String command) {","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        message.append(getLines());","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        command \u003d \"    \" + command;","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        message.append(command);","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        message.append(getLines());","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        return message.toString();","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"     * Displays the error given.","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"     * @param e The AlfredException that was thrown in the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    public String getErrorMessage(AlfredException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"        return getCommandMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"     * Displays the goodbye message by the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"    public String getByeMessage() {","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        String command \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        return getCommandMessage(command);","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"     * Displays the logo of the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"    public String getLogo() {","lastModifiedDate":"2023-02-08"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"        StringBuilder logo \u003d new StringBuilder();","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"        logo.append(\" _____ __     ______ _____ ____ ___ \\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        logo.append(\"|  -  |  |   |  ____|  _  |  __| _ \\\\     \\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"        logo.append(\"| | | |  |   | |___ | |_|_| |__|| | |  \\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        logo.append(\"|  -  |  |___|  ___||  _ \\\\  |__||_| |\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"        logo.append(\"|_| |_| ____ |__|   |_| \\\\_|____|__ /   \\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"        return logo.toString();","lastModifiedDate":"2023-02-08"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"     * Displays the opening message from the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"    public String getIntro() {","lastModifiedDate":"2023-02-08"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"        StringBuilder intro \u003d new StringBuilder();","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"        intro.append(getLines());","lastModifiedDate":"2023-02-08"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"        intro.append(\"Hello! I\u0027m Alfred :\u003e\\n How can I help you today?\\n\");","lastModifiedDate":"2023-02-10"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"        intro.append(getLines());","lastModifiedDate":"2023-02-08"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"        return intro.toString();","lastModifiedDate":"2023-02-08"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"     * Displays an empty line that separates commands.","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"    public String getLines() {","lastModifiedDate":"2023-02-08"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"        String lines \u003d \"    \";","lastModifiedDate":"2023-02-08"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"        lines \u003d lines + \"-\".repeat(70);","lastModifiedDate":"2023-02-08"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"        return lines + \"\\n\";","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":103}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"700.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"            \u003cInsets right\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"            \u003cInsets right\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"pangrwa":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"700.0\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"alfred.components.MainWindow\"\u003e","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"625.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"624.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"75.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"680.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"670.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-09"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"pangrwa":19}},{"path":"src/test/java/alfred/AlfredTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"public class AlfredTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"    // how to test void methods?","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":9}},{"path":"src/test/java/alfred/exceptions/AlfredExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class AlfredExceptionTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"OOPS!!! This is a test error!\";","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, new AlfredException(\"This is a test error!\").toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.command.Command;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.command.ExitCommand;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final Parser parser \u003d new Parser();","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    // Should use stubs here, how to test equality of object?","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    /*","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public void testParse_byeCommand_success() throws AlfredException {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        Command exitCommand \u003d new ExitCommand();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        assertEquals(parser.parse(\"bye\"), exitCommand);","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":25}},{"path":"src/test/java/alfred/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public void testStringConversion_unmark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"[D][ ] This is a test task(by: Jan 10 2023 10:00AM)\";","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, new Deadline(\"This is a test task\", \"10/01/2023 1000\").toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    // How to test void methods?","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public void addTask_oneTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"public class TaskTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    // should we use stubs?","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    public void testStringConversion_unMark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"[T][ ] This is a test task\";","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, new Task(\"This is a test task\").toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public void testMarkAsDone() {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        Task testTask \u003d new Task(\"This is a test task\");","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        testTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        assertTrue(testTask.isDone);","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    public void testUnmarkTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        Task testTask \u003d new Task(\"This is test task\");","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        testTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        testTask.unmarkTask();","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        assertFalse(testTask.isDone);","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    public void addToFile_unmark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        Task testTask \u003d new Task(\"This is a test task\");","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \" | 0 | This is a test task\"","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, testTask.getFileFormat());","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    public void testContainsDate() {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        LocalDate localDate \u003d LocalDate.now();","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        assertFalse(new Task(\"This is a test task\").containsDate(localDate));","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":49}},{"path":"src/test/java/alfred/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.io.FileDescriptor;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"public class UiTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final PrintStream ps \u003d new PrintStream(outputStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    private final PrintStream consoleStream \u003d new PrintStream(new FileOutputStream(FileDescriptor.out));","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    public void displayLogo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        ui.displayLogo();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \" _____ __     ______ _____ ____ ___ \"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"|  -  |  |   |  ____|  _  |  __| _ \\\\     \"","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"| | | |  |   | |___ | |_|_| |__|| | |  \"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"|  -  |  |___|  ___||  _ \\\\  |__||_| |\"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"|_| |_| ____ |__|   |_| \\\\_|____|__ /   \"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    public void displayLine() {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        ui.getLines();","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"    ____________________________________________________________\"","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    // can we use methods after we test? displayLine","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    public void displayCommand_emptyString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        ui.getCommandMessage(\"\");","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        outputStream.reset();","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        ui.getLines();","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"    \" + \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        ui.getLines();","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"        String test \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    public void displayCommand_nonEmptyString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        ui.getCommandMessage(\"Hello World!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        outputStream.reset();","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        ui.getLines();","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"    \" + \"Hello World!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        ui.getLines();","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        String test \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"    // test displayError need stub for AlfredError?","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":78}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"deadline Return book /by 1/12/2023 1200","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"deadline CS2100 Assignment /by 01/12/2023 2200","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"deadline Buy pencil /by 02/12/2023 1400","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"deadline Buy pen /by 01/12/2023 1200","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"event Eat lunch /from 01/12/2023 1200 /to 01/12/2023 1400","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"event Hellweek /from 01/12/2023 1200 /to 05/12/2023 1200","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"event Meet hello /from 07/12/2023 1200 /to 07/12/2023 1400","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"list 1/12/2023","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"pangrwa":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":1,"-":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"java -classpath ../bin Alfred \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":1,"-":37}}]
