[{"path":"src/main/java/Alfred.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"import java.text.NumberFormat;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"public class Alfred {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"    private static ArrayList\u003cTask\u003e itemsList;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*\");","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"| Your favourite personal assistant:  |\");","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*\");","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        Alfred.printLogo();","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        Alfred.printIntro();","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        String commandLine \u003d sc.nextLine();","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        itemsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        while (true) {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"            String[] lineArr \u003d commandLine.split(\" \");","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"            String command \u003d lineArr[0];","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            try {","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"                if (command.equals(\"bye\") \u0026\u0026 lineArr.length \u003d\u003d 1) { // So we can still add taskNames that start with bye","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"                    Alfred.saysBye();","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"                    System.exit(1);","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"                } else if (command.equals(\"list\") \u0026\u0026 lineArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"                    Alfred.listItems();","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"                } else if (command.equals(\"mark\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"                    Alfred.markItem(lineArr[1]); // must be int catch error","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"                } else if (command.equals(\"unmark\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"                    Alfred.unmarkItem(lineArr[1]);","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                } else if (command.equals(\"delete\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"                    Alfred.deleteItem(lineArr[1]);","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"                } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"                    Alfred.addItem(commandLine);","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            } catch (AlfredException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"                Alfred.echoCommand(e.toString());","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"            } finally {","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"                commandLine \u003d sc.nextLine();","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    private static void echoCommand(String command) {","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        Alfred.printLines();","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        command \u003d \"    \" + command;","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        System.out.println(command);","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        Alfred.printLines();","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    private static void saysBye() {","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        String command \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"        Alfred.echoCommand(command);","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"    private static void addItem(String commandLine) throws AlfredException {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"        String[] commandArr \u003d commandLine.split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"        String typeTask \u003d commandArr[0];","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"        String[] lineArr;","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"        Task task;","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        switch (typeTask) {","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"            case \"todo\":","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"                if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"                    throw new AlfredException(\"The description of a todo cannot be empty\");","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"                task \u003d new ToDo(commandArr[1]);","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"                itemsList.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"            case \"deadline\": // Need to consider what if no \u0027/\u0027 is given","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"                lineArr \u003d commandLine.split(\"/by \");","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"                if (lineArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"                    throw new AlfredException(\"Deadlines should have a due date .\" +","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"                            \"Eg: \\\"\u003cTaskName\u003e /by \u003cDueDate\u003e\\\"\");","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"                task \u003d new Deadline(lineArr[0], lineArr[1]);","lastModifiedDate":"2023-01-18"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"                itemsList.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"            case \"event\": // need to consider what if no \u0027/from\u0027 and \u0027/or is not given?","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"                lineArr \u003d commandLine.split(\"/from | /to \");","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"                if (lineArr.length \u003c 2) { // not sure how to check if theres /from and /to","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"                    throw new AlfredException(\"Events should have start and end time. \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"                            \"Eg: \\\"\u003cEventName\u003e /from \u003cStartTime\u003e /to \u003cEndTime\u003e\\\"\");","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"                task \u003d new Event(lineArr[0], lineArr[1], lineArr[2]);","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"                itemsList.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"            default:","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"I\u0027m sorry, but I don\u0027t know what that means :\u003c\");","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d itemsList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"        String command \u003d String.format(\"Noted, task added: \\n      %s\\n\" +","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"                \"    Number of %s in the list: %d\\n\", task, numTasks, itemsList.size());","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"        Alfred.echoCommand(command);","lastModifiedDate":"2023-01-18"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"    private static void markItem(String indexArg) throws AlfredException {","lastModifiedDate":"2023-01-19"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"            int index \u003d Integer.parseInt(indexArg) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d itemsList.get(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"            task.markAsDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":103,"author":{"gitId":"pangrwa"},"content":"            String command \u003d \"Well done! Good job \" +","lastModifiedDate":"2023-01-18"},{"lineNumber":104,"author":{"gitId":"pangrwa"},"content":"                    \"for completing your task!\\n\";","lastModifiedDate":"2023-01-18"},{"lineNumber":105,"author":{"gitId":"pangrwa"},"content":"            command +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"pangrwa"},"content":"            Alfred.echoCommand(command);","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To mark, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", itemsList.size()));","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":113,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":114,"author":{"gitId":"pangrwa"},"content":"    private static void unmarkItem(String indexArg) throws AlfredException {","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"pangrwa"},"content":"            int index \u003d Integer.parseInt(indexArg) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":117,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d itemsList.get(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":118,"author":{"gitId":"pangrwa"},"content":"            task.unmarkTask();","lastModifiedDate":"2023-01-18"},{"lineNumber":119,"author":{"gitId":"pangrwa"},"content":"            String command \u003d \"I have un-mark this task. Remember to complete \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":120,"author":{"gitId":"pangrwa"},"content":"                    \"your task on time!\\n\";","lastModifiedDate":"2023-01-18"},{"lineNumber":121,"author":{"gitId":"pangrwa"},"content":"            command +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-19"},{"lineNumber":122,"author":{"gitId":"pangrwa"},"content":"            Alfred.echoCommand(command);","lastModifiedDate":"2023-01-18"},{"lineNumber":123,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":124,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To un-mark item, you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":125,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":126,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", itemsList.size()));","lastModifiedDate":"2023-01-19"},{"lineNumber":127,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":128,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":129,"author":{"gitId":"pangrwa"},"content":"    private static void deleteItem(String indexArg) throws AlfredException {","lastModifiedDate":"2023-01-19"},{"lineNumber":130,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":131,"author":{"gitId":"pangrwa"},"content":"            int index \u003d Integer.parseInt(indexArg) - 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d itemsList.remove(index);","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"pangrwa"},"content":"            String command \u003d \"Noted. I\u0027ve removed this task. Remember to clear your \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":134,"author":{"gitId":"pangrwa"},"content":"                    \"remaining tasks!\\n\";","lastModifiedDate":"2023-01-19"},{"lineNumber":135,"author":{"gitId":"pangrwa"},"content":"            command +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-19"},{"lineNumber":136,"author":{"gitId":"pangrwa"},"content":"            Alfred.echoCommand(command);","lastModifiedDate":"2023-01-19"},{"lineNumber":137,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":138,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To delete, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":139,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", itemsList.size()));","lastModifiedDate":"2023-01-19"},{"lineNumber":141,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":142,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":143,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":144,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":145,"author":{"gitId":"pangrwa"},"content":"    private static void listItems() {","lastModifiedDate":"2023-01-18"},{"lineNumber":146,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":147,"author":{"gitId":"pangrwa"},"content":"        StringBuilder command \u003d new StringBuilder(\"Here are your pending tasks: \\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":148,"author":{"gitId":"pangrwa"},"content":"        if (itemsList.isEmpty()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":149,"author":{"gitId":"pangrwa"},"content":"            Alfred.echoCommand(\"Woohoo! You have no pending tasks\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":150,"author":{"gitId":"pangrwa"},"content":"            return;","lastModifiedDate":"2023-01-19"},{"lineNumber":151,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":152,"author":{"gitId":"pangrwa"},"content":"        for (Task item : itemsList) {","lastModifiedDate":"2023-01-18"},{"lineNumber":153,"author":{"gitId":"pangrwa"},"content":"            command.append(String.format(\"    %d. %s\\n\", itemIndex, item));","lastModifiedDate":"2023-01-18"},{"lineNumber":154,"author":{"gitId":"pangrwa"},"content":"            itemIndex++;","lastModifiedDate":"2023-01-18"},{"lineNumber":155,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":156,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d itemsList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-01-23"},{"lineNumber":157,"author":{"gitId":"pangrwa"},"content":"        command.append(String.format(\"    You have %d %s in the list\\n\", itemsList.size(), numTasks));","lastModifiedDate":"2023-01-23"},{"lineNumber":158,"author":{"gitId":"pangrwa"},"content":"        Alfred.echoCommand(command.toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":159,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":160,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":161,"author":{"gitId":"pangrwa"},"content":"    private static void printLogo() {","lastModifiedDate":"2023-01-18"},{"lineNumber":162,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\" _____ __     ______ _____ ____ ___ \");","lastModifiedDate":"2023-01-18"},{"lineNumber":163,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"|  -  |  |   |  ____|  _  |  __| _ \\\\     \");","lastModifiedDate":"2023-01-18"},{"lineNumber":164,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"| | | |  |   | |___ | |_|_| |__|| | |  \");","lastModifiedDate":"2023-01-18"},{"lineNumber":165,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"|  -  |  |___|  ___||  _ \\\\  |__||_| |\");","lastModifiedDate":"2023-01-18"},{"lineNumber":166,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"|_| |_| ____ |__|   |_| \\\\_|____|__ /   \");","lastModifiedDate":"2023-01-18"},{"lineNumber":167,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":168,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":169,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":170,"author":{"gitId":"pangrwa"},"content":"    private static void printIntro() {","lastModifiedDate":"2023-01-18"},{"lineNumber":171,"author":{"gitId":"pangrwa"},"content":"        String intro \u003d \"Hello! I\u0027m Alfred :\u003e\\n\"","lastModifiedDate":"2023-01-18"},{"lineNumber":172,"author":{"gitId":"pangrwa"},"content":"                + \"How can I help you today?\";","lastModifiedDate":"2023-01-18"},{"lineNumber":173,"author":{"gitId":"pangrwa"},"content":"        Alfred.printLines();","lastModifiedDate":"2023-01-18"},{"lineNumber":174,"author":{"gitId":"pangrwa"},"content":"        System.out.println(intro);","lastModifiedDate":"2023-01-18"},{"lineNumber":175,"author":{"gitId":"pangrwa"},"content":"        Alfred.printLines();","lastModifiedDate":"2023-01-18"},{"lineNumber":176,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":177,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":178,"author":{"gitId":"pangrwa"},"content":"    private static void printLines() {","lastModifiedDate":"2023-01-18"},{"lineNumber":179,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-01-18"},{"lineNumber":180,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":181,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":181}},{"path":"src/main/java/AlfredException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"public class AlfredException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"    public AlfredException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"        super(\"OOPS!!! \" + message);","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"        return this.getMessage();","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"pangrwa":10}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"    protected String deadline;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[D][%s] %s(by: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description,","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"                this.deadline);","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":16}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"    protected String startDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"    protected String endDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"    public Event(String description, String startDate, String endDate) {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[E][%s] %s(from: %s to: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description,","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"                this.startDate, this.endDate);","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":19}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"public class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"    protected final String description;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    // I remember there\u0027s a modifier only allowing classes in same file to access?","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    public void unmarkTask() {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[T][%s] %s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":23}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"pangrwa":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":1,"-":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"java -classpath ../bin Alfred \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":1,"-":37}}]
