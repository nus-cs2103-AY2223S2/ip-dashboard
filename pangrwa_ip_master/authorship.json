[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"checkstyle {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":5,"-":41}},{"path":"src/main/java/alfred/Alfred.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.command.Command;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.parser.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"public class Alfred {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public Alfred(String filePath) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        } catch (AlfredException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public void run() {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        ui.displayOpening();","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        while (!isExit) {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                String fullCommand \u003d ui.getCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"                Command c \u003d parser.parse(fullCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"            } catch (AlfredException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"                ui.displayError(e);","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"        Alfred alfred \u003d new Alfred(\"data/alfred.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        alfred.run();","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":47}},{"path":"src/main/java/alfred/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.task.ToDo;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Event;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    private String fullCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public AddCommand(String fullCommand) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        String[] fullCommandArr \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        String typeTask \u003d fullCommandArr[0];","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        String[] descriptionArr;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        String[] lineArr;","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"        Task task;","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        // Handling the type of task","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        switch (typeTask) {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            if (fullCommandArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"The description of a todo cannot be empty\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            task \u003d new ToDo(fullCommandArr[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"            tasks.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        case \"deadline\": // Need to consider what if no \u0027/\u0027 is given","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"            lineArr \u003d fullCommand.split(\"/by \");","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"            if (lineArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"Deadlines should have a due date .\"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"                        + \"Eg: \\\"\u003cTaskName\u003e /by \u003cDueDate\u003e\\\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"            descriptionArr \u003d lineArr[0].split(\" \", 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"            if (descriptionArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"Deadlines should have a due date .\"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"                        + \"Eg: \\\"\u003cTaskName\u003e /by \u003cDueDate\u003e\\\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"                task \u003d new Deadline(descriptionArr[1], lineArr[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"                tasks.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"The date format should be given as dd/mm/yyyy 24hr-time\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"        case \"event\": // need to consider what if no \u0027/from\u0027 and \u0027/or\u0027 is not given?","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"            lineArr \u003d fullCommand.split(\"/from | /to \");","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"            if (lineArr.length \u003c 2) { // not sure how to check if there\u0027s /from and /to","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"Events should have start and end time. \" +","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"                        \"Eg: \\\"\u003cEventName\u003e /from \u003cStartTime\u003e /to \u003cEndTime\u003e\\\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"            descriptionArr \u003d lineArr[0].split(\" \", 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"            if (descriptionArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"Events should have start and end time. \" +","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"                        \"Eg: \\\"\u003cEventName\u003e /from \u003cStartTime\u003e /to \u003cEndTime\u003e\\\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"                task \u003d new Event(descriptionArr[1], lineArr[1], lineArr[2]);","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"                tasks.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"The date format should be given as dd/mm/yyyy 24hr-time\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        default:","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"I\u0027m sorry, but I don\u0027t know what that means :\u003c\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        // Alfred\u0027s response to remaining tasks","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d tasks.getSize() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        String output \u003d String.format(\"Noted, task added: \\n      %s\\n\" +","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"                \"    Number of %s in the list: %d\\n\", task, numTasks, tasks.getSize());","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"        ui.displayCommand(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":88}},{"path":"src/main/java/alfred/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    // Maybe can add storage.write() after every execute command?","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":13}},{"path":"src/main/java/alfred/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    private int taskIndex;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    public DeleteCommand(String taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        this.taskIndex \u003d Integer.parseInt(taskIndex) -1;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"            tasks.removeTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"            String output \u003d \"Noted. I\u0027ve removed this task. Remember to clear your \" +","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"                    \"remaining tasks!\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            output +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"            ui.displayCommand(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To delete, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", tasks.getSize()));","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":36}},{"path":"src/main/java/alfred/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        storage.write(tasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        ui.displayBye();","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        return true; // does this part contradict LSP? but command is an abstract class","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":20}},{"path":"src/main/java/alfred/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        StringBuilder command \u003d new StringBuilder(\"Here are your pending tasks: \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"            ui.displayCommand(\"Woohoo! You have no pending tasks\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"            return;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"        String itemList \u003d tasks.getList();","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        ui.displayCommand(command.append(itemList).toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":24}},{"path":"src/main/java/alfred/command/ListDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"public class ListDateCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    private LocalDate date;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    public ListDateCommand(LocalDate date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        String initial \u003d String.format(\"Here are your pending tasks on %s: \\n\", date);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        StringBuilder output \u003d new StringBuilder(initial);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"            ui.displayCommand(\"Woohoo! You have no pending tasks\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            return;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        String itemDateList \u003d tasks.getList(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        ui.displayCommand(output.append(itemDateList).toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":33}},{"path":"src/main/java/alfred/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    private int taskIndex;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    public MarkCommand(String taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        this.taskIndex \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"            task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"            String output \u003d \"Well done! Good job \" +","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"                    \"for completing your task!\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            output +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"            ui.displayCommand(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To mark, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", tasks.getSize()));","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":36}},{"path":"src/main/java/alfred/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.task.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    private int taskIndex;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public UnmarkCommand(String taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        this.taskIndex \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"            task.unmarkTask();","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"            String output \u003d \"I have un-mark this task. Remember to complete \" +","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"                    \"your task on time!\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"            output +\u003d String.format(\"      %s\\n\", task);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            ui.displayCommand(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"To mark, item you need to pass a valid integer!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"There are only %d pending tasks\\n\", tasks.getSize()));","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":35}},{"path":"src/main/java/alfred/exceptions/AlfredException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"public class AlfredException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"    public AlfredException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"        super(\"OOPS!!! \" + message);","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"        return this.getMessage();","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"pangrwa":12}},{"path":"src/main/java/alfred/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.command.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"public class Parser {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public Command parse(String fullCommand) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        String[] lineArr \u003d fullCommand.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        String command \u003d lineArr[0];","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        if (command.equals(\"bye\") \u0026\u0026 lineArr.length \u003d\u003d 1) { // So we can still add taskNames that start with bye","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"        } else if (command.equals(\"list\") \u0026\u0026 lineArr.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        } else if (command.equals(\"mark\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"            return new MarkCommand(lineArr[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        } else if (command.equals(\"unmark\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"            return new UnmarkCommand(lineArr[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        } else if (command.equals(\"delete\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"            return new DeleteCommand(lineArr[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        } else if (command.equals(\"list\") \u0026\u0026 lineArr.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"            String second \u003d lineArr[1];","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"                DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"                LocalDate date \u003d LocalDate.parse(second, format);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"                return new ListDateCommand(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"                throw new AlfredException(\"The date format should be given as dd/mm/yyyy\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"            return new AddCommand(fullCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":38}},{"path":"src/main/java/alfred/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.task.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"public class Storage {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    private File dataFile;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"        dataFile \u003d new File(filePath);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    public ArrayList\u003cTask\u003e load() throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        class CheckMark {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"            public void isMark(int value, Task task) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"                if (value \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        CheckMark checkMark \u003d new CheckMark();","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        dataFile.getParentFile().mkdir();","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"            if (!dataFile.createNewFile()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"                Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                while (sc.hasNext()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"                    String[] lineArr \u003d sc.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"                    String taskType \u003d lineArr[0];","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"                    Task task;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"                    // What happens if the data in the file is not as the format given?","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"                        switch (taskType) {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"                        case \"T\":","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"                            task \u003d new ToDo(lineArr[2]);","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"                            checkMark.isMark(Integer.parseInt(lineArr[1]), task);","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"                            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"                        case \"D\":","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"                            task \u003d new Deadline(lineArr[2], lineArr[3]);","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"                            checkMark.isMark(Integer.parseInt(lineArr[1]), task);","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"                            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"                        case \"E\":","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"                            String[] duration \u003d lineArr[3].split(\"-\");","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"                            task \u003d new Event(lineArr[2], duration[0], duration[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"                            checkMark.isMark(Integer.parseInt(lineArr[1]), task);","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"                            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"                        default:","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"                            throw new AlfredException(\"I\u0027m sorry but there is an\"","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"                                    + \" invalid task in the data file\");","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"                            // No task type","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"                        }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"                        tasks.add(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"                    } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"                        throw new AlfredException(\"There is probably a missing separator in your file\");","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(\"Error, invalid file path\");","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        return tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"    public void write(TaskList tasks) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        tasks.writeToFile(dataFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":73}},{"path":"src/main/java/alfred/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        this.deadline \u003d LocalDateTime.parse(deadline, format);","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        return deadline.toLocalDate().isEqual(date);","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public String addToFile() {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\"D | %d | %s | %s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"                isDone ? 1 : 0, this.description, this.deadline.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\");","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[D][%s] %s(by: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description,","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                this.deadline.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":35}},{"path":"src/main/java/alfred/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    protected LocalDateTime startDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    protected LocalDateTime endDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    public Event(String description, String startDate, String endDate) {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"        this.startDate \u003d LocalDateTime.parse(startDate, format);","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"        this.endDate \u003d LocalDateTime.parse(endDate, format);","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        return startDate.toLocalDate().isEqual(date) || endDate.toLocalDate().isEqual(date);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    public String addToFile() {","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\"E | %d | %s | %s-%s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"                isDone ? 1 : 0, this.description, this.startDate.format(formatter),","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"                this.endDate.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\");","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[E][%s] %s(from: %s to: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"                isDone ? \"X\" : \" \", description,","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"                startDate.format(formatter), endDate.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":40}},{"path":"src/main/java/alfred/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"public class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"    protected final String description;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    // I remember there\u0027s a modifier only allowing classes in same file to access?","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    public void unmarkTask() {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public String addToFile() {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\" | %d | %s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"                isDone ? 1 : 0, this.description);","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    public boolean containsDate(LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[T][%s] %s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":37}},{"path":"src/main/java/alfred/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"public class TaskList {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    public String getList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"        StringBuilder listOfItems \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        for (Task item : tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"            listOfItems.append(String.format(\"    %d. %s\\n\", itemIndex, item));","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            itemIndex++;","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        listOfItems.append(String.format(\"    You have %d %s in the list\\n\", tasks.size(), numTasks));","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        return listOfItems.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    public String getList(LocalDate date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        int itemIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        StringBuilder listOfItems \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        for (Task item : tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"            if (item.containsDate(date)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"                listOfItems.append(String.format(\"    %d. %s\\n\", itemIndex, item));","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"                itemIndex++;","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        String numTasks \u003d itemIndex \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        listOfItems.append(String.format(\"    You have %d %s on %s in the list\\n\", itemIndex - 1, numTasks, date));","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        return listOfItems.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"    public void writeToFile(File dataFile) throws AlfredException {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"                fw.write(task.addToFile());","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"            fw.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"            throw new AlfredException(String.format(\"Something went wrong while\"","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"                    + \" saving the tasks, %s\\n\", e.getMessage()));","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"    public void removeTask(int taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        tasks.remove(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        return tasks.get(taskIndex);","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":79}},{"path":"src/main/java/alfred/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    public String addToFile() {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"        String str \u003d String.format(\"T | %d | %s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"                isDone ? 1 : 0, this.description);","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        return str + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        return String.format(\"[T][%s] %s\",","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"                this.isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"pangrwa":20}},{"path":"src/main/java/alfred/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"public class Ui {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"    private Scanner sc;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    public Ui() {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    public String getCommand() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    public void displayOpening() {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*\");","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"| Your favourite personal assistant:  |\");","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*\");","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        displayLogo();","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        displayIntro();","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    public void displayCommand(String command) {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"        displayLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"        command \u003d \"    \" + command;","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        System.out.println(command);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        displayLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    public void displayError(AlfredException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        displayLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        String output \u003d \"     \" + e.getMessage();","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        System.out.println(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        displayLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    public void displayBye() {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        String command \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        displayCommand(command);","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    public void displayLogo() {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\" _____ __     ______ _____ ____ ___ \");","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"|  -  |  |   |  ____|  _  |  __| _ \\\\     \");","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"| | | |  |   | |___ | |_|_| |__|| | |  \");","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"|  -  |  |___|  ___||  _ \\\\  |__||_| |\");","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"|_| |_| ____ |__|   |_| \\\\_|____|__ /   \");","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"    public void displayIntro() {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        String intro \u003d \"Hello! I\u0027m Alfred :\u003e\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"                + \"How can I help you today?\";","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        displayLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"        System.out.println(intro);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"        displayLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"    public void displayLine() {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"pangrwa":61}},{"path":"src/test/java/alfred/AlfredTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"public class AlfredTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"    // how to test void methods?","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":9}},{"path":"src/test/java/alfred/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"public class AddCommandTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    private final AddCommand addCommand \u003d new AddCommand(\"deadline return book\");","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public void isExit() {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        assertFalse(addCommand.isExit());","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/exceptions/AlfredExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class AlfredExceptionTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"OOPS!!! This is a test error!\";","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, new AlfredException(\"This is a test error!\").toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import alfred.exceptions.AlfredException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import alfred.command.Command;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import alfred.command.ExitCommand;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final Parser parser \u003d new Parser();","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"    // Should use stubs here, how to test equality of object?","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    /*","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    public void testParse_byeCommand_success() throws AlfredException {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        Command exitCommand \u003d new ExitCommand();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        assertEquals(parser.parse(\"bye\"), exitCommand);","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":25}},{"path":"src/test/java/alfred/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    public void testStringConversion_unmark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"[D][ ] This is a test task(by: Jan 10 2023 10:00AM)\";","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, new Deadline(\"This is a test task\", \"10/01/2023 1000\").toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"    // How to test void methods?","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"    public void addTask_oneTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":14}},{"path":"src/test/java/alfred/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"public class TaskTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    // should we use stubs?","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    public void testStringConversion_unMark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"[T][ ] This is a test task\";","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, new Task(\"This is a test task\").toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public void testMarkAsDone() {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        Task testTask \u003d new Task(\"This is a test task\");","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        testTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        assertTrue(testTask.isDone);","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    public void testUnmarkTask() {","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        Task testTask \u003d new Task(\"This is test task\");","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        testTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        testTask.unmarkTask();","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"        assertFalse(testTask.isDone);","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"    public void addToFile_unmark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        Task testTask \u003d new Task(\"This is a test task\");","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \" | 0 | This is a test task\"","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        assertEquals(test, testTask.addToFile());","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    public void testContainsDate() {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        LocalDate localDate \u003d LocalDate.now();","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        assertFalse(new Task(\"This is a test task\").containsDate(localDate));","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":49}},{"path":"src/test/java/alfred/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package alfred.ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import java.io.FileDescriptor;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"public class UiTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final PrintStream ps \u003d new PrintStream(outputStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"    private final PrintStream consoleStream \u003d new PrintStream(new FileOutputStream(FileDescriptor.out));","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    public void displayLogo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"        ui.displayLogo();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \" _____ __     ______ _____ ____ ___ \"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"|  -  |  |   |  ____|  _  |  __| _ \\\\     \"","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"| | | |  |   | |___ | |_|_| |__|| | |  \"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"|  -  |  |___|  ___||  _ \\\\  |__||_| |\"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\" + \"|_| |_| ____ |__|   |_| \\\\_|____|__ /   \"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    public void displayLine() {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        ui.displayLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"        String test \u003d \"    ____________________________________________________________\"","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"                + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    // can we use methods after we test? displayLine","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"    public void displayCommand_emptyString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        ui.displayCommand(\"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        outputStream.reset();","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        ui.displayLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"    \" + \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        ui.displayLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"        String test \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    public void displayCommand_nonEmptyString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        System.setOut(ps);","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        ui.displayCommand(\"Hello World!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        outputStream.reset();","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        ui.displayLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        System.out.println(\"    \" + \"Hello World!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        ui.displayLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        String test \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        assertEquals(actual, test);","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"        System.setOut(consoleStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"    // test displayError need stub for AlfredError?","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"pangrwa":78}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"deadline Return book /by 1/12/2023 1200","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"deadline CS2100 Assignment /by 01/12/2023 2200","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"deadline Buy pencil /by 02/12/2023 1400","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"deadline Buy pen /by 01/12/2023 1200","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"event Eat lunch /from 01/12/2023 1200 /to 01/12/2023 1400","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"event Hellweek /from 01/12/2023 1200 /to 05/12/2023 1200","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"event Meet hello /from 07/12/2023 1200 /to 07/12/2023 1400","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"list 1/12/2023","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"pangrwa":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":1,"-":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"java -classpath ../bin Alfred \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"pangrwa":1,"-":37}}]
