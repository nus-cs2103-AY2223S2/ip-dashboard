[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"checkstyle {","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"panpannnnn":5,"-":41}},{"path":"src/main/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"T | 1 | read book","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"D | 0 | return book | 2023-06-06","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"D | 1 | project meeting | 2023-08-25","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"T | 1 | join sports club","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"D | 1 | submit assignment | 2023-01-26","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"D | 0 | clear todo list | 2023-02-01","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"T | 0 | get my stuff together","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"panpannnnn":7}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"        super(name);","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"        this.deadline \u003d LocalDate.parse(deadline.trim());","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"        if (super.isDone()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"            return \"D | 1 | \" + super.getName() + \" | \" + this.deadline.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \"\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"            return \"D | 0 | \" + super.getName() + \" | \" + this.deadline.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \"\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"panpannnnn":27}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":" * Duke is a task tracker","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":" * @author Branda Ang","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":" * @version CS2103T AY22/23 SEM 2","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"        UI ui \u003d new UI();","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"        TaskList list \u003d new TaskList(100);","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"        Storage storage \u003d new Storage(list);","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"        ui.start();","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"        storage.findData();","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"        storage.connect();","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"        start(ui, list, storage, parser);","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"     * Starts the execution of Duke","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"     * @param ui UI for the application","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"     * @param list TaskList to keep track of the tasks","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"     * @param storage Storage to store final state of the task list","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"     * @param parser Parser to parse commands","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"    public static void start(UI ui, TaskList list, Storage storage, Parser parser) throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"        String cmd;","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"        while (true) {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(\"•──────────────────♛─────────────────•\");","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"panpannnnn"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"panpannnnn"},"content":"                cmd \u003d input.nextLine();","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"panpannnnn"},"content":"                System.out.println(\"•──────────────────♛─────────────────•\");","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"panpannnnn"},"content":"                if (cmd.equals(\"bye\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"                    doBye(storage, ui);","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"                    return;","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"                } else if (cmd.equals(\"list\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"panpannnnn"},"content":"                    doList(list, ui);","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"panpannnnn"},"content":"                } else if (cmd.startsWith(\"mark\") || cmd.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"panpannnnn"},"content":"                    doMark(cmd, list, parser, ui);","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"panpannnnn"},"content":"                } else if (cmd.startsWith(\"todo\") || cmd.startsWith(\"deadline\") || cmd.startsWith(\"event\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"panpannnnn"},"content":"                    addTask(cmd, list, parser, ui);","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"panpannnnn"},"content":"                } else if (cmd.startsWith(\"delete\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"panpannnnn"},"content":"                    deleteTask(cmd, list, parser, ui);","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"panpannnnn"},"content":"                } else if (cmd.startsWith(\"find\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"panpannnnn"},"content":"                    findTask(cmd, list, parser, ui);","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"panpannnnn"},"content":"                } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"panpannnnn"},"content":"                    throw new DukeException(\"╮ʕ˚ᴥ˚ʔ╭ :: ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means!\");","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"panpannnnn"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"panpannnnn"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"panpannnnn"},"content":"                System.out.println(e);","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"panpannnnn"},"content":"    private static void doBye(Storage storage, UI ui) {","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"panpannnnn"},"content":"        storage.save();","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"panpannnnn"},"content":"        ui.showExit();","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"panpannnnn"},"content":"    private static void doList(TaskList list, UI ui) {","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"panpannnnn"},"content":"        ui.showList(list);","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"panpannnnn"},"content":"    private static void doMark(String cmd, TaskList list, Parser parser, UI ui) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"panpannnnn"},"content":"        int num \u003d parser.getMarkNum(cmd, cmd.startsWith(\"mark\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"panpannnnn"},"content":"        if (list.getSize() \u003c num) {","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"panpannnnn"},"content":"            throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The task does not exist!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"panpannnnn"},"content":"        if (cmd.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"panpannnnn"},"content":"            ui.mark(list, num);","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"panpannnnn"},"content":"            ui.unmark(list, num);","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"panpannnnn"},"content":"    private static void addTask(String cmd, TaskList list, Parser parser, UI ui) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":83,"author":{"gitId":"panpannnnn"},"content":"        if (cmd.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"panpannnnn"},"content":"            if (parser.getTodoName(cmd).equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"panpannnnn"},"content":"                throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The description of a todo cannot be empty!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":86,"author":{"gitId":"panpannnnn"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"panpannnnn"},"content":"                ui.addTodo(list, parser.getTodoName(cmd));","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"panpannnnn"},"content":"        } else if (cmd.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"panpannnnn"},"content":"            if (parser.getDeadlineDl(cmd).equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"panpannnnn"},"content":"                throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The deadline is missing!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":93,"author":{"gitId":"panpannnnn"},"content":"            if (parser.getDeadlineName(cmd).equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"panpannnnn"},"content":"                throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The description of a deadline cannot be empty!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":96,"author":{"gitId":"panpannnnn"},"content":"            ui.addDeadline(list, parser.getDeadlineName(cmd), parser.getDeadlineDl(cmd));","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":98,"author":{"gitId":"panpannnnn"},"content":"            if (parser.getEventStart(cmd).equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"panpannnnn"},"content":"                throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The event duration is missing!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":100,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":101,"author":{"gitId":"panpannnnn"},"content":"            if (parser.getEventName(cmd).equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"panpannnnn"},"content":"                throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The description of an event cannot be empty!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":103,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":104,"author":{"gitId":"panpannnnn"},"content":"            ui.addEvent(list, parser.getEventName(cmd), parser.getEventStart(cmd), parser.getEventEnd(cmd));","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":106,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":107,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":108,"author":{"gitId":"panpannnnn"},"content":"    private static void deleteTask(String cmd, TaskList list, Parser parser, UI ui) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":109,"author":{"gitId":"panpannnnn"},"content":"        if (list.getSize() \u003d\u003d 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"panpannnnn"},"content":"            throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The list is empty!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":111,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":112,"author":{"gitId":"panpannnnn"},"content":"        int num \u003d parser.getDeleteNum(cmd);","lastModifiedDate":"2023-02-13"},{"lineNumber":113,"author":{"gitId":"panpannnnn"},"content":"        if (list.getSize() \u003c num) {","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"panpannnnn"},"content":"            throw new DukeException(\"ʕ ﾟ ● ﾟʔ :: ☹ OOPS!!! The task does not exist!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":115,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":116,"author":{"gitId":"panpannnnn"},"content":"        ui.removeTask(list, num);","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":119,"author":{"gitId":"panpannnnn"},"content":"    private static void findTask(String cmd, TaskList list, Parser parser, UI ui) {","lastModifiedDate":"2023-02-13"},{"lineNumber":120,"author":{"gitId":"panpannnnn"},"content":"        String str \u003d parser.getKeyword(cmd);","lastModifiedDate":"2023-02-13"},{"lineNumber":121,"author":{"gitId":"panpannnnn"},"content":"        ui.showFoundTasks(list.findTask(str));","lastModifiedDate":"2023-02-13"},{"lineNumber":122,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"panpannnnn":120,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"    public DukeException(String error) {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"        super(error);","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"        return this.getMessage();","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"panpannnnn":12}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    private LocalDate start;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"    public Event(String name, String start, String end) {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"        super(name);","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"        this.start \u003d LocalDate.parse(start.trim());","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"        this.end \u003d LocalDate.parse(end.trim());","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"        if (super.isDone()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"            return \"D | 1 | \" + super.getName() + \" | \"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"                    + this.start.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \" | \"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"                    + this.end.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \"\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"            return \"D | 0 | \" + super.getName() + \" | \"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"                    + this.start.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \" | \"","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"                    + this.end.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \"\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"        return \"[E]\" + super.toString() + \" (from: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"                + this.start.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" to: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"                + this.end.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"panpannnnn":35}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":" * Parser to parse the command","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"public class Parser {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"     * Gets the index of the task needed to mark/unmark","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"     * @param input The mark/unmark command","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"     * @param isMark Whether the command is a mark command or an unmark command","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"     * @return The index of the task","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"    public Integer getMarkNum(String input, boolean isMark) {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"        if (isMark) {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"            return Integer.valueOf(input.substring(5));","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"            return Integer.valueOf(input.substring(7));","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"     * Gets the description of the todo command","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"     * @param input The todo command","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"     * @return Description of the todo command","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"    public String getTodoName(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"        if (input.substring(4).equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"            return \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(5);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"     * Gets the deadline of the deadline command","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"     * @param input The deadline command","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"panpannnnn"},"content":"     * @return The deadline of the deadline command","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"panpannnnn"},"content":"    public String getDeadlineDl(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"panpannnnn"},"content":"        if (input.indexOf(\"/by\") \u003d\u003d -1) {","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"            return \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(input.indexOf(\"/by\") + 4);","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"panpannnnn"},"content":"     * Gets the description of the deadline command","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"panpannnnn"},"content":"     * @param input The deadline command","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"panpannnnn"},"content":"     * @return Description of the deadline command","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"panpannnnn"},"content":"    public String getDeadlineName(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"panpannnnn"},"content":"        if (input.indexOf(\"/by\") \u003d\u003d 9) {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"panpannnnn"},"content":"            return \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(9, input.indexOf(\"/by\") - 1);","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"panpannnnn"},"content":"     * Gets the start time/date of the event command","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"panpannnnn"},"content":"     * @param input The event command","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"panpannnnn"},"content":"     * @return The start time/date of the event command","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"panpannnnn"},"content":"    public String getEventStart(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"panpannnnn"},"content":"        int start \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"panpannnnn"},"content":"        int end \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"panpannnnn"},"content":"        if (start \u003d\u003d -1 || end \u003d\u003d -1) {","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"panpannnnn"},"content":"            return \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(start + 6, end - 1);","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"panpannnnn"},"content":"     * Gets the end time/date of the event command","lastModifiedDate":"2023-02-13"},{"lineNumber":73,"author":{"gitId":"panpannnnn"},"content":"     * @param input The event command","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"panpannnnn"},"content":"     * @return The end time/date of the event command","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"panpannnnn"},"content":"    public String getEventEnd(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(input.indexOf(\"/to\") + 4);","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"panpannnnn"},"content":"     * Gets the description of the event command","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"panpannnnn"},"content":"     * @param input The event command","lastModifiedDate":"2023-02-13"},{"lineNumber":83,"author":{"gitId":"panpannnnn"},"content":"     * @return Description of the event command","lastModifiedDate":"2023-02-13"},{"lineNumber":84,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":85,"author":{"gitId":"panpannnnn"},"content":"    public String getEventName(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"panpannnnn"},"content":"        int start \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"panpannnnn"},"content":"        if (start \u003d\u003d 6) {","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"panpannnnn"},"content":"            return \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(6, start - 1);","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"panpannnnn"},"content":"     * Gets the index of the task to be deleted","lastModifiedDate":"2023-02-13"},{"lineNumber":95,"author":{"gitId":"panpannnnn"},"content":"     * @param input The delete command","lastModifiedDate":"2023-02-13"},{"lineNumber":96,"author":{"gitId":"panpannnnn"},"content":"     * @return Index of the task to be deleted","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":98,"author":{"gitId":"panpannnnn"},"content":"    public Integer getDeleteNum(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"panpannnnn"},"content":"        return Integer.valueOf(input.substring(7));","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":102,"author":{"gitId":"panpannnnn"},"content":"    public String getKeyword(String input) {","lastModifiedDate":"2023-02-13"},{"lineNumber":103,"author":{"gitId":"panpannnnn"},"content":"        return input.substring(5);","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":105,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"panpannnnn":105}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"import java.io.File;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":" * Storage object to keep track of the final TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":" * and store into the file","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"public class Storage {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"    private File file;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"    private boolean hasData;","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"    private TaskList list;","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"     * Constructor of the Storage class","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"    public Storage(TaskList list) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"        Path path \u003d Paths.get(\"src/main/data/duke.txt\");","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"        this.hasData \u003d java.nio.file.Files.exists(path);","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"        this.file \u003d path.toFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"     * Checks whether there is data available","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"panpannnnn"},"content":"    public void findData() throws DukeException {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"panpannnnn"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(\"ʕっ￫ᴥ￩ʔっ :: Checking past storage...\");","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"panpannnnn"},"content":"            if (!hasData) {","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"                throw new DukeException(\"ʕ•̀ω•́ʔ!! :: Past data does not exist!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(\"ʕっ￫ᴥ￩ʔっ :: Successfully retrieved past data!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"panpannnnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"panpannnnn"},"content":"     * Connects the file to the application and restores the past data","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"panpannnnn"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"panpannnnn"},"content":"    public void connect() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"panpannnnn"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"panpannnnn"},"content":"            Scanner sc \u003d new Scanner(this.file);","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"panpannnnn"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"panpannnnn"},"content":"                String[] input \u003d sc.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"panpannnnn"},"content":"                Task task;","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"panpannnnn"},"content":"                if (input[0].equals(\"T\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"panpannnnn"},"content":"                    task \u003d new ToDo(input[2]);","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"panpannnnn"},"content":"                } else if (input[0].equals(\"D\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"panpannnnn"},"content":"                    task \u003d new Deadline(input[2], input[3]);","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"panpannnnn"},"content":"                } else if (input[0].equals(\"E\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"panpannnnn"},"content":"                    task \u003d new Event(input[2], input[3], input[4]);","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"panpannnnn"},"content":"                } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"panpannnnn"},"content":"                    throw new DukeException(\"╮ʕ˚ᴥ˚ʔ╭ :: ☹ OOPS!!! I don\u0027t know what the input means!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"panpannnnn"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"panpannnnn"},"content":"                if (input[1].equals(\"1\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"panpannnnn"},"content":"                    task.setDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"panpannnnn"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"panpannnnn"},"content":"                list.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"panpannnnn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"panpannnnn"},"content":"            throw new DukeException(e.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"panpannnnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":80,"author":{"gitId":"panpannnnn"},"content":"     * Saves the final state of the TaskList into the file","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"panpannnnn"},"content":"    public void save() {","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"panpannnnn"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"panpannnnn"},"content":"            FileWriter writer \u003d new FileWriter(\"src/main/data/duke.txt\");","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"panpannnnn"},"content":"            for (int i \u003d 0; i \u003c list.getSize(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"panpannnnn"},"content":"                String line \u003d list.getTask(i).toSave();","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"panpannnnn"},"content":"                writer.write(line);","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"panpannnnn"},"content":"            writer.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(\"ʕ•̀ω•́ʔ✧ :: Data successfully saved!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"panpannnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(\"ʕ•̀ω•́ʔ!! :: ☹ OOPS!!! I cannot write to the file!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"panpannnnn":96}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"public class Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"    private String done;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"    private String name;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"        this.done \u003d \" \";","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"    public void setDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"        this.done \u003d \"X\";","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"    public void setUndone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"        this.done \u003d \" \";","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"        if (this.done.equals(\" \")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"            return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"    public String getName() {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"        return this.name;","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"        if (this.done.equals(\"X\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"            return \"1 | \" + this.name + \"\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"            return \"0 | \" + this.name + \"\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"panpannnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"        return \"[\" + done + \"] \" + name;","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"panpannnnn":42}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":" * List to contain the tasks in Duke","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"public class TaskList {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"     * Constructor of the TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"     * @param size Size of the list","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"    public TaskList(int size) {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"        list \u003d new ArrayList\u003cTask\u003e(size);","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"        list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"     * Adds the task to the end of the list","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"     * @param task Task to be added","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"        list.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"     * Gets the size of the list","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"     * @return Size of the list","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"        return list.size();","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"panpannnnn"},"content":"     * Gets the task at the given index","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"     * @param index Index of the task needed","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"     * @return Task at the index given","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"panpannnnn"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"panpannnnn"},"content":"        return list.get(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"panpannnnn"},"content":"     * Removes the task at the given index","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"panpannnnn"},"content":"     * @param index Index of the task to be removed","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"panpannnnn"},"content":"     * @return Task that was removed","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"panpannnnn"},"content":"    public Task removeTask(int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"panpannnnn"},"content":"        return list.remove(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"panpannnnn"},"content":"    public TaskList findTask(String str) {","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"panpannnnn"},"content":"        TaskList result \u003d new TaskList();","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"panpannnnn"},"content":"        for (int i \u003d 0; i \u003c this.getSize(); i++) {","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"panpannnnn"},"content":"            if (this.getTask(i).getName().contains(str)) {","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"panpannnnn"},"content":"                result.addTask(this.getTask(i));","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"panpannnnn"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"panpannnnn"},"content":"        return result;","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"panpannnnn":65}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"        super(name);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"        if (super.isDone()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"            return \"T | 1 | \" + super.getName() + \"\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"            return \"T | 0 | \" + super.getName() + \"\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"panpannnnn":22}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":" * UI object that displays the responses of Duke","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"public class UI {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"     * Displays the welcome message","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"    public void start() {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ฅʕ•ᴥ•ʔฅ :: Hiii! I\u0027m duke, here to help you with your tasks!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"•──────────────────♛─────────────────•\");","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"     * Displays the tasks in the TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"    public void showList(TaskList list) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•ᴥ•ʔっ :: Here are the task(s) in your list:\");","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"        for (int i \u003d 1; i \u003c\u003d list.getSize(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(i + \".\" + list.getTask(i-1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"panpannnnn"},"content":"     * Displays the tasks that match the keyword","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"panpannnnn"},"content":"     * @param list List of tasks that match the keyword","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"panpannnnn"},"content":"    public void showFoundTasks(TaskList list) {","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•ᴥ•ʔっ :: Here are the matching task(s) in your list:\");","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"panpannnnn"},"content":"        for (int i \u003d 1; i \u003c\u003d list.getSize(); i++) {","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"panpannnnn"},"content":"            System.out.println(i + \".\" + list.getTask(i-1).toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"panpannnnn"},"content":"     * Marks a task","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"panpannnnn"},"content":"     * @param index Index of the task to be marked","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"panpannnnn"},"content":"    public void mark(TaskList list, int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"panpannnnn"},"content":"        list.getTask(index - 1).setDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•̀ω•́ʔ✧ :: Nice! I\u0027ve marked this task as done:\\n  \" + list.getTask(index - 1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"panpannnnn"},"content":"     * Unmarks a task","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"panpannnnn"},"content":"     * @param index Index of the task to be unmarked","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"panpannnnn"},"content":"    public void unmark(TaskList list, int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"panpannnnn"},"content":"        list.getTask(index - 1).setUndone();","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•̀ω•́ʔ✧ :: OK, I\u0027ve marked this task as not done yet:\\n  \" + list.getTask(index - 1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"panpannnnn"},"content":"     * Adds a Todo task into the list","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"panpannnnn"},"content":"     * @param name Description of the Todo task","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"panpannnnn"},"content":"    public void addTodo(TaskList list, String name) {","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"panpannnnn"},"content":"        list.addTask(new ToDo(name));","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ฅʕ\u0027ᴥ\u0027ʔฅ :: Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"  \" + list.getTask(list.getSize() - 1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•ᴥ•ʔっ :: Now you have \" + list.getSize() + \" task(s) in the list.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"panpannnnn"},"content":"     * Adds a deadline task into the list","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":78,"author":{"gitId":"panpannnnn"},"content":"     * @param name Description of the deadline task","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"panpannnnn"},"content":"     * @param deadline Deadline of the deadline task","lastModifiedDate":"2023-02-13"},{"lineNumber":80,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"panpannnnn"},"content":"    public void addDeadline(TaskList list, String name, String deadline) {","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"panpannnnn"},"content":"        list.addTask(new Deadline(name, deadline));","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ฅʕ\u0027ᴥ\u0027ʔฅ :: Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"  \" + list.getTask(list.getSize() - 1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•ᴥ•ʔっ :: Now you have \" + list.getSize() + \" task(s) in the list.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":89,"author":{"gitId":"panpannnnn"},"content":"     * Adds an event task into the list","lastModifiedDate":"2023-02-13"},{"lineNumber":90,"author":{"gitId":"panpannnnn"},"content":"     * @param list Current TaskList","lastModifiedDate":"2023-02-13"},{"lineNumber":91,"author":{"gitId":"panpannnnn"},"content":"     * @param name Description of the event task","lastModifiedDate":"2023-02-13"},{"lineNumber":92,"author":{"gitId":"panpannnnn"},"content":"     * @param start Start time/date of the event task","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"panpannnnn"},"content":"     * @param end End time/date of the event task","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":95,"author":{"gitId":"panpannnnn"},"content":"    public void addEvent(TaskList list, String name, String start, String end) {","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"panpannnnn"},"content":"        list.addTask(new Event(name, start, end));","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ฅʕ\u0027ᴥ\u0027ʔฅ :: Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"  \" + list.getTask(list.getSize() - 1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•ᴥ•ʔっ :: Now you have \" + list.getSize() + \" task(s) in the list.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":103,"author":{"gitId":"panpannnnn"},"content":"     * Removes the task at the given index of the list","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"panpannnnn"},"content":"     * @param list Description of the event task","lastModifiedDate":"2023-02-13"},{"lineNumber":105,"author":{"gitId":"panpannnnn"},"content":"     * @param index Index of the task to be removed","lastModifiedDate":"2023-02-13"},{"lineNumber":106,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":107,"author":{"gitId":"panpannnnn"},"content":"    public void removeTask(TaskList list, int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ฅʕ\u0027ᴥ\u0027ʔฅ :: Noted. I\u0027ve removed this task :\");","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"  \" + list.removeTask(index - 1).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕ•ᴥ•ʔっ :: Now you have \" + list.getSize() + \" task(s) in the list.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"panpannnnn"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":114,"author":{"gitId":"panpannnnn"},"content":"     * Displays the exit message","lastModifiedDate":"2023-02-13"},{"lineNumber":115,"author":{"gitId":"panpannnnn"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":116,"author":{"gitId":"panpannnnn"},"content":"    public void showExit() {","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"panpannnnn"},"content":"        System.out.println(\"ʕっ￫ᴥ￩ʔっ :: Buhbyeee, hope to see you again soon!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"panpannnnn":119}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"public class EventTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"        Event e \u003d new Event(\"go to school\", \"2019-01-05\", \"2019-01-08\");","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"        assertEquals(e.toString(), \"[E][] go to school (from: Jan 5 2019 to: Jan 8 2019)\");","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"panpannnnn":12}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"public class ParserTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"    public void getMarkNumTest() {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"            assertArrayEquals(Parser.getMarkNum(\"mark 2\", true),","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"                    2);","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"panpannnnn"},"content":"        catch (Exception ignored) {","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"panpannnnn"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"panpannnnn"},"content":"    public void getTodoNameTest() {","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"panpannnnn"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"panpannnnn"},"content":"            assertArrayEquals(Parser.getTodoName(\"todo hello\"),","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"panpannnnn"},"content":"                    \"hello\");","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"panpannnnn"},"content":"        catch (Exception ignored) {","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"panpannnnn"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"panpannnnn":27}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"public class TodoTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"panpannnnn"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"panpannnnn"},"content":"        ToDo t \u003d new ToDo(\"go to school\");","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"        assertEquals(t.toString(), \"[T][] go to school\");","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"panpannnnn"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"panpannnnn":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"mark 5","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"todo get my stuff together","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"list","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"delete 6","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"list","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"panpannnnn"},"content":"bye","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"panpannnnn":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"panpannnnn"},"content":"dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"panpannnnn"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin @sources.txt","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"panpannnnn":2,"-":20}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"panpannnnn"},"content":"D:\\Y2S2\\CS2109S\\ip\\src\\main\\java\\Deadline.java","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"panpannnnn"},"content":"D:\\Y2S2\\CS2109S\\ip\\src\\main\\java\\Duke.java","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"panpannnnn"},"content":"D:\\Y2S2\\CS2109S\\ip\\src\\main\\java\\DukeException.java","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"panpannnnn"},"content":"D:\\Y2S2\\CS2109S\\ip\\src\\main\\java\\Event.java","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"panpannnnn"},"content":"D:\\Y2S2\\CS2109S\\ip\\src\\main\\java\\Task.java","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"panpannnnn"},"content":"D:\\Y2S2\\CS2109S\\ip\\src\\main\\java\\ToDo.java","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"panpannnnn":6}}]
