[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"randallnhr":18,"-":40}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"        dialog.setWrapText(true);","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"    private void flip() {","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"randallnhr"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"randallnhr"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"randallnhr"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"randallnhr"},"content":"        db.flip();","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"randallnhr"},"content":"        return db;","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"randallnhr":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":" * Represents the main Duke class.","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    private static final String SAVE_PATH \u003d \"./taskList.txt\";","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"    private static final Ui UI \u003d new Ui();","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"    private static final Parser PARSER \u003d new Parser();","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"     * Constructor for a Duke object.","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    public Duke() {","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"            this.storage \u003d new Storage(SAVE_PATH);","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"            this.taskList \u003d storage.loadData();","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"        String[] inputArr \u003d input.strip().split(\" \",2);","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"            String toPrint \u003d PARSER.readInput(inputArr, taskList);","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"            storage.storeData(this.taskList.getTasks());","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"            return toPrint;","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"            return e.getMessage();","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"    public void run() throws IOException, DukeException{","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"        UI.start();","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"        String[] input \u003d UI.readLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"        while (!input[0].equals(\"bye\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"                UI.displayLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"                PARSER.readInput(input, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"                UI.displayLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"                input \u003d UI.readLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"                UI.displayLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"randallnhr"},"content":"                input \u003d UI.readLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"randallnhr"},"content":"        UI.goodbye();","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"randallnhr"},"content":"        storage.storeData(this.taskList.getTasks());","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"randallnhr":56,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"    public DukeException(String m) {","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"        super(m);","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"randallnhr":7}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"public class Launcher {","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"randallnhr":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/ligne-icon.png\"));","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"            stage.setTitle(\"t4skiezxc\");","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"            stage.getIcons().add(dukeImage);","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"            stage.show();","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"randallnhr":36}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"import javafx.scene.layout.*;","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/buddy, bleu icon.png\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/ligne-icon.png\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"//","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"//    private Image dukeBackground \u003d new Image(this.getClass().getResourceAsStream(\"/images/wp10320823.jpg\"));","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"//","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"//    private BackgroundImage backgroundImage \u003d new BackgroundImage(dukeBackground, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, BackgroundSize.DEFAULT);","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"//","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"//    private Background background \u003d new Background(backgroundImage);","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"//        scrollPane.setBackground(background);","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(\"Wassup! I\u0027m your new friend, t4skiezxc!\\n\" +","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"                \"What poppin\u0027?\", dukeImage));","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"randallnhr"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"randallnhr"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"randallnhr"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"randallnhr"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"randallnhr"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"randallnhr"},"content":"        );","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"randallnhr":59}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-14"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":" * Represents a class to decipher user\u0027s commands.","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"public class Parser {","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    public Parser() {};","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"     * Reads the command that the user input, calls the respective functions.","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input command.","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList.","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user enters invalid input.","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    public String readInput(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"        switch (input[0]) {","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"        case \"list\":","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"            return taskList.list();","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"            return mark(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"            return unmark(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"            return todo(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"            return deadline(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"        case \"event\":","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"            return event(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"            return delete(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"        case \"find\":","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"            return find(input, taskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"        case \"reschedule\":","lastModifiedDate":"2023-02-14"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"            return reschedule(input, taskList);","lastModifiedDate":"2023-02-14"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"        case \"help\":","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"            return help();","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"        case \"bye\":","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"            Platform.exit();","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"            return \"Peace out!\";","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"        default:","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Sorry I do not understand the command :(\");","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"randallnhr"},"content":"     * Marks a specific task as done and returns a String to notify user.","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"randallnhr"},"content":"     * @return String Message to update user upon success","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user enters invalid number or task that has not been created.","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"randallnhr"},"content":"    public String mark(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"randallnhr"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Mark needs a number.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"randallnhr"},"content":"        int index;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"randallnhr"},"content":"            index \u003d Integer.parseInt(input[1]);","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"randallnhr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid number.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"randallnhr"},"content":"        boolean isNotWithinTaskListSize \u003d index \u003e taskList.size();","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"randallnhr"},"content":"        boolean isSmallerThan1 \u003d index \u003c\u003d 0;","lastModifiedDate":"2023-02-13"},{"lineNumber":73,"author":{"gitId":"randallnhr"},"content":"        if (isNotWithinTaskListSize || isSmallerThan1) {","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid task.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"randallnhr"},"content":"        assert index \u003e 0 : \"Number less than equal 0.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"randallnhr"},"content":"        return taskList.markTask(index - 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"randallnhr"},"content":"     * Marks a specific task as not done and returns a String to notify user.","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"randallnhr"},"content":"     * @return String Message to update user upon success","lastModifiedDate":"2023-02-13"},{"lineNumber":85,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user enters invalid number or task that has not been created.","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"randallnhr"},"content":"    public String unmark(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"randallnhr"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Unmark needs a number.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"randallnhr"},"content":"        int index;","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"randallnhr"},"content":"            index \u003d Integer.parseInt(input[1]);","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"randallnhr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid number.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"randallnhr"},"content":"        boolean isNotWithinTaskListSize \u003d index \u003e taskList.size();","lastModifiedDate":"2023-02-13"},{"lineNumber":98,"author":{"gitId":"randallnhr"},"content":"        boolean isSmallerThan1 \u003d index \u003c\u003d 0;","lastModifiedDate":"2023-02-13"},{"lineNumber":99,"author":{"gitId":"randallnhr"},"content":"        if (isNotWithinTaskListSize || isSmallerThan1) {","lastModifiedDate":"2023-02-13"},{"lineNumber":100,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid task.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"randallnhr"},"content":"        assert index \u003e 0 : \"Number less than equal 0.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"randallnhr"},"content":"        return taskList.unmarkTask(index - 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"randallnhr"},"content":"     * Adds a Todo task into the users TaskList.","lastModifiedDate":"2023-02-13"},{"lineNumber":108,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"randallnhr"},"content":"     * @return String Message to update user upon success","lastModifiedDate":"2023-02-13"},{"lineNumber":111,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user did not provide name of Todo.","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"randallnhr"},"content":"    public String todo(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":114,"author":{"gitId":"randallnhr"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":115,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"todo needs a description\");","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":117,"author":{"gitId":"randallnhr"},"content":"        Task t \u003d new Todo(input[1].strip());","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"randallnhr"},"content":"        taskList.addTask(t);","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"randallnhr"},"content":"        return \"I have added a new todo:\\n  \" + t + \"\\nNumber of tasks: \" + taskList.size();","lastModifiedDate":"2023-02-17"},{"lineNumber":120,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"randallnhr"},"content":"     * Adds a Deadline task into the users TaskList.","lastModifiedDate":"2023-02-13"},{"lineNumber":124,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"randallnhr"},"content":"     * @return String Message to update user upon success","lastModifiedDate":"2023-02-13"},{"lineNumber":127,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user did not enter /by date or invalid date format.","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"randallnhr"},"content":"    public String deadline(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":130,"author":{"gitId":"randallnhr"},"content":"        boolean isWithoutInput \u003d input.length \u003d\u003d 1;","lastModifiedDate":"2023-02-13"},{"lineNumber":131,"author":{"gitId":"randallnhr"},"content":"        boolean isWithoutBy \u003d !input[1].contains(\"/by\");","lastModifiedDate":"2023-02-13"},{"lineNumber":132,"author":{"gitId":"randallnhr"},"content":"        if (isWithoutInput || isWithoutBy) {","lastModifiedDate":"2023-02-13"},{"lineNumber":133,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Deadline needs a /by.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":134,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"randallnhr"},"content":"        String[] tempInput \u003d input[1].strip().split(\"/by \");","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"randallnhr"},"content":"        if (tempInput.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"/by needs a date/time.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"randallnhr"},"content":"            Task t \u003d new Deadline(tempInput[0].strip(), tempInput[1].strip());","lastModifiedDate":"2023-02-05"},{"lineNumber":141,"author":{"gitId":"randallnhr"},"content":"            taskList.addTask(t);","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"randallnhr"},"content":"            return \"I have added a new deadline:\\n  \" + t + \"\\nNumber of tasks: \" + taskList.size();","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"randallnhr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Date after /by needs to be in format yyyy-mm-dd.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":145,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":146,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":147,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":148,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":149,"author":{"gitId":"randallnhr"},"content":"     * Adds an Event task into the users TaskList.","lastModifiedDate":"2023-02-13"},{"lineNumber":150,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":151,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":152,"author":{"gitId":"randallnhr"},"content":"     * @return String Message to update user upon success","lastModifiedDate":"2023-02-13"},{"lineNumber":153,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user did not enter /from or /to or invalid date format.","lastModifiedDate":"2023-02-05"},{"lineNumber":154,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":155,"author":{"gitId":"randallnhr"},"content":"    public String event(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":156,"author":{"gitId":"randallnhr"},"content":"        boolean isWithoutInput \u003d input.length \u003d\u003d 1;","lastModifiedDate":"2023-02-13"},{"lineNumber":157,"author":{"gitId":"randallnhr"},"content":"        boolean isWithoutFrom \u003d !input[1].contains(\"/from\");","lastModifiedDate":"2023-02-13"},{"lineNumber":158,"author":{"gitId":"randallnhr"},"content":"        boolean isWithoutTo \u003d !input[1].contains(\"/to\");","lastModifiedDate":"2023-02-13"},{"lineNumber":159,"author":{"gitId":"randallnhr"},"content":"        if (isWithoutInput || isWithoutFrom || isWithoutTo ) {","lastModifiedDate":"2023-02-13"},{"lineNumber":160,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Event needs a /from and /to.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":161,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":162,"author":{"gitId":"randallnhr"},"content":"        String[] tempInput \u003d input[1].split(\"/\");","lastModifiedDate":"2023-02-05"},{"lineNumber":163,"author":{"gitId":"randallnhr"},"content":"        String[] from \u003d tempInput[1].split(\" \",2);","lastModifiedDate":"2023-02-05"},{"lineNumber":164,"author":{"gitId":"randallnhr"},"content":"        String[] to \u003d tempInput[2].split(\" \",2);","lastModifiedDate":"2023-02-05"},{"lineNumber":165,"author":{"gitId":"randallnhr"},"content":"        if (from.length \u003d\u003d 1 || to.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":166,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"/from and /to needs a date.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":167,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":168,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":169,"author":{"gitId":"randallnhr"},"content":"            Task t \u003d new Event(tempInput[0].strip(), from[1].strip(), to[1].strip());","lastModifiedDate":"2023-02-05"},{"lineNumber":170,"author":{"gitId":"randallnhr"},"content":"            taskList.addTask(t);","lastModifiedDate":"2023-02-05"},{"lineNumber":171,"author":{"gitId":"randallnhr"},"content":"            return \"I have added a new event:\\n  \" + t + \"\\nNumber of tasks: \" + taskList.size();","lastModifiedDate":"2023-02-17"},{"lineNumber":172,"author":{"gitId":"randallnhr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":173,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Date after /from and /to needs to be in format yyyy-mm-dd.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":174,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":175,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":176,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":177,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":178,"author":{"gitId":"randallnhr"},"content":"     * Deletes a task from the user\u0027s TaskList.","lastModifiedDate":"2023-02-13"},{"lineNumber":179,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":180,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":181,"author":{"gitId":"randallnhr"},"content":"     * @return String Message to update user upon success","lastModifiedDate":"2023-02-13"},{"lineNumber":182,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user enters invalid number.","lastModifiedDate":"2023-02-05"},{"lineNumber":183,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":184,"author":{"gitId":"randallnhr"},"content":"    public String delete(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":185,"author":{"gitId":"randallnhr"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":186,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Delete needs a number.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":187,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":188,"author":{"gitId":"randallnhr"},"content":"        int index;","lastModifiedDate":"2023-02-05"},{"lineNumber":189,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":190,"author":{"gitId":"randallnhr"},"content":"            index \u003d Integer.parseInt(input[1]);","lastModifiedDate":"2023-02-05"},{"lineNumber":191,"author":{"gitId":"randallnhr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":192,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid number.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":193,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":194,"author":{"gitId":"randallnhr"},"content":"        boolean isNotWithinTaskListSize \u003d index \u003e taskList.size();","lastModifiedDate":"2023-02-13"},{"lineNumber":195,"author":{"gitId":"randallnhr"},"content":"        boolean isSmallerThan1 \u003d index \u003c\u003d 0;","lastModifiedDate":"2023-02-13"},{"lineNumber":196,"author":{"gitId":"randallnhr"},"content":"        if (isNotWithinTaskListSize || isSmallerThan1) {","lastModifiedDate":"2023-02-13"},{"lineNumber":197,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid task.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":198,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":199,"author":{"gitId":"randallnhr"},"content":"        assert index \u003e 0 : \"Number less than equal 0.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":200,"author":{"gitId":"randallnhr"},"content":"        return taskList.deleteTask(index - 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":201,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":202,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":203,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":204,"author":{"gitId":"randallnhr"},"content":"     * Returns a String containing the user\u0027s task that matches the given keyword.","lastModifiedDate":"2023-02-13"},{"lineNumber":205,"author":{"gitId":"randallnhr"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2023-02-05"},{"lineNumber":206,"author":{"gitId":"randallnhr"},"content":"     * @param taskList User\u0027s TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":207,"author":{"gitId":"randallnhr"},"content":"     * @return String User\u0027s task that match given keyword","lastModifiedDate":"2023-02-13"},{"lineNumber":208,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If user did not enter a keyword.","lastModifiedDate":"2023-02-05"},{"lineNumber":209,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":210,"author":{"gitId":"randallnhr"},"content":"    public String find(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-12"},{"lineNumber":211,"author":{"gitId":"randallnhr"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-05"},{"lineNumber":212,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Find needs a keyword.\");","lastModifiedDate":"2023-02-05"},{"lineNumber":213,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":214,"author":{"gitId":"randallnhr"},"content":"        return \"I have found these matching tasks in your list:\\n\" + taskList.findTask(input[1].strip());","lastModifiedDate":"2023-02-17"},{"lineNumber":215,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":216,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":217,"author":{"gitId":"randallnhr"},"content":"    public String reschedule(String[] input, TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-14"},{"lineNumber":218,"author":{"gitId":"randallnhr"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-14"},{"lineNumber":219,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Format: reschedule \u003cTask Type\u003e \u003cTask Index\u003e \u003c/by or /from or /to\u003e \u003cYYYY-MM-DD\u003e\");","lastModifiedDate":"2023-02-14"},{"lineNumber":220,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":221,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":222,"author":{"gitId":"randallnhr"},"content":"        String[] commandArgs \u003d input[1].split(\" \");","lastModifiedDate":"2023-02-14"},{"lineNumber":223,"author":{"gitId":"randallnhr"},"content":"        if (commandArgs.length \u003c 4) {","lastModifiedDate":"2023-02-14"},{"lineNumber":224,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Format: reschedule \u003cTask Type\u003e \u003cTask Index\u003e \u003c/by or /from or /to\u003e \u003cyyyy-mm-dd\u003e\");","lastModifiedDate":"2023-02-14"},{"lineNumber":225,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":226,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":227,"author":{"gitId":"randallnhr"},"content":"        String taskType \u003d commandArgs[0];","lastModifiedDate":"2023-02-14"},{"lineNumber":228,"author":{"gitId":"randallnhr"},"content":"        if (taskType.equals(\"deadline\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":229,"author":{"gitId":"randallnhr"},"content":"            return changeDeadline(commandArgs, taskList);","lastModifiedDate":"2023-02-14"},{"lineNumber":230,"author":{"gitId":"randallnhr"},"content":"        } else if (taskType.equals(\"event\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":231,"author":{"gitId":"randallnhr"},"content":"            return changeEvent(commandArgs, taskList);","lastModifiedDate":"2023-02-14"},{"lineNumber":232,"author":{"gitId":"randallnhr"},"content":"        } else {","lastModifiedDate":"2023-02-14"},{"lineNumber":233,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"You can only reschedule dates for deadline or event.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":234,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":235,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":236,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":237,"author":{"gitId":"randallnhr"},"content":"    private String changeDeadline(String[] commandArgs, TaskList taskList) throws  DukeException {","lastModifiedDate":"2023-02-14"},{"lineNumber":238,"author":{"gitId":"randallnhr"},"content":"        int index \u003d Integer.parseInt(commandArgs[1]);","lastModifiedDate":"2023-02-14"},{"lineNumber":239,"author":{"gitId":"randallnhr"},"content":"        if (index \u003e taskList.size()) {","lastModifiedDate":"2023-02-14"},{"lineNumber":240,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid deadline task given.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":241,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":242,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":243,"author":{"gitId":"randallnhr"},"content":"        Task task \u003d taskList.get(index - 1);","lastModifiedDate":"2023-02-14"},{"lineNumber":244,"author":{"gitId":"randallnhr"},"content":"        if (task instanceof Deadline \u003d\u003d false) {","lastModifiedDate":"2023-02-14"},{"lineNumber":245,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Index given not a deadline.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":246,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":247,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":248,"author":{"gitId":"randallnhr"},"content":"        Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-02-14"},{"lineNumber":249,"author":{"gitId":"randallnhr"},"content":"        if (!commandArgs[2].equals(\"/by\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":250,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Reschedule deadline needs a /by.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":251,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":252,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":253,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-14"},{"lineNumber":254,"author":{"gitId":"randallnhr"},"content":"            LocalDate date \u003d LocalDate.parse(commandArgs[3]);","lastModifiedDate":"2023-02-14"},{"lineNumber":255,"author":{"gitId":"randallnhr"},"content":"            return deadline.changeDate(date);","lastModifiedDate":"2023-02-14"},{"lineNumber":256,"author":{"gitId":"randallnhr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-14"},{"lineNumber":257,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Date after /by needs to be in format yyyy-mm-dd.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":258,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":259,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":260,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":261,"author":{"gitId":"randallnhr"},"content":"    private String changeEvent(String[] commandArgs, TaskList taskList) throws  DukeException {","lastModifiedDate":"2023-02-14"},{"lineNumber":262,"author":{"gitId":"randallnhr"},"content":"        int index \u003d Integer.parseInt(commandArgs[1]);","lastModifiedDate":"2023-02-14"},{"lineNumber":263,"author":{"gitId":"randallnhr"},"content":"        if (index \u003e taskList.size()) {","lastModifiedDate":"2023-02-14"},{"lineNumber":264,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Invalid event task given.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":265,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":266,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":267,"author":{"gitId":"randallnhr"},"content":"        Task task \u003d taskList.get(index - 1);","lastModifiedDate":"2023-02-14"},{"lineNumber":268,"author":{"gitId":"randallnhr"},"content":"        if (task instanceof Event \u003d\u003d false) {","lastModifiedDate":"2023-02-14"},{"lineNumber":269,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Index given not an event.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":270,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":271,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":272,"author":{"gitId":"randallnhr"},"content":"        Event event \u003d (Event) task;","lastModifiedDate":"2023-02-14"},{"lineNumber":273,"author":{"gitId":"randallnhr"},"content":"        String dateToChange \u003d commandArgs[2];","lastModifiedDate":"2023-02-14"},{"lineNumber":274,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":275,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-14"},{"lineNumber":276,"author":{"gitId":"randallnhr"},"content":"            LocalDate date \u003d LocalDate.parse(commandArgs[3]);","lastModifiedDate":"2023-02-14"},{"lineNumber":277,"author":{"gitId":"randallnhr"},"content":"            if (dateToChange.equals(\"/from\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":278,"author":{"gitId":"randallnhr"},"content":"                return event.changeFrom(date);","lastModifiedDate":"2023-02-14"},{"lineNumber":279,"author":{"gitId":"randallnhr"},"content":"            } else if (dateToChange.equals(\"/to\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":280,"author":{"gitId":"randallnhr"},"content":"                return event.changeTo(date);","lastModifiedDate":"2023-02-14"},{"lineNumber":281,"author":{"gitId":"randallnhr"},"content":"            } else {","lastModifiedDate":"2023-02-14"},{"lineNumber":282,"author":{"gitId":"randallnhr"},"content":"                throw new DukeException(\"Reschedule event needs a /from or /to.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":283,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-14"},{"lineNumber":284,"author":{"gitId":"randallnhr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-14"},{"lineNumber":285,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Date after /from or /to needs to be in format yyyy-mm-dd.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":286,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":287,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":288,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":289,"author":{"gitId":"randallnhr"},"content":"    public String help() {","lastModifiedDate":"2023-02-17"},{"lineNumber":290,"author":{"gitId":"randallnhr"},"content":"        return \"I only understand these commands:\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":291,"author":{"gitId":"randallnhr"},"content":"                + \"list\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":292,"author":{"gitId":"randallnhr"},"content":"                + \"bye\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":293,"author":{"gitId":"randallnhr"},"content":"                + \"todo \u003cname\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":294,"author":{"gitId":"randallnhr"},"content":"                + \"deadline \u003cname\u003e /by \u003cyyyy-mm-dd\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":295,"author":{"gitId":"randallnhr"},"content":"                + \"event \u003cname\u003e /from \u003cyyyy-mm-dd\u003e /to \u003cyyyy-mm-dd\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":296,"author":{"gitId":"randallnhr"},"content":"                + \"reschedule \u003cdeadline/event\u003e \u003cindex\u003e \u003c/by /from /to\u003e \u003cyyyy-mm-dd\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":297,"author":{"gitId":"randallnhr"},"content":"                + \"mark \u003cindex\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":298,"author":{"gitId":"randallnhr"},"content":"                + \"unmark \u003cindex\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":299,"author":{"gitId":"randallnhr"},"content":"                + \"find \u003ckeyword\u003e\\n\"","lastModifiedDate":"2023-02-17"},{"lineNumber":300,"author":{"gitId":"randallnhr"},"content":"                + \"help\";","lastModifiedDate":"2023-02-17"},{"lineNumber":301,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":302,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"randallnhr":302}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.io.File;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":" * Represents a class used to store and load user\u0027s tasks from Duke chatbot.","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"public class Storage {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    private String filePath;","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"     * Constructor for a Storage object.","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"     * @param filePath Relative path of taskList.txt file.","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"     * Loads a TaskList from taskList.txt.","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"     * @return TaskList containing user\u0027s saved tasks.","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If file could not be read.","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"    public TaskList loadData() throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"            if (file.createNewFile()){","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"                return taskList;","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"            assert file.exists() : \"File was not successfully created.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Something went wrong when accessing file\");","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"        Scanner sc;","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"            sc \u003d new Scanner(file);","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Unable to read file\");","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"randallnhr"},"content":"        ","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"randallnhr"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"randallnhr"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"randallnhr"},"content":"                Task task;","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"randallnhr"},"content":"                String[] line \u003d sc.nextLine().split(\"\\\\|\");","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"randallnhr"},"content":"                if (line[0].equals(\"T\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"                    task \u003d new Todo(line[2].strip());","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"randallnhr"},"content":"                } else if (line[0].equals(\"D\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"randallnhr"},"content":"                    task \u003d new Deadline(line[2], line[3]);","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"randallnhr"},"content":"                } else {","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"randallnhr"},"content":"                    task \u003d new Event(line[2], line[3], line[4]);","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"randallnhr"},"content":"                }","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"randallnhr"},"content":"    ","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"randallnhr"},"content":"                if (line[1].equals(\"1\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"randallnhr"},"content":"                    task.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"randallnhr"},"content":"                }","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"randallnhr"},"content":"    ","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"randallnhr"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"randallnhr"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"randallnhr"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"randallnhr"},"content":"        sc.close();","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"randallnhr"},"content":"        return taskList;","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"randallnhr"},"content":"     * Store user\u0027s tasks in a taskList.txt file in given relative file path.","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"randallnhr"},"content":"     * @param t User\u0027s tasks to store.","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"randallnhr"},"content":"     * @throws DukeException If unable to save file.","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"randallnhr"},"content":"    public void storeData(ArrayList\u003cTask\u003e t) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"randallnhr"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"randallnhr"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"randallnhr"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"randallnhr"},"content":"                System.out.println(\"Created new file taskList.txt\");","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":88,"author":{"gitId":"randallnhr"},"content":"            assert file.exists() : \"File was not successfully created.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"randallnhr"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"randallnhr"},"content":"            String taskString \u003d \"\";","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"randallnhr"},"content":"            for (int i \u003d 0; i \u003c t.size(); i++){","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"randallnhr"},"content":"                taskString +\u003d t.get(i).getFileDesc() + \"\\n\";","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"randallnhr"},"content":"            fw.write(taskString);","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"randallnhr"},"content":"            fw.close();","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"randallnhr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"Unable to save to file\");","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"randallnhr":100}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":" * Represents a class to store a user\u0027s tasks.","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"public class TaskList {","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"    private int count;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"     * Constructor for a TaskList object.","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"     * Prints the user\u0027s tasks in list form.","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    public String list() {","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"        int curr \u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"        String toPrint \u003d \"Here are your tasks:\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"        Iterator\u003cTask\u003e iter \u003d this.tasks.iterator();","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"        while (iter.hasNext()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"            Task task \u003d iter.next();","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"            toPrint +\u003d curr + \". \" + task + \"\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"            curr++;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"        return toPrint;","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"     * Prints the user\u0027s tasks that matches keyword in list form.","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"    public String findTask(String keyword) {","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"        int curr \u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"        String toPrint \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"        Iterator\u003cTask\u003e iter \u003d this.tasks.iterator();","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"        while (iter.hasNext()) {","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"            Task task \u003d iter.next();","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"            if (task.getName().contains(keyword)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"                toPrint +\u003d curr + \". \" + task + \"\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"                curr++;","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"randallnhr"},"content":"        return toPrint;","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"randallnhr"},"content":"     * Adds a task to the user\u0027s TaskList.","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"randallnhr"},"content":"     * @param t Task to be added.","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"randallnhr"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"randallnhr"},"content":"        this.tasks.add(t);","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"randallnhr"},"content":"        count++;","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"randallnhr"},"content":"     * Removes a task from the user\u0027s TaskList.","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"randallnhr"},"content":"     * @param i Index of task to be deleted.","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"randallnhr"},"content":"    public String deleteTask(int i) {","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"randallnhr"},"content":"        Task t \u003d this.tasks.remove(i);","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"randallnhr"},"content":"        count--;","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"randallnhr"},"content":"        return \"I have deleted the task:\\n  \" + t + \"\\nNumber of tasks: \" + count;","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"randallnhr"},"content":"     * Marks the given task as completed.","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"randallnhr"},"content":"     * @param i Index of task to be marked.","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"randallnhr"},"content":"    public String markTask(int i) {","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"randallnhr"},"content":"        Task t \u003d this.tasks.get(i);","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"randallnhr"},"content":"        t.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"randallnhr"},"content":"        return \"Sick! I have marked the task as done:\\n \" + t;","lastModifiedDate":"2023-02-17"},{"lineNumber":81,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"randallnhr"},"content":"     * Unmarks the given task as completed.","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"randallnhr"},"content":"     * @param i Index of task to be unmarked.","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"randallnhr"},"content":"    public String unmarkTask(int i) {","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"randallnhr"},"content":"        Task t \u003d this.tasks.get(i);","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"randallnhr"},"content":"        t.unmark();","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"randallnhr"},"content":"        return \"Nuuu! I have marked the task as not done:\\n \" + t;","lastModifiedDate":"2023-02-17"},{"lineNumber":91,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"randallnhr"},"content":"     * Returns the number of tasks in the user\u0027s TaskList.","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"randallnhr"},"content":"     * @return int Number of tasks","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"randallnhr"},"content":"    public int size() {","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"randallnhr"},"content":"        return count;","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"randallnhr"},"content":"     * Returns the user\u0027s tasks in an ArrayList.","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"randallnhr"},"content":"     * @return ArrayList User\u0027s task","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"randallnhr"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"randallnhr"},"content":"        return this.tasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":109,"author":{"gitId":"randallnhr"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-02-14"},{"lineNumber":110,"author":{"gitId":"randallnhr"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2023-02-14"},{"lineNumber":111,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":112,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"randallnhr":112}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"public class Ui {","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"    private BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"     * Prints a greeting message when the program starts.","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"    public void start() {","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        System.out.println(\"Hello! I\u0027m Duke!\\n\" +","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"                \"What can I do for you?\");","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"        displayLine();    ","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"     * Reads the input from the command line and returns an array of String with index 0 as the first word.","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"     * @return array of String with index 0 as the first word","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"     * @throws IOException On input error","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    public String[] readLine() throws IOException {","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"        System.out.print(\"Type your command: \");","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"        return br.readLine().strip().split(\" \",2);","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"     * Returns a line to separate user commands and output.","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"     * @return String Line","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"    public String displayLine() {","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"        return \"_________________________________________\\n\";","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"     * Prints a goodbye message when a bye command is entered.","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"    public void goodbye() {","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"        displayLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"        System.out.println(\"Goodbye!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"randallnhr":44}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"    public Deadline(String name, String start) {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"        super(name);","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"        this.deadline \u003d LocalDate.parse(start);","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"    public String changeDate(LocalDate date) {","lastModifiedDate":"2023-02-14"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"        this.deadline \u003d date;","lastModifiedDate":"2023-02-14"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        return \"I have changed the date:\\n\" +","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"                this.toString();","lastModifiedDate":"2023-02-14"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    public String getFileDesc() {","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"        return \"D|\" + super.getFileDesc() + \"|\" + convertFileDate(this.deadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getDate(this.deadline) + \")\";","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"randallnhr":27}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"    private LocalDate from;","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"    private LocalDate to;","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    public Event(String name, String start, String end) throws DukeException {","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"        super(name);","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"        this.from \u003d LocalDate.parse(start);","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"        this.to \u003d LocalDate.parse(end);","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        if (this.from.isAfter(this.to)) {","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"            throw new DukeException(\"/to date is before /from date\");","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    public String changeFrom(LocalDate date) {","lastModifiedDate":"2023-02-14"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"        this.from \u003d date;","lastModifiedDate":"2023-02-14"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"        return \"I have changed the /from date:\\n\" +","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"                this.toString();","lastModifiedDate":"2023-02-14"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    public String changeTo(LocalDate date) {","lastModifiedDate":"2023-02-14"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"        this.to \u003d date;","lastModifiedDate":"2023-02-14"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"        return \"I have changed the /to date\\n\" +","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"                this.toString();","lastModifiedDate":"2023-02-14"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"    public String getFileDesc() {","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"        return \"E|\" + super.getFileDesc() + \"|\" + convertFileDate(this.from) + \"|\" + convertFileDate(this.to);","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + getDate(this.from) + \" to: \" + getDate(this.to) + \")\";","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"randallnhr":40}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"public class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"    protected String name;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    public Task(String name) {","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"    public String getDate(LocalDate date) {","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM dd yyy\");","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"        return date.format(format);","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"    public String getName() {","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"        return this.name;","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    public String convertFileDate(LocalDate date) {","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"        return date.format(format);","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"randallnhr"},"content":"    public void mark() {","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"randallnhr"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"randallnhr"},"content":"    ","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"randallnhr"},"content":"    public void unmark() {","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"randallnhr"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"randallnhr"},"content":"    public String getFileDesc() {","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"randallnhr"},"content":"        return this.isDone ","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"randallnhr"},"content":"        ? \"1|\" + this.name ","lastModifiedDate":"2023-02-04"},{"lineNumber":41,"author":{"gitId":"randallnhr"},"content":"        : \"0|\" + this.name;","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"randallnhr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"randallnhr"},"content":"        return this.isDone","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"randallnhr"},"content":"                ? \"[X] \" + this.name","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"randallnhr"},"content":"                : \"[ ] \" + this.name;","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"randallnhr":50}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"        super(name);","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"    public String getFileDesc() {","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"        return \"T|\" + super.getFileDesc();","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"randallnhr":17}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: transparent;\" stylesheets\u003d\"@Duke.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        \u003cHBox fx:id\u003d\"pictureBorder\" maxHeight\u003d\"50.0\" maxWidth\u003d\"50.0\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"randallnhr":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"        stylesheets\u003d\"@Duke.css\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"76.0\" AnchorPane.leftAnchor\u003d\"0.0\" promptText\u003d\"Enter command here\"/\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"                AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"1.0\" style\u003d\"-fx-font-size: 15;\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" fitToWidth\u003d\"true\" fitToHeight\u003d\"true\"","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"                   AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"                    style\u003d\"-fx-background-color: #778899;\" vvalue\u003d\"1.0\" \u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"559.0\" prefWidth\u003d\"388.0\"","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"                      AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\"","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"                      style\u003d\"-fx-background-color: #d3d3d3;\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"randallnhr"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"randallnhr":26}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"class DeadlineTest {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"    @Test","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    void getFileDesc() {","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"        Deadline test \u003d new Deadline(\"Test\", \"2023-05-05\");","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"D|0|Test|2023-05-05\", test.getFileDesc());","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"        test.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"D|1|Test|2023-05-05\", test.getFileDesc());","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"    @Test","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    void testToString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"        Deadline test \u003d new Deadline(\"Test\", \"2023-05-05\");","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"[D][ ] Test (by: May 05 2023)\", test.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"        test.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"[D][X] Test (by: May 05 2023)\", test.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"randallnhr":24}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"package duke.task;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"class TodoTest {","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"    @Test","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"randallnhr"},"content":"    void getFileDesc() {","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"randallnhr"},"content":"        Todo test \u003d new Todo(\"Test\");","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"T|0|Test\", test.getFileDesc());","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"randallnhr"},"content":"        test.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"T|1|Test\", test.getFileDesc());","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"randallnhr"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"randallnhr"},"content":"    @Test","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"randallnhr"},"content":"    void testToString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"randallnhr"},"content":"        Todo test \u003d new Todo(\"Test\");","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"[T][ ] Test\", test.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"randallnhr"},"content":"        test.mark();","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"randallnhr"},"content":"        assertEquals(\"[T][X] Test\", test.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"randallnhr"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"randallnhr"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"randallnhr":25}},{"path":"taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"D|0|buy gameboy cartridge|2023-04-04","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"E|0|sleepover @Bob\u0027s place|2023-05-05|2023-05-06","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"randallnhr":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"randallnhr"},"content":"todo task 1","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"randallnhr"},"content":"deadline task 2 /by 2023-05-05","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"randallnhr"},"content":"event task 3 /from 2023-05-05 /to 2023-05-06","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"randallnhr"},"content":"mark 1","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"randallnhr"},"content":"list","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"randallnhr"},"content":"unmark 1","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"randallnhr"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"randallnhr"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"randallnhr":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"randallnhr"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"randallnhr":1,"-":20}}]
