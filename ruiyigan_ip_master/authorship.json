[{"path":"data/file.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"E | X | meeting | 2021-01-01 - 2021-02-01","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"D | X | return book | 2020-10-21","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ruiyigan":2}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"    public Deadline(String description, LocalDate date) {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"        super(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    public String getStorageDetails() {","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"        return this.description + \" | \" + this.date.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    public String eventType() {","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        return \"D\";","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(formatter) + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ruiyigan":28}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"        // store: storing text entered by user","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"        TaskList store;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"        Storage hardDrive \u003d new Storage(\"data/file.txt\");","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"        // create store and load initial data","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"            store \u003d new TaskList(hardDrive.loadData());","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"            store \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"        // greetings","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Hello I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        // obtaining first input by user","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        Scanner myObj \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"        String userInput \u003d myObj.nextLine();","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        // exit loop when user input is bye","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"        while (!userInput.equals(\"bye\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"            if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"                for (int i \u003d 0; i \u003c store.getSize(); i ++) {","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"                    System.out.print(i + 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"                    System.out.println(\". \" + store.getTask(i).toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"                }","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"            else if (userInput.split(\" \", 2)[0].equals(\"todo\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"                try {","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"                    store.addTask(new ToDo(userInput.split(\" \", 2)[1]));","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"                } catch(Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"                    throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            else if (userInput.split(\" \", 2)[0].equals(\"deadline\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"                try {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"                    String[] input \u003d userInput.split(\" \", 2)[1].split(\" /by \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"                    // parser technically here, do a try catch and if error returns formatting issue","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"                    // default format of yyyy-mm-dd","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"                    // If you want to change how it takes input, add a formatter to the parse function","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"                    LocalDate deadline \u003d LocalDate.parse(input[1]);","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"                    store.addTask(new Deadline(input[0], deadline));","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"                } catch(Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"                    throw new DukeException(\"The description and date of a deadline cannot be empty. \" +","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"                            \"Make sure dates are in this format yyyy-mm-dd.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"            else if (userInput.split(\" \", 2)[0].equals(\"event\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"                try {","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"                    String[] input \u003d userInput.split(\" \", 2)[1].split(\" /\", 3);","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"                    LocalDate startDate \u003d LocalDate.parse(input[1].split(\"from \", 2)[1]);","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"                    LocalDate endDate \u003d LocalDate.parse(input[2].split(\"to \", 2)[1]);","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"                    store.addTask(new Event(input[0], startDate, endDate));","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"                    throw new DukeException(\"The description, start time, and end time of a event cannot be empty. \" +","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"                            \"Make sure dates are in this format yyyy-mm-dd.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"            } else if (userInput.split(\" \", 2)[0].equals(\"mark\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"                store.markTask(Integer.parseInt(userInput.split(\" \", 2)[1]) - 1);","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"            } else if (userInput.split(\" \", 2)[0].equals(\"unmark\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"                store.unmarkTask(Integer.parseInt(userInput.split(\" \", 2)[1]) - 1);","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"            } else if (userInput.split(\" \", 2)[0].equals(\"delete\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"                int index \u003d Integer.parseInt(userInput.split(\" \", 2)[1]) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"                store.removeTask(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"            else {","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-18"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"            myObj \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"            userInput \u003d myObj.nextLine();","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"        // prints exit statement","lastModifiedDate":"2023-01-18"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"        // saves task list data","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"        hardDrive.saveData(store);","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ruiyigan":78,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"        super(\"☹ OOPS!!! \" + errorMessage);","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ruiyigan":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"    public Event(String description, LocalDate startDate, LocalDate endDate) {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"        super(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    public String getStorageDetails() {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"        return this.description + \" | \" + this.startDate.toString() + \" - \" + this.endDate.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    public String eventType() {","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"        return \"E\";","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.startDate.format(formatter) + \" to: \" + this.endDate.format(formatter) + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ruiyigan":30}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"import java.io.File;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"/**","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":" *  Storage to handle loading and saving of TaskList","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":" *  (before interacting with user and after interacting with user)","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":" */","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"public class Storage {","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    private final String filePath;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"     *  Constructor to create data storage object","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"     * Saves data from TaskList and store into file specified by this.filePath","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"     * @params list to be saved","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public void saveData(TaskList taskList) throws DukeException{","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i ++) {","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"                Task task \u003d taskList.getTask(i);","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"                StringBuilder taskString \u003d new StringBuilder();","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"                taskString.append(task.eventType());","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"                taskString.append(\" | \" + task.getStatusIcon() + \" | \");","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"                taskString.append(task.getStorageDetails() + \"\\n\");","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"                fileWriter.write(taskString.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"            fileWriter.close();","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"     *  Load data from file path and stores it in an ArrayList for Duke","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"     * @return ArrayList containing tasks from file based on file path","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"    public ArrayList\u003cTask\u003e loadData() throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"            // create file if file is empty","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"                file.getParentFile().mkdir();","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"                file.createNewFile();","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"            Scanner fileReader \u003d new Scanner(file);","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"            Task task;","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"            while (fileReader.hasNextLine()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"                String data \u003d fileReader.nextLine();","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"                String[] dataArray \u003d data.split(\"\\\\| \");","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"                String eventType \u003d dataArray[0].trim();","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"                String isDone \u003d dataArray[1].trim();","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"                if (eventType.equals(\"T\")) {","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"ruiyigan"},"content":"                    task \u003d new ToDo(dataArray[2].trim());","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"ruiyigan"},"content":"                } else if (eventType.equals(\"D\")) {","lastModifiedDate":"2023-01-23"},{"lineNumber":69,"author":{"gitId":"ruiyigan"},"content":"                    LocalDate deadline \u003d LocalDate.parse(dataArray[3].trim());","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"ruiyigan"},"content":"                    task \u003d new Deadline(dataArray[2].trim(), deadline);","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"ruiyigan"},"content":"                } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"ruiyigan"},"content":"                    String[] eventDetails \u003d dataArray[3].split(\"- \");","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"ruiyigan"},"content":"                    LocalDate startDate \u003d LocalDate.parse(eventDetails[0].trim());","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"ruiyigan"},"content":"                    LocalDate endDate \u003d LocalDate.parse(eventDetails[1].trim());","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"ruiyigan"},"content":"                    task \u003d new Event(dataArray[2].trim(), startDate, endDate);","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"ruiyigan"},"content":"                }","lastModifiedDate":"2023-01-23"},{"lineNumber":77,"author":{"gitId":"ruiyigan"},"content":"                if (isDone.equals(\"X\")) {","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"ruiyigan"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"ruiyigan"},"content":"                }","lastModifiedDate":"2023-01-23"},{"lineNumber":80,"author":{"gitId":"ruiyigan"},"content":"                taskList.add(task);","lastModifiedDate":"2023-01-23"},{"lineNumber":81,"author":{"gitId":"ruiyigan"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"ruiyigan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"ruiyigan"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":85,"author":{"gitId":"ruiyigan"},"content":"        return taskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ruiyigan":87}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"    protected String description;","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"     * @return type of event \"E\", \"T\" or \"D\"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    public abstract String eventType();","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"    public abstract String getStorageDetails();","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ruiyigan":34}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"public class TaskList {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"    protected ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"    public Task getTask(int index) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"        // handle errors out of range","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"        if (index \u003c 0 || index \u003e\u003d this.getSize()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"            int display \u003d index + 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"            throw new DukeException(\"Task \" + display + \" does not exist.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"        return taskList.get(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"ruiyigan"},"content":"    // mark tasks","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ruiyigan"},"content":"    public void markTask(int index) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ruiyigan"},"content":"        // handle errors out of range","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"ruiyigan"},"content":"        if (index \u003c 0 || index \u003e\u003d this.getSize()) {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"ruiyigan"},"content":"            int display \u003d index + 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ruiyigan"},"content":"            throw new DukeException(\"Task \" + display + \" does not exist.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"ruiyigan"},"content":"        this.getTask(index).markAsDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(this.getTask(index));","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"ruiyigan"},"content":"    // unmark tasks","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ruiyigan"},"content":"    public void unmarkTask(int index) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"ruiyigan"},"content":"        // handle errors out of range","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"ruiyigan"},"content":"        if (index \u003c 0 || index \u003e\u003d this.getSize()) {","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"ruiyigan"},"content":"            int display \u003d index + 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"ruiyigan"},"content":"            throw new DukeException(\"Task \" + display + \" does not exist.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"ruiyigan"},"content":"        this.getTask(index).markAsUndone();","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(this.getTask(index));","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"ruiyigan"},"content":"    // Add tasks","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"ruiyigan"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"ruiyigan"},"content":"        taskList.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Now you have \" + this.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"ruiyigan"},"content":"    public void removeTask(int index) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"ruiyigan"},"content":"        // handle errors out of range","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"ruiyigan"},"content":"        if (index \u003c 0 || index \u003e\u003d this.getSize()) {","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"ruiyigan"},"content":"            int display \u003d index + 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ruiyigan"},"content":"            throw new DukeException(\"Task \" + display + \" does not exist.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"ruiyigan"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(this.getTask(index));","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"ruiyigan"},"content":"        taskList.remove(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"ruiyigan"},"content":"        System.out.println(\"Now you have \" + this.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ruiyigan":66}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"ruiyigan"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"ruiyigan"},"content":"        super(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ruiyigan"},"content":"    public String eventType() {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ruiyigan"},"content":"        return \"T\";","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ruiyigan"},"content":"    public String getStorageDetails() {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ruiyigan"},"content":"        return this.description;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ruiyigan"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ruiyigan"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"ruiyigan"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"ruiyigan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"ruiyigan"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"ruiyigan"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ruiyigan":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruiyigan"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ruiyigan":1}}]
