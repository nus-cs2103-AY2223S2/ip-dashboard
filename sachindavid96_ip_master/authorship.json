[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"# duke.Duke project template","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sachindavid96":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-02-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sachindavid96":15,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"Welcome to Duke! This is a chat bot that helps you ","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"remember your tasks and keep track of which of them","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"you have completed and are yet to complete!","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"## Commands","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"**list** - view all your tasks and their completion status \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"**todo** - add a task with only a description \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"**deadline** - add a task with a description and a deadline date \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"**event** - add a task with a start/end date and time \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"**mark** - mark any type of task as done \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"**unmark** - mark any type of task as not done yet \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"**list** - list all the tasks you are tracking \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"**delete** - delete a task \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"**bye** - exit the app","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"### View all your tasks and their completion status","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"Use the command `list` without any arguments to view","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"a list of all your tasks, their index numbers, and their","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"completion status.","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"### Add a task with only a description","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"Use the command `todo`, followed by a space and a description","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"of the task. Note that the description cannot be empty.","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"Syntax: `todo {insert description of task}` \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"Example: `todo science homework`","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"### Add a task with a deadline ","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"Use the command `deadline`, followed by a space, then the ","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"description, followed by a forward slash, then the deadline date.","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":" Note that the format of the","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"**date** must be in this format: **dd-Mmm-yyyy**, where","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"Mmm refers to the first three letters of the month, the **first letter","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"being capitalised** If the date is a single digit, please prefix it with a 0.","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"Syntax: `deadline {insert description} / {insert deadline}` \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"Example: `deadline programming assignment / 12-Feb-2024`","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"### Add an event with a start/end date and time","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"Use the command `event`, followed by a space, then the ","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"description, followed by a forward slash, followed by","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"the starting date and time, followed by another forward slash, ","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"and finally the ending date and time. The **time** needs to be in this format:","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"**HHMM**, where HHMM refers to the time in 24-hour format.","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"Note that the format of the **date** must be in this format: **dd-Mmm-yyyy**, where","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"Mmm refers to the first three letters of the month, the **first letter","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"being capitalised**. If a date is a single digit, please","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"prefix it with a 0.","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"Syntax: `event {insert description} / {insert start date ","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"and time} / {insert end date and time}` \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"Example: `event music performance / 12-Feb-2023 1200 / ","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"12-Feb-2023 1300`","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"### Mark a task as completed","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"Use the comand `mark`, followed by a space and a task number based","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"on your list (use the command `list` to refer to your list).","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"A task that is marked as done appears in this format:","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"[T][X], where the \u0027X\u0027 indicates that it has been completed","lastModifiedDate":"2023-03-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"Syntax: `mark {insert task number}` \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"Example: `mark 1`","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"### Mark a task as not completed","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"Use the command `unmark`, followed by a space and a task number","lastModifiedDate":"2023-03-02"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"based on your list (use the command `list` to refer to your list).","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"A task that is marked as yet to be done appears in this format:","lastModifiedDate":"2023-03-02"},{"lineNumber":72,"author":{"gitId":"sachindavid96"},"content":"[T][ ], where the empty [ ] indicates that it has not been completed","lastModifiedDate":"2023-03-02"},{"lineNumber":73,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":74,"author":{"gitId":"sachindavid96"},"content":"Syntax: `unmark {insert task number}` \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"Example: `unmark 1`","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"### Delete a task","lastModifiedDate":"2023-03-02"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"Use the command `delete`, followed by a space and the ","lastModifiedDate":"2023-03-02"},{"lineNumber":80,"author":{"gitId":"sachindavid96"},"content":"task number to be deleted, based on your list (use the command `list` ","lastModifiedDate":"2023-03-02"},{"lineNumber":81,"author":{"gitId":"sachindavid96"},"content":"to refer to your list)","lastModifiedDate":"2023-03-02"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":83,"author":{"gitId":"sachindavid96"},"content":"Syntax: `delete {insert task number}` \u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":84,"author":{"gitId":"sachindavid96"},"content":"Example: `delete 3`","lastModifiedDate":"2023-03-02"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":86,"author":{"gitId":"sachindavid96"},"content":"### Find a task with a keyword","lastModifiedDate":"2023-03-02"},{"lineNumber":87,"author":{"gitId":"sachindavid96"},"content":"Use the command `find`, followed by a space, and a","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"sachindavid96"},"content":"keyword, to search your list for a task that matches","lastModifiedDate":"2023-03-02"},{"lineNumber":89,"author":{"gitId":"sachindavid96"},"content":"the keyword.","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"sachindavid96"},"content":"Syntax: `find {insert keyword here}`","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"sachindavid96"},"content":"Example: `find homework`","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"sachindavid96"},"content":"### View the list of available commands in the app","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"sachindavid96"},"content":"Use the command `help`","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"sachindavid96"},"content":"### Exit the app","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"sachindavid96"},"content":"Use the command `bye` to exit the app","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"sachindavid96":86,"-":14}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":" * A Deadline represents a type of Task that can be added by the user. It has a date that represents a deadline.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    private String deadlineString;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    private DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"dd/MMM/yyyy\");","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for a Deadline","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"     * @param description Brief description of the deadline","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"     * @param deadlineDate The date that the deadline falls on","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"     * @throws InvalidDateFormatException If the date entered by the user is not in dd-Mmm-yyyy format","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    public Deadline(String description, String deadlineDate) throws InvalidDateFormatException {","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"        super(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"        this.deadlineString \u003d deadlineDate.strip();","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"            this.deadline \u003d LocalDate.parse(this.deadlineString, formatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"           throw new InvalidDateFormatException();","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"        String formattedDate \u003d deadline.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        return (isDone? \"[D][X] \" : \"[D][ ] \") + description + (\". Deadline: \"  + formattedDate);","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"sachindavid96":42}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Dialog;","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"    private void flip() {","lastModifiedDate":"2023-02-23"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"     * Method to create a DialogBox where the user\u0027s requests are displayed back to the user","lastModifiedDate":"2023-02-27"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"     * @param text The text entered by the user","lastModifiedDate":"2023-02-27"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"     * @param img The image that represents the user","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"     * @return The DialogBox where the user\u0027s requests are displayed back to the user","lastModifiedDate":"2023-02-27"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"        DialogBox box \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"        box.setBackground(new Background(new BackgroundFill(Color.AQUAMARINE,","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"                CornerRadii.EMPTY,","lastModifiedDate":"2023-02-27"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"                Insets.EMPTY)));","lastModifiedDate":"2023-02-27"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"        return box;","lastModifiedDate":"2023-02-27"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":73,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":74,"author":{"gitId":"sachindavid96"},"content":"     * Method to create a DialogBox where the responses of the application are displayed back to the user","lastModifiedDate":"2023-02-27"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"     * @param text The text that is the output from the application","lastModifiedDate":"2023-02-27"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"     * @param img The image that represents the application (Duke)","lastModifiedDate":"2023-02-27"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"     * @return The DialogBox where the responses of the application are displayed to the user","lastModifiedDate":"2023-02-27"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"sachindavid96"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"sachindavid96"},"content":"        db.setBackground(new Background(new BackgroundFill(Color.BISQUE,","lastModifiedDate":"2023-02-27"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"                CornerRadii.EMPTY,","lastModifiedDate":"2023-02-27"},{"lineNumber":83,"author":{"gitId":"sachindavid96"},"content":"                Insets.EMPTY)));","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"sachindavid96"},"content":"        db.flip();","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"        return db;","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"sachindavid96":87}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":" * This is the main class that serves as the entry point into the application","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"public class Duke  {","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"    private Parser parser;","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"    private UI ui;","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"    private TaskList list;","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for a Duke object","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"    public Duke () {","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"        ui \u003d new UI();","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"        list \u003d new TaskList();","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"        storage \u003d new Storage(list);","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"        parser \u003d new Parser(storage);","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"     * Method to obtain the String that is output when the different requests are entered by the user","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"     * @param input The request entered in by the user to the application","lastModifiedDate":"2023-02-27"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"     * @return A String representing the response of the application to the request of the user","lastModifiedDate":"2023-02-27"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"        String furtherCommandPrompt \u003d \"\\n\\nAnything else I can do for you? Enter \u0027help\u0027 for a list of commands!\";","lastModifiedDate":"2023-03-02"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"            try {","lastModifiedDate":"2023-02-23"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"                String output \u003d parser.parseAndExecute(input, list);","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"                if (output.equals(\"Thank You and have a great day ahead!\")) {","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"                    Main.close();","lastModifiedDate":"2023-03-02"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-03-02"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"                return output + furtherCommandPrompt;","lastModifiedDate":"2023-03-02"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"                String output \u003d ui.printInvalidDateFormatMessage();","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"                return output + furtherCommandPrompt;","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"sachindavid96":79}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"    public DukeException (String message) {","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"        super(message);","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"sachindavid96":8}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":" * An Event represents a type of task that can be added by the user. It has both a start and end date/time","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    private String startDayTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    private String endDayTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    private String deadlineString;","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    private LocalDate startDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    private LocalTime startTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    private LocalTime endTime;","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"    private DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"dd/MMM/yyyy\");","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"    DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for an event, which has both a start date/time and an end date/time","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"     * @param startTime A String containing both the starting date and time of the event","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"     * @param endTime A String containing both the ending date and time of the event","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"     * @param description A brief description of the event","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"    public Event(String startTime, String endTime, String description) throws DateTimeParseException {","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"        super(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"        String[] startComponents \u003d startTime.strip().split(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"        String[] endComponents \u003d endTime.strip().split(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"        this.startDayTime \u003d startTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        this.endDayTime \u003d endTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"            assert startComponents.length \u003d\u003d 2;","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"            assert endComponents.length \u003d\u003d 2;","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"            this.startDate \u003d LocalDate.parse(startComponents[0].strip(), formatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"            this.startTime \u003d LocalTime.parse(startComponents[1].strip(), timeFormatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"            this.endDate \u003d LocalDate.parse(endComponents[0].strip(), formatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"            this.endTime \u003d LocalTime.parse(endComponents[1].strip(), timeFormatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"                this.startDate \u003d LocalDate.parse(startComponents[0].strip(), formatter2);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"                this.startTime \u003d LocalTime.parse(startComponents[1].strip(), timeFormatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"                this.endDate \u003d LocalDate.parse(endComponents[0].strip(), formatter2);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"                this.endTime \u003d LocalTime.parse(endComponents[1].strip(), timeFormatter);","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"        String formattedStartDate \u003d startDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"        String formattedEndDate \u003d endDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"        return (isDone? \"[E][X] \" : \"[E][ ] \") + description + \". From: \" + formattedStartDate + \" @ \" +","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"                this.startTime.toString() + \" hrs\" +","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"                \". To: \" + formattedEndDate + \" @ \" + this.endTime.toString() + \" hrs\";","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"sachindavid96":65}},{"path":"src/main/java/duke/InvalidDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"public class InvalidDateFormatException extends DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"    public InvalidDateFormatException () {","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"        super(\"Please re-enter your request with the date in this format: dd-Mmm-yyyy\");","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"sachindavid96":9}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"public class Launcher {","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"sachindavid96":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"     * Method that invokes the stage on which the Graphical User Interface is displayed","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"     * @param stage the primary stage for this application, onto which","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"     * the application scene can be set.","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"     * Applications may create other stages, if needed, but they will not be","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"     * primary stages.","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"            stage.show();","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"    public static void close() {","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"        Platform.exit();","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"sachindavid96":44}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":" * Class that handles the Graphical User Interface","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"public class MainWindow extends AnchorPane{","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-27"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"     * Sets the Duke instance to be used with this Graphical User Interface","lastModifiedDate":"2023-02-27"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"     * @param d The Duke instance","lastModifiedDate":"2023-02-27"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-27"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"    @FXML","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"        );","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"sachindavid96":56}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":" * A Parser has the methods that decode the requests entered by the user and executes the relevant methods that","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":" * facilitate the requests of the user","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"public class Parser {","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for the Parser, which takes in a Storage object to facilitate the updating of the storage","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"     * file each time there is a task executed","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"     * @param storage The storage object the handles storing of the tasks to a file so that it could be retrieved","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"     *                for subsequent uses of the bot","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    public Parser(Storage storage) {","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"     * This method interprets the user input and calls the relevant methods to facilitate the request of the user","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"     *","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"     * @param userInput the String entered by the user specifying their request","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"     * @param list      the TaskList object that stores all the user\u0027s tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"     * @return A String that is to be displayed to the user upon completion of their request","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"    public String parseAndExecute(String userInput, TaskList list) throws IOException {","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"        String[] userInputComponents \u003d userInput.split(\" \");","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"        if (userInputComponents.length \u003d\u003d 0) {","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"            return \"Your request cannot be empty! Please re-enter your request\";","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        String requestType \u003d userInputComponents[0];","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"            Request request \u003d Request.getRequest(requestType);","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"            switch (request) {","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"            case LIST: {","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"                String firstOutput \u003d list.printItems();","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"                String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"                updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"                return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-27"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"            case MARK: {","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"                if (userInputComponents.length !\u003d 2) {","lastModifiedDate":"2023-02-19"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"                    return \"This request requires exactly one task number as the second argument!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"                } try {","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"                    int taskNumber \u003d Integer.parseInt(userInputComponents[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"                    assert taskNumber \u003c list.getNumberOfTasks();","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"                    String firstOutput \u003d list.markDone(taskNumber);","lastModifiedDate":"2023-02-23"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"                    String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"                    updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"                    return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to specify a number representing the task number!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"            case UNMARK: {","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"                if (userInputComponents.length !\u003d 2) {","lastModifiedDate":"2023-02-19"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"                    return \"This request requires exactly one task number as the second argument!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-19"},{"lineNumber":72,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"sachindavid96"},"content":"                try {","lastModifiedDate":"2023-02-23"},{"lineNumber":74,"author":{"gitId":"sachindavid96"},"content":"                    int taskNumber \u003d Integer.parseInt(userInputComponents[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"                    assert taskNumber \u003c list.getNumberOfTasks();","lastModifiedDate":"2023-03-02"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"                    String firstOutput \u003d list.markUndone(taskNumber);","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"                    String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"                    updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"                    return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-27"},{"lineNumber":80,"author":{"gitId":"sachindavid96"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to specify a number representing the task number!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"            case TODO: {","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"sachindavid96"},"content":"                try {","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"sachindavid96"},"content":"                    assert userInput.length() \u003e 5;","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"sachindavid96"},"content":"                    String firstOutput \u003d list.addTask(new ToDo(userInput.substring(5).strip()));","lastModifiedDate":"2023-02-23"},{"lineNumber":89,"author":{"gitId":"sachindavid96"},"content":"                    String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"sachindavid96"},"content":"                    updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"sachindavid96"},"content":"                    return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"sachindavid96"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"sachindavid96"},"content":"                    return \"The description of todo cannot be empty!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"sachindavid96"},"content":"            case DEADLINE: {","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"sachindavid96"},"content":"                String[] splitDeadline \u003d userInput.split(\"/\");","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"sachindavid96"},"content":"                if (splitDeadline.length !\u003d 2) {","lastModifiedDate":"2023-02-23"},{"lineNumber":100,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to enter a deadline!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":102,"author":{"gitId":"sachindavid96"},"content":"                try {","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"sachindavid96"},"content":"                    String description \u003d splitDeadline[0].substring(9).strip();","lastModifiedDate":"2023-02-19"},{"lineNumber":104,"author":{"gitId":"sachindavid96"},"content":"                    String deadline \u003d splitDeadline[1];","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"sachindavid96"},"content":"                    String firstOutput \u003d list.addTask(new Deadline(description, deadline));","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"sachindavid96"},"content":"                    String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"sachindavid96"},"content":"                    updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"sachindavid96"},"content":"                    return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-23"},{"lineNumber":109,"author":{"gitId":"sachindavid96"},"content":"                } catch (InvalidDateFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to enter the deadline date in this format: dd-Mmm-yyyy\";","lastModifiedDate":"2023-02-23"},{"lineNumber":111,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":112,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"sachindavid96"},"content":"            case EVENT: {","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"sachindavid96"},"content":"                String[] splitTimes \u003d userInput.split(\"/\");","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"sachindavid96"},"content":"                if (splitTimes.length !\u003d 3) {","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to enter a start and a finish date and time!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":117,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":118,"author":{"gitId":"sachindavid96"},"content":"                String description \u003d splitTimes[0].substring(6);","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"sachindavid96"},"content":"                String startDayTime \u003d splitTimes[1];","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"sachindavid96"},"content":"                String endDayTime \u003d splitTimes[2];","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"sachindavid96"},"content":"                try {","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"sachindavid96"},"content":"                    String firstOutput \u003d list.addTask(new Event(startDayTime, endDayTime, description));","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"sachindavid96"},"content":"                    String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-23"},{"lineNumber":124,"author":{"gitId":"sachindavid96"},"content":"                    updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":125,"author":{"gitId":"sachindavid96"},"content":"                    return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-23"},{"lineNumber":126,"author":{"gitId":"sachindavid96"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":127,"author":{"gitId":"sachindavid96"},"content":"                    return \"The date needs to be in this format: dd-Mmm-yyyy\" +","lastModifiedDate":"2023-02-23"},{"lineNumber":128,"author":{"gitId":"sachindavid96"},"content":"                            \" and the time needs to be in this format: HHmm\";","lastModifiedDate":"2023-02-23"},{"lineNumber":129,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":131,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"sachindavid96"},"content":"            case DELETE: {","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"sachindavid96"},"content":"                if (userInputComponents.length !\u003d 2) {","lastModifiedDate":"2023-02-19"},{"lineNumber":135,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to specify a task number to be deleted!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":136,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":137,"author":{"gitId":"sachindavid96"},"content":"                try {","lastModifiedDate":"2023-02-23"},{"lineNumber":138,"author":{"gitId":"sachindavid96"},"content":"                    String firstOutput \u003d list.deleteTask(Integer.parseInt(userInputComponents[1]));","lastModifiedDate":"2023-02-23"},{"lineNumber":139,"author":{"gitId":"sachindavid96"},"content":"                    String secondOutput \u003d list.getTaskDetails();","lastModifiedDate":"2023-02-27"},{"lineNumber":140,"author":{"gitId":"sachindavid96"},"content":"                    updateStorage(list);","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"sachindavid96"},"content":"                    return firstOutput + \"\\n\" + secondOutput;","lastModifiedDate":"2023-02-27"},{"lineNumber":142,"author":{"gitId":"sachindavid96"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":143,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to specify a number representing the task number!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":144,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-19"},{"lineNumber":145,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":146,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":147,"author":{"gitId":"sachindavid96"},"content":"            case FIND: {","lastModifiedDate":"2023-02-20"},{"lineNumber":148,"author":{"gitId":"sachindavid96"},"content":"                if (userInputComponents.length !\u003d 2) {","lastModifiedDate":"2023-02-20"},{"lineNumber":149,"author":{"gitId":"sachindavid96"},"content":"                    return \"You have to enter exactly one keyword to find a task with a match!\";","lastModifiedDate":"2023-03-02"},{"lineNumber":150,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-20"},{"lineNumber":151,"author":{"gitId":"sachindavid96"},"content":"                String keyword \u003d userInputComponents[1].strip();","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"sachindavid96"},"content":"                String firstOutput \u003d list.findTask(keyword);","lastModifiedDate":"2023-02-23"},{"lineNumber":153,"author":{"gitId":"sachindavid96"},"content":"                return firstOutput;","lastModifiedDate":"2023-02-23"},{"lineNumber":154,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":155,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":156,"author":{"gitId":"sachindavid96"},"content":"            case HELP: {","lastModifiedDate":"2023-03-02"},{"lineNumber":157,"author":{"gitId":"sachindavid96"},"content":"               return UI.printAvailableCommands();","lastModifiedDate":"2023-03-02"},{"lineNumber":158,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":159,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":160,"author":{"gitId":"sachindavid96"},"content":"            case BYE: {","lastModifiedDate":"2023-03-02"},{"lineNumber":161,"author":{"gitId":"sachindavid96"},"content":"                return \"Thank You and have a great day ahead!\";","lastModifiedDate":"2023-03-02"},{"lineNumber":162,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-03-02"},{"lineNumber":163,"author":{"gitId":"sachindavid96"},"content":"            default: {","lastModifiedDate":"2023-02-15"},{"lineNumber":164,"author":{"gitId":"sachindavid96"},"content":"                return \"You may have accidentally entered in an invalid command. Please re-enter!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":165,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":166,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":167,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":168,"author":{"gitId":"sachindavid96"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":169,"author":{"gitId":"sachindavid96"},"content":"            return \"Invalid Duke Request; please re-enter your request!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":170,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":171,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":172,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":173,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":174,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-23"},{"lineNumber":175,"author":{"gitId":"sachindavid96"},"content":"     * Updates the storage file each time the task list is altered","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"sachindavid96"},"content":"     * @param list The list that stores all the tasks of the user","lastModifiedDate":"2023-02-23"},{"lineNumber":177,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-23"},{"lineNumber":178,"author":{"gitId":"sachindavid96"},"content":"    private void updateStorage(TaskList list) {","lastModifiedDate":"2023-02-23"},{"lineNumber":179,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":180,"author":{"gitId":"sachindavid96"},"content":"            storage.updateTasksInFile(list);","lastModifiedDate":"2023-02-15"},{"lineNumber":181,"author":{"gitId":"sachindavid96"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":182,"author":{"gitId":"sachindavid96"},"content":"            System.out.println(\"Unable to open storage file\");","lastModifiedDate":"2023-02-15"},{"lineNumber":183,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":184,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":185,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":186,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-15"},{"lineNumber":187,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":188,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"sachindavid96":188}},{"path":"src/main/java/duke/Request.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"// obtained the idea to use enums this way from github user 4ndrelim","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":" * An enum class that stores the different types of requests as fixed constants","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"public enum Request {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    LIST(\"list\"),","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    FIND(\"find\"),","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    HELP(\"help\"),","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"    BYE(\"bye\");","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"    private String name;","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"     * The constructor for the Request enum","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"     * @param name The name of the constant","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    Request (String name) {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"     * Method to obtain the title of the request entered by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"     * @param name The request type entered in by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"     * @return The constant representing the request entered by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"    public static Request getRequest(String name) throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"        for (Request r : values()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"            if (name.equals(r.name)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"                return r;","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"        throw new DukeException(name);","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"sachindavid96":49}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import java.nio.file.FileAlreadyExistsException;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import java.io.File;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":" * Storage represents the methods that are used to store the user\u0027s tasks to a storage file so that they","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":" * can be saved and retrieved for later use.","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"public class Storage {","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for a Storage object, which will facilitate the storing of the user\u0027s requests for later retrieval","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"     * @param list The TaskList object that will store the tasks entered by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    public Storage(TaskList list) {","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"        File Task_Data \u003d createStorageFile(list);","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"            loadTaskData(Task_Data, list);","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"        } catch (StorageFileFormatException e) {","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"            System.out.println(\"There is an error in the format of at least one date in the duke.Storage Data File\");","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"     * Method to create a file that will store all the tasks created by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"     * @param list The TaskList Object that will store all the tasks created by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"     * @return The File object that was created for storage purposes","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    private File createStorageFile(TaskList list) {","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        File Task_Data \u003d new File(\"Task Data.txt\");","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"            Task_Data.createNewFile();","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"        } catch (FileAlreadyExistsException e){ // nothing should be done if the file already exists","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"            System.out.println(\"The file already exists\");","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"            System.out.println(\"File creation was unsuccessful\");","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"        return Task_Data;","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"     * Method to update the storage file with the latest task list","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"     * @param list The TaskList object that will store tasks entered by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"    public void updateTasksInFile (TaskList list) throws IOException {","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"        PrintWriter logger \u003d new PrintWriter(\"Task Data.txt\");","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"        for (int i \u003d 0; i \u003c list.getNumberOfTasks(); i++) {","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"            logger.write(list.getTaskAtIndex(i) + \"\\n\");","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"        logger.close();","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"     * Method that reads the storage file and adds the tasks to the TaskList object that stores all the user tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"     * @param taskDataFile The file from which the stored tasks will be read","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"     * @param list The TaskList Object that stores all the user\u0027s tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"     * @throws StorageFileFormatException","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"sachindavid96"},"content":"    private void loadTaskData (File taskDataFile, TaskList list) throws StorageFileFormatException {","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"            Scanner scanner \u003d new Scanner(taskDataFile);","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"sachindavid96"},"content":"                String task \u003d scanner.nextLine();","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"sachindavid96"},"content":"                String taskDescription \u003d task.substring(7);","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"                boolean isMarked \u003d (task.charAt(4) \u003d\u003d \u0027X\u0027);","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"sachindavid96"},"content":"                char taskIdentifier \u003d task.charAt(1);","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"sachindavid96"},"content":"                if (taskIdentifier \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"                    list.addTaskWhenLoading(new ToDo(taskDescription));","lastModifiedDate":"2023-02-17"},{"lineNumber":86,"author":{"gitId":"sachindavid96"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"sachindavid96"},"content":"                       list.markDone(list.getNumberOfTasks());","lastModifiedDate":"2023-02-18"},{"lineNumber":88,"author":{"gitId":"sachindavid96"},"content":"                    }","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"sachindavid96"},"content":"                } else if (taskIdentifier \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"sachindavid96"},"content":"                    String[] reformattedDateAndTimeComponents \u003d reformatEventDateAndTime(taskDescription);","lastModifiedDate":"2023-02-17"},{"lineNumber":92,"author":{"gitId":"sachindavid96"},"content":"                    String startDayTime \u003d reformattedDateAndTimeComponents[0];","lastModifiedDate":"2023-02-17"},{"lineNumber":93,"author":{"gitId":"sachindavid96"},"content":"                    String endDayTime \u003d reformattedDateAndTimeComponents[1];","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"sachindavid96"},"content":"                    String[] splitDescription \u003d taskDescription.split(\"\\\\.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":95,"author":{"gitId":"sachindavid96"},"content":"                    String description \u003d splitDescription[0].strip();","lastModifiedDate":"2023-02-17"},{"lineNumber":96,"author":{"gitId":"sachindavid96"},"content":"                    list.addTaskWhenLoading(new Event(startDayTime, endDayTime, description));","lastModifiedDate":"2023-02-17"},{"lineNumber":97,"author":{"gitId":"sachindavid96"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"sachindavid96"},"content":"                        list.markDone(list.getNumberOfTasks());","lastModifiedDate":"2023-02-18"},{"lineNumber":99,"author":{"gitId":"sachindavid96"},"content":"                    }","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"sachindavid96"},"content":"                } else if (taskIdentifier \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2023-02-17"},{"lineNumber":102,"author":{"gitId":"sachindavid96"},"content":"                    String[] splitDeadline \u003d taskDescription.split(\"\\\\.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"sachindavid96"},"content":"                    String description \u003d splitDeadline[0].strip();","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"sachindavid96"},"content":"                    String deadline \u003d splitDeadline[1].split(\":\")[1];","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"sachindavid96"},"content":"                    try {","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"sachindavid96"},"content":"                        String reformattedDate \u003d reformatDeadline(taskDescription);","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"sachindavid96"},"content":"                        list.addTaskWhenLoading(new Deadline(description, reformattedDate));","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"sachindavid96"},"content":"                    } catch (InvalidDateFormatException e) {","lastModifiedDate":"2023-02-17"},{"lineNumber":109,"author":{"gitId":"sachindavid96"},"content":"                        throw new StorageFileFormatException();","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"sachindavid96"},"content":"                    }","lastModifiedDate":"2023-02-17"},{"lineNumber":111,"author":{"gitId":"sachindavid96"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"sachindavid96"},"content":"                        list.markDone(list.getNumberOfTasks());","lastModifiedDate":"2023-02-18"},{"lineNumber":113,"author":{"gitId":"sachindavid96"},"content":"                    }","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"sachindavid96"},"content":"                } else {","lastModifiedDate":"2023-02-17"},{"lineNumber":115,"author":{"gitId":"sachindavid96"},"content":"                    System.out.println(\"There is an error in the format of the Storage File\");","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"sachindavid96"},"content":"                }","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"sachindavid96"},"content":"            scanner.close();","lastModifiedDate":"2023-02-17"},{"lineNumber":119,"author":{"gitId":"sachindavid96"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"sachindavid96"},"content":"            System.out.println(\"The file was not found\");","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":123,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":124,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":125,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"sachindavid96"},"content":"     * Method that reads the deadline in the format stored in the data file and returns a string that can be read","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"sachindavid96"},"content":"     * by the addTaskWhenLoading method","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"sachindavid96"},"content":"     * @param taskDetails This is a String that captures the format in which a deadline is stored in the data file","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"sachindavid96"},"content":"     * @return A String that is the deadline that is reformatted to fit the format required by the addTaskWhenLoading","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"sachindavid96"},"content":"     * method","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"sachindavid96"},"content":"    private String reformatDeadline(String taskDetails) {","lastModifiedDate":"2023-02-17"},{"lineNumber":133,"author":{"gitId":"sachindavid96"},"content":"        String[] splitDeadline \u003d taskDetails.split(\"\\\\.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"sachindavid96"},"content":"        String description \u003d splitDeadline[0].strip();","lastModifiedDate":"2023-02-17"},{"lineNumber":135,"author":{"gitId":"sachindavid96"},"content":"        String deadline \u003d splitDeadline[1].split(\":\")[1];","lastModifiedDate":"2023-02-17"},{"lineNumber":136,"author":{"gitId":"sachindavid96"},"content":"        String dateDetected \u003d deadline.split(\",\")[1].strip();","lastModifiedDate":"2023-02-17"},{"lineNumber":137,"author":{"gitId":"sachindavid96"},"content":"        String[] dateComponents \u003d dateDetected.split(\" \");","lastModifiedDate":"2023-02-17"},{"lineNumber":138,"author":{"gitId":"sachindavid96"},"content":"        String day \u003d dateComponents[0];","lastModifiedDate":"2023-02-17"},{"lineNumber":139,"author":{"gitId":"sachindavid96"},"content":"        String month \u003d dateComponents[1].substring(0, 3);","lastModifiedDate":"2023-02-17"},{"lineNumber":140,"author":{"gitId":"sachindavid96"},"content":"        String year \u003d dateComponents[2];","lastModifiedDate":"2023-02-17"},{"lineNumber":141,"author":{"gitId":"sachindavid96"},"content":"        String reformattedDate \u003d day + \"-\" + month + \"-\" + year;","lastModifiedDate":"2023-02-17"},{"lineNumber":142,"author":{"gitId":"sachindavid96"},"content":"        return reformattedDate;","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":144,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":145,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":146,"author":{"gitId":"sachindavid96"},"content":"     * Method that reads the start date/time and end date/time in the format stored in the data file and returns","lastModifiedDate":"2023-02-20"},{"lineNumber":147,"author":{"gitId":"sachindavid96"},"content":"     * a string that can be read by the addTaskWhenLoading method","lastModifiedDate":"2023-02-20"},{"lineNumber":148,"author":{"gitId":"sachindavid96"},"content":"     * @param taskDetails This is a String that captures the format in which a event date/time is stored in the data","lastModifiedDate":"2023-02-20"},{"lineNumber":149,"author":{"gitId":"sachindavid96"},"content":"     *                    file","lastModifiedDate":"2023-02-20"},{"lineNumber":150,"author":{"gitId":"sachindavid96"},"content":"     * @return A String that is the event start date/time and end date/time that is reformatted to fit the format","lastModifiedDate":"2023-02-20"},{"lineNumber":151,"author":{"gitId":"sachindavid96"},"content":"     * required by the addTaskWhenLoading method","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":153,"author":{"gitId":"sachindavid96"},"content":"    private String[] reformatEventDateAndTime(String taskDetails) {","lastModifiedDate":"2023-02-17"},{"lineNumber":154,"author":{"gitId":"sachindavid96"},"content":"        String[] splitDatesAndTimes \u003d taskDetails.split(\"\\\\.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":155,"author":{"gitId":"sachindavid96"},"content":"        String startDate \u003d splitDatesAndTimes[1].split(\",\")[1].split(\"@\")[0].strip();","lastModifiedDate":"2023-02-17"},{"lineNumber":156,"author":{"gitId":"sachindavid96"},"content":"        String startTime \u003d splitDatesAndTimes[1].split(\",\")[1].split(\"@\")[1].substring(1, 6);","lastModifiedDate":"2023-02-17"},{"lineNumber":157,"author":{"gitId":"sachindavid96"},"content":"        String endDate \u003d splitDatesAndTimes[2].split(\",\")[1].split(\"@\")[0].strip();","lastModifiedDate":"2023-02-17"},{"lineNumber":158,"author":{"gitId":"sachindavid96"},"content":"        String endTime \u003d splitDatesAndTimes[2].split(\",\")[1].split(\"@\")[1].substring(1, 6);","lastModifiedDate":"2023-02-17"},{"lineNumber":159,"author":{"gitId":"sachindavid96"},"content":"        String[] startDateComponents \u003d startDate.split(\" \");","lastModifiedDate":"2023-02-17"},{"lineNumber":160,"author":{"gitId":"sachindavid96"},"content":"        String startDay \u003d startDateComponents[0];","lastModifiedDate":"2023-02-17"},{"lineNumber":161,"author":{"gitId":"sachindavid96"},"content":"        String startMonth \u003d startDateComponents[1].substring(0, 3);","lastModifiedDate":"2023-02-17"},{"lineNumber":162,"author":{"gitId":"sachindavid96"},"content":"        String startYear \u003d startDateComponents[2];","lastModifiedDate":"2023-02-17"},{"lineNumber":163,"author":{"gitId":"sachindavid96"},"content":"        String startDetails \u003d startDay + \"-\" + startMonth + \"-\" + startYear + \" \" + startTime.replace(\":\", \"\");","lastModifiedDate":"2023-02-17"},{"lineNumber":164,"author":{"gitId":"sachindavid96"},"content":"        String[] endDateComponents \u003d endDate.split(\" \");","lastModifiedDate":"2023-02-17"},{"lineNumber":165,"author":{"gitId":"sachindavid96"},"content":"        String endDay \u003d startDateComponents[0];","lastModifiedDate":"2023-02-17"},{"lineNumber":166,"author":{"gitId":"sachindavid96"},"content":"        String endMonth \u003d startDateComponents[1].substring(0, 3);","lastModifiedDate":"2023-02-17"},{"lineNumber":167,"author":{"gitId":"sachindavid96"},"content":"        String endYear \u003d startDateComponents[2];","lastModifiedDate":"2023-02-17"},{"lineNumber":168,"author":{"gitId":"sachindavid96"},"content":"        String endDetails \u003d endDay + \"-\" + endMonth + \"-\" + endYear + \" \" + endTime.replace(\":\", \"\");;","lastModifiedDate":"2023-02-17"},{"lineNumber":169,"author":{"gitId":"sachindavid96"},"content":"        return new String[] {startDetails.strip(), endDetails.strip()};","lastModifiedDate":"2023-02-17"},{"lineNumber":170,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":171,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"sachindavid96":171}},{"path":"src/main/java/duke/StorageFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"public class StorageFileFormatException extends DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"    public StorageFileFormatException () {","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"        super(\"There is an error in the format of the data in the Data duke.Storage File\");","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"sachindavid96":9}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":" * A Task object represents a task that can be created by the user","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"public class Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    protected final String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for the Task object","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"     * @param description A brief description of the task","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    public Task (String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"     * Method that creates a Task object by calling the constructor of the Task class","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"     * @param description A brief description of the task","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"     * @return The Task object that was created","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"    public Task createTask(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"        return new Task(description);","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"     * Method that marks a task as completed","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"    public void setMarked() {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"     * Method that marks a task is incomplete","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"    public void setUnmarked() {","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"        return (isDone? \"[X] \" : \"[ ] \") + description;","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"sachindavid96":49}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":" * A TaskList represents a list that stores all the user\u0027s current tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"public class TaskList {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"    private int numberOfTasks \u003d 0;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    private int numberUndone \u003d 0;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"    private int numberDone \u003d 0;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"     * A constructor for a Task List","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"     * A Method to get the number of Tasks currently in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"     * @return An integer that is the number of tasks currently in the TaskList","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    public int getNumberOfTasks() {","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"        return this.list.size();","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"     * Method to add a task to the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"     * @param task The Task object to be added to the TastList object","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"        this.list.add(task);","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"        numberUndone++;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"        numberOfTasks++;","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        return \"Got it! I have added the following task: \\n    \" + task.toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"     * Method to add a task when reading from the storage file. This does not print a message that a task has been","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"     * added","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"     * @param task The Task object to be added to the TaskList object when reading from the storage file","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"    public void addTaskWhenLoading(Task task) {","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"        this.list.add(task);","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"        numberUndone++;","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"        numberOfTasks++;","lastModifiedDate":"2023-02-17"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"     * Method to mark a task with the supplied index number as completed","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"     * @param taskNumber The index number of the Task object in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"    public String markDone(int taskNumber) {","lastModifiedDate":"2023-02-23"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"        if (numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-02-19"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"            return \"There are no tasks in your list!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"        if (taskNumber \u003e this.numberOfTasks || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"            return \"Please enter a task number between 1 and the total number of tasks!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"        int indexAdjustedTaskNumber \u003d taskNumber - 1;","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"        Task toBeMarked \u003d this.list.get(indexAdjustedTaskNumber);","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"        if (toBeMarked.isDone) {","lastModifiedDate":"2023-02-18"},{"lineNumber":72,"author":{"gitId":"sachindavid96"},"content":"            return \"This task has already been marked as done!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":73,"author":{"gitId":"sachindavid96"},"content":"        } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":74,"author":{"gitId":"sachindavid96"},"content":"            toBeMarked.setMarked();","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"        numberUndone--;","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"        numberDone++;","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"        return \"Great! I have marked this task as done! \\n\" + list.get(indexAdjustedTaskNumber).toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":81,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"sachindavid96"},"content":"     * Method to mark a task with the supplied index number as incomplete","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"sachindavid96"},"content":"     * @param taskNumber The index number of the Task object in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"sachindavid96"},"content":"    public String markUndone(int taskNumber) {","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":91,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":92,"author":{"gitId":"sachindavid96"},"content":"        if (numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-02-19"},{"lineNumber":93,"author":{"gitId":"sachindavid96"},"content":"            return \"There are no tasks in your task list!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-19"},{"lineNumber":95,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":96,"author":{"gitId":"sachindavid96"},"content":"        if (taskNumber \u003e this.numberOfTasks || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":97,"author":{"gitId":"sachindavid96"},"content":"            return \"Please enter a task number between 1 and the total number of tasks!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":98,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":99,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":100,"author":{"gitId":"sachindavid96"},"content":"        int indexAdjustedTaskNumber \u003d taskNumber - 1;","lastModifiedDate":"2023-01-25"},{"lineNumber":101,"author":{"gitId":"sachindavid96"},"content":"        Task toBeUnmarked \u003d this.list.get(indexAdjustedTaskNumber);","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"sachindavid96"},"content":"        if (!toBeUnmarked.isDone) {","lastModifiedDate":"2023-02-18"},{"lineNumber":103,"author":{"gitId":"sachindavid96"},"content":"           return \"This task is already marked as undone!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"sachindavid96"},"content":"        } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":105,"author":{"gitId":"sachindavid96"},"content":"            toBeUnmarked.setUnmarked();","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-18"},{"lineNumber":107,"author":{"gitId":"sachindavid96"},"content":"        numberUndone++;","lastModifiedDate":"2023-01-26"},{"lineNumber":108,"author":{"gitId":"sachindavid96"},"content":"        numberDone--;","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"sachindavid96"},"content":"        return \"Noted. I have marked this task as undone! \\n\" + list.get(indexAdjustedTaskNumber).toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":110,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":111,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":112,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"sachindavid96"},"content":"     * Method that prints all the tasks in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"sachindavid96"},"content":"    public String printItems () {","lastModifiedDate":"2023-02-23"},{"lineNumber":116,"author":{"gitId":"sachindavid96"},"content":"        String output \u003d \"These are the tasks you have left to complete: \\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":117,"author":{"gitId":"sachindavid96"},"content":"        int numOfTasks \u003d this.list.size();","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":119,"author":{"gitId":"sachindavid96"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"sachindavid96"},"content":"            output +\u003d  i + 1 + \".\" + list.get(i).toString() + \"\\n\";","lastModifiedDate":"2023-02-23"},{"lineNumber":121,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":122,"author":{"gitId":"sachindavid96"},"content":"        return output;","lastModifiedDate":"2023-02-23"},{"lineNumber":123,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":124,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":125,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"sachindavid96"},"content":"     * Method to print the total number of tasks, as well as the number of tasks that are completed, and the number of","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"sachindavid96"},"content":"     * tasks that are yet to be completed","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"sachindavid96"},"content":"    public String getTaskDetails() {","lastModifiedDate":"2023-02-23"},{"lineNumber":130,"author":{"gitId":"sachindavid96"},"content":"        String pluralCheck \u003d (numberOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\");","lastModifiedDate":"2023-02-18"},{"lineNumber":131,"author":{"gitId":"sachindavid96"},"content":"        String output \u003d \"\\nYou now have \" + numberOfTasks +  pluralCheck + \" in the list\";","lastModifiedDate":"2023-02-26"},{"lineNumber":132,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"\\n Number of tasks completed: \" + numberDone;","lastModifiedDate":"2023-02-23"},{"lineNumber":133,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"\\n Number of tasks yet to be completed: \" + numberUndone;","lastModifiedDate":"2023-02-23"},{"lineNumber":134,"author":{"gitId":"sachindavid96"},"content":"        return output;","lastModifiedDate":"2023-02-23"},{"lineNumber":135,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"sachindavid96"},"content":"     * Method to access a Task at a particular index in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"sachindavid96"},"content":"     * @param index The index of the Task in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":141,"author":{"gitId":"sachindavid96"},"content":"     * @return The Task object that was requested","lastModifiedDate":"2023-02-20"},{"lineNumber":142,"author":{"gitId":"sachindavid96"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-20"},{"lineNumber":143,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":144,"author":{"gitId":"sachindavid96"},"content":"    public Task getTaskAtIndex (int index) throws IOException {","lastModifiedDate":"2023-02-15"},{"lineNumber":145,"author":{"gitId":"sachindavid96"},"content":"       return this.list.get(index);","lastModifiedDate":"2023-02-15"},{"lineNumber":146,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":147,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":148,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":149,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":150,"author":{"gitId":"sachindavid96"},"content":"     * Method to access the Task that was added last to the TaskList","lastModifiedDate":"2023-02-20"},{"lineNumber":151,"author":{"gitId":"sachindavid96"},"content":"     * @return The latest Task object in the TaskList object","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":153,"author":{"gitId":"sachindavid96"},"content":"    public Task getLatestTask() {","lastModifiedDate":"2023-02-15"},{"lineNumber":154,"author":{"gitId":"sachindavid96"},"content":"        return this.list.get(this.list.size() - 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":155,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":156,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":157,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":158,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":159,"author":{"gitId":"sachindavid96"},"content":"     * Method to delete a Task from the TastList","lastModifiedDate":"2023-02-20"},{"lineNumber":160,"author":{"gitId":"sachindavid96"},"content":"     * @param taskNumber An integer that represents the index of the Task in the TaskList","lastModifiedDate":"2023-02-20"},{"lineNumber":161,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":162,"author":{"gitId":"sachindavid96"},"content":"    public String deleteTask(int taskNumber) {","lastModifiedDate":"2023-02-23"},{"lineNumber":163,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":164,"author":{"gitId":"sachindavid96"},"content":"        if (numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-02-17"},{"lineNumber":165,"author":{"gitId":"sachindavid96"},"content":"            return \"You do not have any tasks at the moment!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":166,"author":{"gitId":"sachindavid96"},"content":"        } else if (taskNumber \u003e numberOfTasks || taskNumber \u003c 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":167,"author":{"gitId":"sachindavid96"},"content":"            return \"Please enter a task number between 1 and the total number of tasks!\";","lastModifiedDate":"2023-02-23"},{"lineNumber":168,"author":{"gitId":"sachindavid96"},"content":"        } else {","lastModifiedDate":"2023-02-17"},{"lineNumber":169,"author":{"gitId":"sachindavid96"},"content":"            String output \u003d \"Noted! I have deleted this task: \\n\" + this.list.get(taskNumber - 1).toString();","lastModifiedDate":"2023-02-23"},{"lineNumber":170,"author":{"gitId":"sachindavid96"},"content":"            boolean isDeletedDone \u003d this.list.get(taskNumber - 1).isDone;","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"sachindavid96"},"content":"            this.list.remove(taskNumber - 1);","lastModifiedDate":"2023-01-26"},{"lineNumber":172,"author":{"gitId":"sachindavid96"},"content":"            this.numberOfTasks--;","lastModifiedDate":"2023-02-17"},{"lineNumber":173,"author":{"gitId":"sachindavid96"},"content":"            if (isDeletedDone) {","lastModifiedDate":"2023-02-17"},{"lineNumber":174,"author":{"gitId":"sachindavid96"},"content":"                numberDone--;","lastModifiedDate":"2023-02-17"},{"lineNumber":175,"author":{"gitId":"sachindavid96"},"content":"            } else {","lastModifiedDate":"2023-02-02"},{"lineNumber":176,"author":{"gitId":"sachindavid96"},"content":"                numberUndone--;","lastModifiedDate":"2023-02-17"},{"lineNumber":177,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":178,"author":{"gitId":"sachindavid96"},"content":"            return output;","lastModifiedDate":"2023-02-23"},{"lineNumber":179,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":180,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":181,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":182,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":183,"author":{"gitId":"sachindavid96"},"content":"    public String findTask(String keyword) {","lastModifiedDate":"2023-02-23"},{"lineNumber":184,"author":{"gitId":"sachindavid96"},"content":"        String output \u003d \"Here are the tasks matching the given keyword\\n\";","lastModifiedDate":"2023-02-23"},{"lineNumber":185,"author":{"gitId":"sachindavid96"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-02-20"},{"lineNumber":186,"author":{"gitId":"sachindavid96"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-02-20"},{"lineNumber":187,"author":{"gitId":"sachindavid96"},"content":"            if (task.description.toUpperCase().contains(keyword.toUpperCase())) {","lastModifiedDate":"2023-02-20"},{"lineNumber":188,"author":{"gitId":"sachindavid96"},"content":"                output +\u003d index + \" \" + task.toString() + \"\\n\";","lastModifiedDate":"2023-02-23"},{"lineNumber":189,"author":{"gitId":"sachindavid96"},"content":"                index++;","lastModifiedDate":"2023-02-20"},{"lineNumber":190,"author":{"gitId":"sachindavid96"},"content":"            }","lastModifiedDate":"2023-02-20"},{"lineNumber":191,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":192,"author":{"gitId":"sachindavid96"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2023-02-20"},{"lineNumber":193,"author":{"gitId":"sachindavid96"},"content":"            return \"There seem to be no tasks matching the keyword\";","lastModifiedDate":"2023-02-23"},{"lineNumber":194,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-20"},{"lineNumber":195,"author":{"gitId":"sachindavid96"},"content":"        return output;","lastModifiedDate":"2023-02-23"},{"lineNumber":196,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":197,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":198,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":199,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":200,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":201,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":202,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":203,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":204,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":205,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"sachindavid96":205}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":" * A ToDo represents a type of Task that can be added to the TaskList","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"     * Constructor for the ToDo task type","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"     * @param description A brief description of the task","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"        super(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"        return (isDone? \"[T][X] \" : \"[T][ ] \") + description;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"sachindavid96":22}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":" * UI represents the methods that print messages that facilitate interaction with the user","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"public class UI {","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"    private static final String UI_FIRST_COMMAND_MESSAGE \u003d \"You can let me know by typing it below!\";","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    private static final String UI_NEXT_COMMAND_MESSAGE \u003d \"What can I do for you next?\";","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"    private static final String UI_INVALID_DATE_FORMAT_MESSAGE \u003d \"Please re-enter the request with the date in the \\n\" +","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"                                                              \"following format: dd-Mmm-yyyy\";","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    ","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"    public void printNextCommandMessage() {","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"        System.out.println(UI_NEXT_COMMAND_MESSAGE);","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"     * Prints a message asking the user to re-enter a date in the correct format","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    public String printInvalidDateFormatMessage() {","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"        return UI_INVALID_DATE_FORMAT_MESSAGE;","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"     * Prints a horizontal line to the screen","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"    public static void printHorizontalLine() {","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"            char horizontalBar \u003d \u0027\\u2015\u0027;","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"            System.out.print(horizontalBar);","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"        System.out.print(\"\\n\");","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"     * Prints list of available commands so that the user could refer to it","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"     * @return A String that is the list of the commands","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"    public static String printAvailableCommands() {","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"Here is the list of commands and their required details!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"Ensure that you leave spaces between the different fields!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"1. list - view a list of all your tasks and their completion status!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"2. mark {insert task number in your list} - mark the corresponding task as completed!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"3. unmark {insert task number in your list} - mark the corresponding task as incomplete!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"4. todo {insert task description} - add a task with only a description to your list!\";","lastModifiedDate":"2023-03-02"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"5. deadline {insert description} / {insert start date} / {insert end date} - add a deadline\\n\" +","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"                      \" to your list!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"6. event {insert description} / {insert start date and time} / {insert end date and time}\\n\" +","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"                      \" add an event to your list\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"7. delete {insert task number in your list} - delete the corresponding task!\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"        output +\u003d \"8. find {insert keyword} - find the task with a matching keyword\\n\";","lastModifiedDate":"2023-03-02"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"        return output;","lastModifiedDate":"2023-03-02"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"sachindavid96":60}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"            \u003cFont name\u003d\"DIN Alternate Bold\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"sachindavid96":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.layout.BorderPane?\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"      \u003cBorderPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-24"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"sachindavid96":21}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"public class EventTest {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    @Test","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"   public void basicTest() {","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"        Event event \u003d new Event(\"12-Jan-2023 1200\", \"12-Jan-2023 1230\", \"Guitar Performance\");","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"        String expectedOutput \u003d \"[E][ ] Guitar Performance. From: Thursday, 12 January 2023 @ 12:00 hrs.\" +","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"              \" To: Thursday, 12 January 2023 @ 12:30 hrs\";","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"        assertEquals(event.toString(), expectedOutput);","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    @Test","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    public void markTest() {","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"        Event event \u003d new Event(\"12-Jan-2023 1200\", \"12-Jan-2023 1230\", \"Guitar Performance\");","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"        event.mark();","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"        String expectedOutput \u003d \"[E][X] Guitar Performance. From: Thursday, 12 January 2023 @ 12:00 hrs.\" +","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"                \" To: Thursday, 12 January 2023 @ 12:30 hrs\";","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"        assertEquals(event.toString(), expectedOutput);","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"sachindavid96":25}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package duke;","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"public class ToDoTest {","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"    @Test","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"    public void basicTest() {","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"        assertEquals(new ToDo(\"study for the midterms\"),","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"                new String(\"[T][ ] study for the midterms\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    @Test","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"    public void markTest() {","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"        ToDo todo \u003d new ToDo(\"study for the midterms\");","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"        todo.mark();","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"        assertEquals(todo,","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"                new String(\"[T][X] study for the midterms\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"sachindavid96":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"todo buy eggs","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"deadline pay fees / 6th June","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"event project meeting / Monday 2pm / 4pm","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"mark 1","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"mark 2","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"mark 3","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"unmark 2","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"unmark 3","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"list","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"sachindavid96":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sachindavid96":1,"-":20}}]
