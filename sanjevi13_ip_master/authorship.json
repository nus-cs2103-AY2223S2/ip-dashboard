[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"    mainClassName \u003d \"gui.Launcher\"","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sanjevi13":17,"-":38}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates a Deadline as a specific type of Task.","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"     * Creates a Deadline object.","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"     * @param deadline The deadline of the task to be input in DD/MM/YYYY format.","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"    Deadline(String description, LocalDate deadline) {","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"     * Creates a string representation of the Deadline object to be input in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"     * @return The string representation of the deadline with the description and date.","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"     * Creates a string representation of the Deadline task that is saved in a file.","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"     * @return The string representation of the Deadline task that is stored in a text file.","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"    public String sendOutputToFile() {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description,","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"                deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"sanjevi13":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import gui.DialogBox;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates the main Duke app.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"    private Scene scene;","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/userImage.png\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeImage.png\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"     * Creates a new Duke object.","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"    public Duke() {","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"        this.storage \u003d new Storage(\"data/duke.txt\");","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"            this.taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"        this.parser \u003d new Parser(taskList, storage);","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-02-10"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-02-10"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"        stage.show();","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"sanjevi13"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-02-10"},{"lineNumber":68,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":70,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"sanjevi13"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"sanjevi13"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":73,"author":{"gitId":"sanjevi13"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":74,"author":{"gitId":"sanjevi13"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":75,"author":{"gitId":"sanjevi13"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":76,"author":{"gitId":"sanjevi13"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":77,"author":{"gitId":"sanjevi13"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":78,"author":{"gitId":"sanjevi13"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-10"},{"lineNumber":79,"author":{"gitId":"sanjevi13"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-10"},{"lineNumber":80,"author":{"gitId":"sanjevi13"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-02-10"},{"lineNumber":81,"author":{"gitId":"sanjevi13"},"content":"            userInput.clear();","lastModifiedDate":"2023-02-10"},{"lineNumber":82,"author":{"gitId":"sanjevi13"},"content":"        });","lastModifiedDate":"2023-02-10"},{"lineNumber":83,"author":{"gitId":"sanjevi13"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-02-10"},{"lineNumber":84,"author":{"gitId":"sanjevi13"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-10"},{"lineNumber":85,"author":{"gitId":"sanjevi13"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"sanjevi13"},"content":"        });","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"sanjevi13"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-10"},{"lineNumber":88,"author":{"gitId":"sanjevi13"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-10"},{"lineNumber":89,"author":{"gitId":"sanjevi13"},"content":"        });","lastModifiedDate":"2023-02-10"},{"lineNumber":90,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"sanjevi13"},"content":"     * Iteration 1:","lastModifiedDate":"2023-02-10"},{"lineNumber":94,"author":{"gitId":"sanjevi13"},"content":"     * Creates a label with the specified text and adds it to the dialog container.","lastModifiedDate":"2023-02-10"},{"lineNumber":95,"author":{"gitId":"sanjevi13"},"content":"     *","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"sanjevi13"},"content":"     * @param text String containing text to add","lastModifiedDate":"2023-02-10"},{"lineNumber":97,"author":{"gitId":"sanjevi13"},"content":"     * @return a label with the specified text that has word wrap enabled.","lastModifiedDate":"2023-02-10"},{"lineNumber":98,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"sanjevi13"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2023-02-10"},{"lineNumber":100,"author":{"gitId":"sanjevi13"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2023-02-10"},{"lineNumber":101,"author":{"gitId":"sanjevi13"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2023-02-10"},{"lineNumber":102,"author":{"gitId":"sanjevi13"},"content":"        return textToAdd;","lastModifiedDate":"2023-02-10"},{"lineNumber":103,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":104,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":105,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":106,"author":{"gitId":"sanjevi13"},"content":"     * Iteration 2:","lastModifiedDate":"2023-02-10"},{"lineNumber":107,"author":{"gitId":"sanjevi13"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-10"},{"lineNumber":108,"author":{"gitId":"sanjevi13"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-10"},{"lineNumber":109,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":110,"author":{"gitId":"sanjevi13"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-10"},{"lineNumber":111,"author":{"gitId":"sanjevi13"},"content":"        String userText \u003d userInput.getText();","lastModifiedDate":"2023-02-10"},{"lineNumber":112,"author":{"gitId":"sanjevi13"},"content":"        String dukeText \u003d userInput.getText();","lastModifiedDate":"2023-02-10"},{"lineNumber":113,"author":{"gitId":"sanjevi13"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-10"},{"lineNumber":114,"author":{"gitId":"sanjevi13"},"content":"                DialogBox.getUserDialog(userText, user),","lastModifiedDate":"2023-02-10"},{"lineNumber":115,"author":{"gitId":"sanjevi13"},"content":"                DialogBox.getDukeDialog(dukeText, duke)","lastModifiedDate":"2023-02-10"},{"lineNumber":116,"author":{"gitId":"sanjevi13"},"content":"        );","lastModifiedDate":"2023-02-10"},{"lineNumber":117,"author":{"gitId":"sanjevi13"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-10"},{"lineNumber":118,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":119,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":120,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":121,"author":{"gitId":"sanjevi13"},"content":"     * Gets the response from duke by parsing user input.","lastModifiedDate":"2023-02-12"},{"lineNumber":122,"author":{"gitId":"sanjevi13"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-12"},{"lineNumber":123,"author":{"gitId":"sanjevi13"},"content":"     * @return the String format of the response.","lastModifiedDate":"2023-02-12"},{"lineNumber":124,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":125,"author":{"gitId":"sanjevi13"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":126,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":127,"author":{"gitId":"sanjevi13"},"content":"            String response \u003d  this.parser.parseInput(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":128,"author":{"gitId":"sanjevi13"},"content":"            return response;","lastModifiedDate":"2023-02-12"},{"lineNumber":129,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":130,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":131,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":134,"author":{"gitId":"sanjevi13"},"content":"    public String getGreeting(){","lastModifiedDate":"2023-02-12"},{"lineNumber":135,"author":{"gitId":"sanjevi13"},"content":"        return ui.greetingMessage();","lastModifiedDate":"2023-02-12"},{"lineNumber":136,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":137,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-19"},{"lineNumber":138,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":139,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":141,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"sanjevi13":141}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates an exception to be thrown in the Duke app.","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"     * Creates a new DukeException object.","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"     * @param s The message to be displayed in the exception.","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    DukeException(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"        super(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"sanjevi13":15}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates an Event as a specific type of Task.","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"    private String timeOfEvent;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"     * Creates an Event object.","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"     * @param timeOfEvent The date/time of the event.","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"    public Event(String description, String timeOfEvent) {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"        this.timeOfEvent \u003d timeOfEvent;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"     * Creates a String representation of the Event object to be stored in a list.","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"     * @return The string representation of the Event object in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + timeOfEvent + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"     * Creates a string representation of the Event object that is saved in a file.","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"     * @return The string representation of the Event object that is stored in a text file.","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"    public String sendOutputToFile() {","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"        return String.format(\"E | %d | %s | %s\" , isDone ? 1 : 0, description, timeOfEvent);","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"sanjevi13":37}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates a parser that parses the user input in the Duke app.","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"public class Parser {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"    private int exceptionCount;","lastModifiedDate":"2023-02-14"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"    private final String eventErr \u003d \"OOPS!!! The description of a event cannot be \\n\\tempty.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"    private final String deadlineErr \u003d \"OOPS!!! The description of a deadline cannot be \\n\\tempty.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"    private final String todoErr \u003d \"OOPS!!! The description of a todo cannot be \\n\\tempty.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    private final String deleteErr \u003d \"OOPS!!! You have to choose a task to delete.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"    private final String markErr \u003d \"OOPS!!! You have to choose a task to mark.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    private final String unmarkErr \u003d \"OOPS!!! You have to choose a task to unmark.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    private final String findErr \u003d \"OOPS!!! Invalid search term. Try adding a task \\n\\tdescription.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"     * Creates a new Parser object.","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"     * @param taskList The TaskList object containing the ArrayList of Tasks.","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"    Parser(TaskList taskList, Storage storage) {","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"        this.exceptionCount \u003d 0;","lastModifiedDate":"2023-02-14"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input string and modifies the list accordingly.","lastModifiedDate":"2023-02-14"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"     * @param input The string input to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"     * @return The string message that Duke will reply with.","lastModifiedDate":"2023-02-14"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"     *         If the exception count reaches 2, a general help message will be returned.","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException Throws a DukeException if the input is invalid.","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"    public String parseInput(String input) throws DukeException {","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"        assert input !\u003d \"\": \"Input cannot be empty\";","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"        if (exceptionCount \u003d\u003d 2) {","lastModifiedDate":"2023-02-14"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"            exceptionCount \u003d 0;","lastModifiedDate":"2023-02-14"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"            return ui.helpMessage();","lastModifiedDate":"2023-02-14"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"        String[] parsedCommand \u003d input.split(\" \");","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"        String cmd \u003d parsedCommand[0];","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"        switch (cmd) {","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"        case \"bye\":","lastModifiedDate":"2023-02-14"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"            return goodbyeParser();","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"        case \"list\":","lastModifiedDate":"2023-02-14"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"            return ui.printList(taskList.getList());","lastModifiedDate":"2023-02-14"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"            return markParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"            return unmarkParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-10"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"            return deleteParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"        case \"event\":","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"            return eventParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-10"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"            return deadlineParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"sanjevi13"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"sanjevi13"},"content":"            return todoParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"sanjevi13"},"content":"        case \"find\":","lastModifiedDate":"2023-02-10"},{"lineNumber":68,"author":{"gitId":"sanjevi13"},"content":"            return findParser(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"sanjevi13"},"content":"        case \"cmd\":","lastModifiedDate":"2023-02-14"},{"lineNumber":70,"author":{"gitId":"sanjevi13"},"content":"            return commandParser(input);","lastModifiedDate":"2023-02-14"},{"lineNumber":71,"author":{"gitId":"sanjevi13"},"content":"        default:","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"sanjevi13"},"content":"            exceptionCount++;","lastModifiedDate":"2023-02-14"},{"lineNumber":73,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that \\n\\tmeans :-(\");","lastModifiedDate":"2023-02-14"},{"lineNumber":74,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":75,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":76,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":77,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":78,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to close application.","lastModifiedDate":"2023-02-14"},{"lineNumber":79,"author":{"gitId":"sanjevi13"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown before app closes.","lastModifiedDate":"2023-02-14"},{"lineNumber":81,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":82,"author":{"gitId":"sanjevi13"},"content":"    public String goodbyeParser() {","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":84,"author":{"gitId":"sanjevi13"},"content":"            this.storage.save(taskList);","lastModifiedDate":"2023-02-13"},{"lineNumber":85,"author":{"gitId":"sanjevi13"},"content":"            return ui.goodbyeMessage();","lastModifiedDate":"2023-02-13"},{"lineNumber":86,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":87,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":89,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":90,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":91,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":92,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to mark task as done.","lastModifiedDate":"2023-02-14"},{"lineNumber":93,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":94,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown after a task is marked.","lastModifiedDate":"2023-02-14"},{"lineNumber":95,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":96,"author":{"gitId":"sanjevi13"},"content":"    public String markParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":97,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":98,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, markErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"sanjevi13"},"content":"            int taskNum \u003d Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"sanjevi13"},"content":"            taskList.markTaskAsDone(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"sanjevi13"},"content":"            return ui.markTaskAsDoneMessage(taskList.getTask(taskNum));","lastModifiedDate":"2023-02-10"},{"lineNumber":102,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":103,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":104,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":105,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":106,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":107,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":108,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to mark task as not done.","lastModifiedDate":"2023-02-14"},{"lineNumber":109,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":110,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown after a task is unmarked.","lastModifiedDate":"2023-02-14"},{"lineNumber":111,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":112,"author":{"gitId":"sanjevi13"},"content":"    public String unmarkParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":113,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":114,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, unmarkErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"sanjevi13"},"content":"            int taskNum \u003d Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"sanjevi13"},"content":"            taskList.markTaskAsIncomplete(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"sanjevi13"},"content":"            return ui.markTaskAsIncompleteMessage(taskList.getTask(taskNum));","lastModifiedDate":"2023-02-10"},{"lineNumber":118,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":119,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":120,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":121,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":122,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":123,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":124,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to delete a task.","lastModifiedDate":"2023-02-14"},{"lineNumber":125,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":126,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown after a task is deleted.","lastModifiedDate":"2023-02-14"},{"lineNumber":127,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":128,"author":{"gitId":"sanjevi13"},"content":"    public String deleteParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":129,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":130,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, deleteErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"sanjevi13"},"content":"            int taskNum \u003d Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"sanjevi13"},"content":"            Task t \u003d taskList.deleteTaskFromList(taskNum);","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"sanjevi13"},"content":"            return ui.deletedTaskMessage(t, taskList.numberOfTasks());","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":135,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":136,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":137,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":138,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":139,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":140,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to add an event task.","lastModifiedDate":"2023-02-14"},{"lineNumber":141,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":142,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown after an event task is added to list.","lastModifiedDate":"2023-02-14"},{"lineNumber":143,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":144,"author":{"gitId":"sanjevi13"},"content":"    public String eventParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":145,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":146,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, eventErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":147,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":148,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":149,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":150,"author":{"gitId":"sanjevi13"},"content":"        String[] eventConstructor \u003d input.replace(\"event \", \"\").split(\"/at \");","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"sanjevi13"},"content":"        String timeModified \u003d eventConstructor[1].replace(\"from \", \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"sanjevi13"},"content":"        return inputEvent(eventConstructor[0], timeModified);","lastModifiedDate":"2023-02-10"},{"lineNumber":153,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":155,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":156,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to add a deadline task.","lastModifiedDate":"2023-02-14"},{"lineNumber":157,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":158,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown after a deadline task is added to list.","lastModifiedDate":"2023-02-14"},{"lineNumber":159,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":160,"author":{"gitId":"sanjevi13"},"content":"    public String deadlineParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":161,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":162,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, deadlineErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":163,"author":{"gitId":"sanjevi13"},"content":"            return addDeadlineFormatted(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":164,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":165,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":166,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":170,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to add a todo task.","lastModifiedDate":"2023-02-14"},{"lineNumber":171,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":172,"author":{"gitId":"sanjevi13"},"content":"     * @return The string that is shown after a todo task is added to list.","lastModifiedDate":"2023-02-14"},{"lineNumber":173,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":174,"author":{"gitId":"sanjevi13"},"content":"    public String todoParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":175,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":176,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, todoErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":177,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":178,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":179,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":180,"author":{"gitId":"sanjevi13"},"content":"        return inputTodo(input.replace(\"todo \", \"\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":181,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":182,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":183,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":184,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to find a task in the list.","lastModifiedDate":"2023-02-14"},{"lineNumber":185,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":186,"author":{"gitId":"sanjevi13"},"content":"     * @return The list of tasks found matching the keyword, in string format.","lastModifiedDate":"2023-02-14"},{"lineNumber":187,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":188,"author":{"gitId":"sanjevi13"},"content":"    public String findParser(String input) {","lastModifiedDate":"2023-02-10"},{"lineNumber":189,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":190,"author":{"gitId":"sanjevi13"},"content":"            generalInputChecker(input, findErr);","lastModifiedDate":"2023-02-15"},{"lineNumber":191,"author":{"gitId":"sanjevi13"},"content":"            return findTasks(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":192,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":193,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":194,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":195,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":196,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":197,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":198,"author":{"gitId":"sanjevi13"},"content":"     * Parses the input to invoke the correct methods to show the list of commands.","lastModifiedDate":"2023-02-14"},{"lineNumber":199,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":200,"author":{"gitId":"sanjevi13"},"content":"     * @return The command list.","lastModifiedDate":"2023-02-14"},{"lineNumber":201,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":202,"author":{"gitId":"sanjevi13"},"content":"    public String commandParser(String input) {","lastModifiedDate":"2023-02-14"},{"lineNumber":203,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-14"},{"lineNumber":204,"author":{"gitId":"sanjevi13"},"content":"            cmdInputChecker(input);","lastModifiedDate":"2023-02-14"},{"lineNumber":205,"author":{"gitId":"sanjevi13"},"content":"            return ui.commandsList();","lastModifiedDate":"2023-02-14"},{"lineNumber":206,"author":{"gitId":"sanjevi13"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-14"},{"lineNumber":207,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-14"},{"lineNumber":208,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":209,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":210,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":211,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":212,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":213,"author":{"gitId":"sanjevi13"},"content":"     * A general method thaat ensures that the user inputs description when adding a task","lastModifiedDate":"2023-02-15"},{"lineNumber":214,"author":{"gitId":"sanjevi13"},"content":"     * @param input","lastModifiedDate":"2023-02-15"},{"lineNumber":215,"author":{"gitId":"sanjevi13"},"content":"     * @param err","lastModifiedDate":"2023-02-15"},{"lineNumber":216,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-15"},{"lineNumber":217,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":218,"author":{"gitId":"sanjevi13"},"content":"    public void generalInputChecker(String input, String err) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":219,"author":{"gitId":"sanjevi13"},"content":"        String[] inputArray \u003d input.split(\" \", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":220,"author":{"gitId":"sanjevi13"},"content":"        if (inputArray.length !\u003d 2) {","lastModifiedDate":"2023-01-28"},{"lineNumber":221,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(err);","lastModifiedDate":"2023-02-15"},{"lineNumber":222,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":223,"author":{"gitId":"sanjevi13"},"content":"        if (inputArray[1].trim().length() \u003d\u003d 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":224,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(err);","lastModifiedDate":"2023-02-15"},{"lineNumber":225,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":226,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":227,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":228,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":229,"author":{"gitId":"sanjevi13"},"content":"     * A special input checker to check if user types input to view command list wrongly.","lastModifiedDate":"2023-02-15"},{"lineNumber":230,"author":{"gitId":"sanjevi13"},"content":"     * @param input The user input","lastModifiedDate":"2023-02-15"},{"lineNumber":231,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException if the user types in \u0027cmd\u0027 wrongly","lastModifiedDate":"2023-02-15"},{"lineNumber":232,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":233,"author":{"gitId":"sanjevi13"},"content":"    public void cmdInputChecker(String input) throws DukeException {","lastModifiedDate":"2023-02-14"},{"lineNumber":234,"author":{"gitId":"sanjevi13"},"content":"        String[] inputArray \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-14"},{"lineNumber":235,"author":{"gitId":"sanjevi13"},"content":"        if (inputArray.length \u003e\u003d 2 \u0026\u0026 inputArray[1].trim().length() !\u003d 0) {","lastModifiedDate":"2023-02-15"},{"lineNumber":236,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"Invalid command used. Enter \u0027cmd\u0027 for a list of \\n\\tcommands\");","lastModifiedDate":"2023-02-15"},{"lineNumber":237,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":238,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":239,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":240,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":241,"author":{"gitId":"sanjevi13"},"content":"     * Finds the tasks that have a description containing the query","lastModifiedDate":"2023-01-31"},{"lineNumber":242,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string that is used to find tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":243,"author":{"gitId":"sanjevi13"},"content":"     * @return The list of found tasks","lastModifiedDate":"2023-02-15"},{"lineNumber":244,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException if the input string does not match any task descriptions.","lastModifiedDate":"2023-01-31"},{"lineNumber":245,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":246,"author":{"gitId":"sanjevi13"},"content":"    public String findTasks(String input) throws DukeException {","lastModifiedDate":"2023-02-10"},{"lineNumber":247,"author":{"gitId":"sanjevi13"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-10"},{"lineNumber":248,"author":{"gitId":"sanjevi13"},"content":"        ArrayList\u003cInteger\u003e taskNumbers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-30"},{"lineNumber":249,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":250,"author":{"gitId":"sanjevi13"},"content":"            for (int i \u003d 1; i \u003c\u003d this.taskList.numberOfTasks(); i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":251,"author":{"gitId":"sanjevi13"},"content":"                if (isFoundTask(input, i)) {","lastModifiedDate":"2023-02-13"},{"lineNumber":252,"author":{"gitId":"sanjevi13"},"content":"                    taskNumbers.add(i);","lastModifiedDate":"2023-01-30"},{"lineNumber":253,"author":{"gitId":"sanjevi13"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":254,"author":{"gitId":"sanjevi13"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":255,"author":{"gitId":"sanjevi13"},"content":"            if (taskNumbers.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":256,"author":{"gitId":"sanjevi13"},"content":"                throw new DukeException(\"OOPS!!! No such task matches your description.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":257,"author":{"gitId":"sanjevi13"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":258,"author":{"gitId":"sanjevi13"},"content":"            sb.append(ui.findTasksMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":259,"author":{"gitId":"sanjevi13"},"content":"            sb.append(ui.printFoundTasks(this.taskList, taskNumbers));","lastModifiedDate":"2023-02-10"},{"lineNumber":260,"author":{"gitId":"sanjevi13"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":261,"author":{"gitId":"sanjevi13"},"content":"            return ui.printMessage(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":262,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":263,"author":{"gitId":"sanjevi13"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-10"},{"lineNumber":264,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":265,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":266,"author":{"gitId":"sanjevi13"},"content":"    public boolean isFoundTask(String input, int i) {","lastModifiedDate":"2023-02-13"},{"lineNumber":267,"author":{"gitId":"sanjevi13"},"content":"        return this.taskList.getTask(i).description.toLowerCase()","lastModifiedDate":"2023-02-13"},{"lineNumber":268,"author":{"gitId":"sanjevi13"},"content":"                .contains(input.replace(\"find \", \"\").toLowerCase());","lastModifiedDate":"2023-02-13"},{"lineNumber":269,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":270,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":271,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":272,"author":{"gitId":"sanjevi13"},"content":"     * Adds a deadline object with the formatted date to the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":273,"author":{"gitId":"sanjevi13"},"content":"     * @param input The input string","lastModifiedDate":"2023-01-30"},{"lineNumber":274,"author":{"gitId":"sanjevi13"},"content":"     * @return the output of the inputDeadline method","lastModifiedDate":"2023-02-15"},{"lineNumber":275,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException if the format of the date is wrong.","lastModifiedDate":"2023-01-30"},{"lineNumber":276,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":277,"author":{"gitId":"sanjevi13"},"content":"    public String addDeadlineFormatted(String input) throws DukeException {","lastModifiedDate":"2023-02-10"},{"lineNumber":278,"author":{"gitId":"sanjevi13"},"content":"        String[] constructor \u003d input.replace(\"deadline \", \"\").split(\" /by \");","lastModifiedDate":"2023-01-28"},{"lineNumber":279,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":280,"author":{"gitId":"sanjevi13"},"content":"            LocalDate temp \u003d LocalDate.parse(constructor[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":281,"author":{"gitId":"sanjevi13"},"content":"            return inputDeadline(constructor[0], temp);","lastModifiedDate":"2023-02-10"},{"lineNumber":282,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":283,"author":{"gitId":"sanjevi13"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":284,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"Your date must in format of dd/MM/yyyy\");","lastModifiedDate":"2023-02-15"},{"lineNumber":285,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":286,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":287,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":288,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":289,"author":{"gitId":"sanjevi13"},"content":"     * Inputs a new Event object into the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":290,"author":{"gitId":"sanjevi13"},"content":"     * @param s The description of the event.","lastModifiedDate":"2023-01-30"},{"lineNumber":291,"author":{"gitId":"sanjevi13"},"content":"     * @param time The time of the event.","lastModifiedDate":"2023-01-30"},{"lineNumber":292,"author":{"gitId":"sanjevi13"},"content":"     * @return the UI message when a task is added","lastModifiedDate":"2023-02-15"},{"lineNumber":293,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":294,"author":{"gitId":"sanjevi13"},"content":"    public String inputEvent(String s, String time) {","lastModifiedDate":"2023-02-10"},{"lineNumber":295,"author":{"gitId":"sanjevi13"},"content":"        Event event \u003d new Event(s, time);","lastModifiedDate":"2023-01-28"},{"lineNumber":296,"author":{"gitId":"sanjevi13"},"content":"        taskList.add(event);","lastModifiedDate":"2023-01-28"},{"lineNumber":297,"author":{"gitId":"sanjevi13"},"content":"        return ui.addedTaskMessage(event, taskList.numberOfTasks());","lastModifiedDate":"2023-02-10"},{"lineNumber":298,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":299,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":300,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":301,"author":{"gitId":"sanjevi13"},"content":"     * Inputs a new Deadline object into the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":302,"author":{"gitId":"sanjevi13"},"content":"     * @param s The description of the deadline.","lastModifiedDate":"2023-01-30"},{"lineNumber":303,"author":{"gitId":"sanjevi13"},"content":"     * @param d The date of the deadline.","lastModifiedDate":"2023-01-30"},{"lineNumber":304,"author":{"gitId":"sanjevi13"},"content":"     * @return the UI message when a task is added","lastModifiedDate":"2023-02-15"},{"lineNumber":305,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":306,"author":{"gitId":"sanjevi13"},"content":"    public String inputDeadline(String s, LocalDate d) {","lastModifiedDate":"2023-02-10"},{"lineNumber":307,"author":{"gitId":"sanjevi13"},"content":"        Deadline deadline \u003d new Deadline(s, d);","lastModifiedDate":"2023-01-28"},{"lineNumber":308,"author":{"gitId":"sanjevi13"},"content":"        taskList.add(deadline);","lastModifiedDate":"2023-01-28"},{"lineNumber":309,"author":{"gitId":"sanjevi13"},"content":"        return ui.addedTaskMessage(deadline, taskList.numberOfTasks());","lastModifiedDate":"2023-02-10"},{"lineNumber":310,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":311,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":312,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":313,"author":{"gitId":"sanjevi13"},"content":"     * Inputs a new Todo object into the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":314,"author":{"gitId":"sanjevi13"},"content":"     * @param s The description of the todo task.","lastModifiedDate":"2023-01-30"},{"lineNumber":315,"author":{"gitId":"sanjevi13"},"content":"     * @return the UI message when a task is added","lastModifiedDate":"2023-02-15"},{"lineNumber":316,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":317,"author":{"gitId":"sanjevi13"},"content":"    public String inputTodo(String s) {","lastModifiedDate":"2023-02-10"},{"lineNumber":318,"author":{"gitId":"sanjevi13"},"content":"        Todo todo \u003d new Todo(s);","lastModifiedDate":"2023-01-28"},{"lineNumber":319,"author":{"gitId":"sanjevi13"},"content":"        taskList.add(todo);","lastModifiedDate":"2023-01-28"},{"lineNumber":320,"author":{"gitId":"sanjevi13"},"content":"        return ui.addedTaskMessage(todo, taskList.numberOfTasks());","lastModifiedDate":"2023-02-10"},{"lineNumber":321,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":322,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"sanjevi13":322}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates a store that stores a file containing the list of tasks.","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"public class Storage {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"    private File file;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"     * Creates a new Storage object.","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"     * @param filepath The path of the file to be created to store the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    Storage(String filepath) {","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"        this.file \u003d new File(filepath);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"     * Stores the current TaskList into a file","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"     * @param list The TaskList object containing an ArrayList of Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException Throws a DukeException","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"    public void save(TaskList list) throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"            for (int i \u003d 1; i \u003c\u003d list.numberOfTasks(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"                temp.add(list.getTask(i).sendOutputToFile());","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"            fw.write(String.join(\"\\n\", temp));","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"            fw.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"Error when adding file\");","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"     * Loads Tasks from the saved text file to return the ArrayList of Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"     * @return The ArrayList of tasks from the peviously saved text file","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException Throws a DukeException","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"                file.getParentFile().mkdir();","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"                String[] curr \u003d scanner.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"                String taskType \u003d curr[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"                Task task;","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"                switch (taskType) {","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"                case \"E\":","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"                    task \u003d new Event(curr[2], curr[3]);","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"                    handleTask(task, curr);","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"                    tasks.add(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"sanjevi13"},"content":"                case \"D\":","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"sanjevi13"},"content":"                    LocalDate temp \u003d LocalDate.parse(curr[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"sanjevi13"},"content":"                    task \u003d new Deadline(curr[2], temp);","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"sanjevi13"},"content":"                    handleTask(task, curr);","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"sanjevi13"},"content":"                    tasks.add(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"sanjevi13"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"sanjevi13"},"content":"                case \"T\":","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"sanjevi13"},"content":"                    task \u003d new Todo(curr[2]);","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"sanjevi13"},"content":"                    handleTask(task, curr);","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"sanjevi13"},"content":"                    tasks.add(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"sanjevi13"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"sanjevi13"},"content":"                default:","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"sanjevi13"},"content":"                    throw new DukeException(\"Error: Wrong task encountered\");","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"sanjevi13"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"sanjevi13"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"sanjevi13"},"content":"            scanner.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"sanjevi13"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"Exception has occurred\");","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"sanjevi13"},"content":"        return tasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":87,"author":{"gitId":"sanjevi13"},"content":"    void handleTask(Task t, String[] parsedString) {","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"sanjevi13"},"content":"        if (Integer.parseInt(parsedString[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-02-13"},{"lineNumber":89,"author":{"gitId":"sanjevi13"},"content":"            t.markAsDone();","lastModifiedDate":"2023-02-13"},{"lineNumber":90,"author":{"gitId":"sanjevi13"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":91,"author":{"gitId":"sanjevi13"},"content":"            t.markAsNotDone();","lastModifiedDate":"2023-02-13"},{"lineNumber":92,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"sanjevi13":94}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates the tasks as objects to be added to a list.","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"public class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"    protected String description;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"     * Creates a Task object","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"     * Marks the task as done","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"     * Marks the task as incomplete.","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"     * Creates a string format of the task reflecting its completion status.","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"     * @return The string format of the task to be added to the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"        return isDone ? \"[X] \" + description : \"[ ] \" + description;","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"     * Creates a string format of the task to be output to the text file.","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"     * @return The string format of the task to be used in the text file.","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"    public String sendOutputToFile() {","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"        return String.format(\"Task | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"sanjevi13":50}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates a TaskList that stores the tasks in an ArrayList.","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"public class TaskList {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"     * Creates a TaskList object with an ArrayList of tasks.","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"     * @param tasks The ArrayList of Task objects.","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"    TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"     * Creates a TaskList object with an empty ArrayList","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    TaskList() {","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"     * Gets the list of tasks.","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"     * @return The ArrayList of Task objects.","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"        return this.tasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"     * Gets a specific task from the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"     * @param taskNumber The number of the task in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"     * @return The specified Task object from the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"    Task getTask(int taskNumber) {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"        assert taskNumber \u003e 1 \u0026\u0026 taskNumber \u003c numberOfTasks(): \"Invalid task number\";","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"        return tasks.get(taskNumber - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"     * Returns an integer representing the number of tasks the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"     * @return The size of the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"    int numberOfTasks() {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"     * Modifies a Task object in a list to show that it is done.","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"     * @param taskNumber The number of the task in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException Throws a DukeException if the task number is invalid.","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"    void markTaskAsDone(int taskNumber) throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e numberOfTasks()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"OOPS!!! Invalid task number. Please try again.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"        tasks.get(taskNumber - 1).markAsDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"sanjevi13"},"content":"     * Modifies a Task object in the list to show that it is incomplete.","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"sanjevi13"},"content":"     * @param taskNumber The number of the task in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException Throws a DukeException if the task number is invalid.","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"sanjevi13"},"content":"    void markTaskAsIncomplete(int taskNumber) throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"sanjevi13"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e numberOfTasks()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"OOPS!!! Invalid task number. Please try again.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"sanjevi13"},"content":"        tasks.get(taskNumber - 1).markAsNotDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"sanjevi13"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"sanjevi13"},"content":"     * @param t The task to be added to the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"sanjevi13"},"content":"    void add(Task t) {","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"sanjevi13"},"content":"        tasks.add(t);","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"sanjevi13"},"content":"     * Deletes a task from the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"sanjevi13"},"content":"     * @param taskNumber The number of the task to be deleted from the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"sanjevi13"},"content":"     * @throws DukeException Throws a DukeException if the task number is invalid.","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"sanjevi13"},"content":"    public Task deleteTaskFromList(int taskNumber) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"sanjevi13"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e numberOfTasks()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"sanjevi13"},"content":"            throw new DukeException(\"OOPS!!! Invalid task number. Please try again.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"sanjevi13"},"content":"        return tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"sanjevi13":95}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates a Todo as a specific type of Task.","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"     * Creates a Todo object.","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"     * @param description The description of the Todo task.","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"     * Returns the string representation of the Todo task in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"     * @return The string representation of the Todo task.","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"     * Returns the string representation of the Todo task that is saved in a file.","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"     * @return The string representation of the Todo task that is stored in a text file.","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    public String sendOutputToFile() {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"sanjevi13":33}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":" * Encapsulates the messages seen in the User Interface.","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"     * Creates a new UI object.","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"    Ui() {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"     * Returns the user input.","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"     * @return The string format of the scanned user input.","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    String readInput() {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"     * Closes the scanner.","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"    void close() {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"        scanner.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"     * Prints a formatted message.","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"     * @param s The string input to be printed.","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"     * @return The formatted message in string format.","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"    public String printMessage(String s) {","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"        return (\"\\t\" + s);","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"     * Prints a greeting message to the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"     * @return the greeting message in String format.","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"    public String greetingMessage() {","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"        return printMessage(\"Hello! I\u0027m Duke\\n\\tWhat can I do for you?\");","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"     * Prints a goodbye message to the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"     * @return The goodbye message in String format.","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"    public String goodbyeMessage() {","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"        return printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"     * Prints a formatted message showing that a task has been added to the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"     * @param t The Task object to be added to the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"     * @param size The size of the list after adding the new Task.","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"     * @return The message that tells user that a task has been added.","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"    public String addedTaskMessage(Task t, int size) {","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"sanjevi13"},"content":"        String s1 \u003d (\"\\tYeah boi... You have a new task:\");","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"sanjevi13"},"content":"        String s2 \u003d (\"\\n\\t\" + t);","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"sanjevi13"},"content":"        String s3 \u003d (\"\\n\\tNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-02-10"},{"lineNumber":68,"author":{"gitId":"sanjevi13"},"content":"        return s1 + s2 + s3;","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"sanjevi13"},"content":"     * Prints a formatted message showing that a task has been deleted from the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"sanjevi13"},"content":"     * @param t The Task object to be deleted from the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"sanjevi13"},"content":"     * @param size The size of the list after the task has been deleted.","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"sanjevi13"},"content":"     * @return the message in string format that shows the deleted task and the number of tasks left.","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"sanjevi13"},"content":"    public String deletedTaskMessage(Task t, int size) {","lastModifiedDate":"2023-02-10"},{"lineNumber":78,"author":{"gitId":"sanjevi13"},"content":"        String s1 \u003d (\"\\tNoted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-02-10"},{"lineNumber":79,"author":{"gitId":"sanjevi13"},"content":"        String s2 \u003d (\"\\n\\t\" + t);","lastModifiedDate":"2023-02-10"},{"lineNumber":80,"author":{"gitId":"sanjevi13"},"content":"        String s3 \u003d (\"\\n\\tNow you have \" + size + \" tasks in the list\");","lastModifiedDate":"2023-02-10"},{"lineNumber":81,"author":{"gitId":"sanjevi13"},"content":"        return s1 + s2 + s3;","lastModifiedDate":"2023-02-10"},{"lineNumber":82,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":85,"author":{"gitId":"sanjevi13"},"content":"     * Prints a formatted message to aid users who are not sure how to use the bot.","lastModifiedDate":"2023-02-14"},{"lineNumber":86,"author":{"gitId":"sanjevi13"},"content":"     * @return the help message to the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":87,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":88,"author":{"gitId":"sanjevi13"},"content":"    public String helpMessage() {","lastModifiedDate":"2023-02-14"},{"lineNumber":89,"author":{"gitId":"sanjevi13"},"content":"        String intro \u003d \"\\tI am here to help you manage your tasks!\";","lastModifiedDate":"2023-02-14"},{"lineNumber":90,"author":{"gitId":"sanjevi13"},"content":"        String body \u003d \"\\n\\tIf you have any events, deadlines or tasks to do, \\n\\tadd them here!\";","lastModifiedDate":"2023-02-14"},{"lineNumber":91,"author":{"gitId":"sanjevi13"},"content":"        String conclusion \u003d \"\\n\\tTo see the list of commands, type in: cmd\";","lastModifiedDate":"2023-02-14"},{"lineNumber":92,"author":{"gitId":"sanjevi13"},"content":"        return intro + body + conclusion;","lastModifiedDate":"2023-02-14"},{"lineNumber":93,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":94,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":95,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":96,"author":{"gitId":"sanjevi13"},"content":"     * Shows a list of commands for the user to use.","lastModifiedDate":"2023-02-14"},{"lineNumber":97,"author":{"gitId":"sanjevi13"},"content":"     * @return The formatted list of commands","lastModifiedDate":"2023-02-14"},{"lineNumber":98,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":99,"author":{"gitId":"sanjevi13"},"content":"    public String commandsList() {","lastModifiedDate":"2023-02-14"},{"lineNumber":100,"author":{"gitId":"sanjevi13"},"content":"        String intro \u003d \"\\tBelow is a list of commands for you to use!\";","lastModifiedDate":"2023-02-14"},{"lineNumber":101,"author":{"gitId":"sanjevi13"},"content":"        String list \u003d \"\\n\\t1. To see your LIST, use command: \u0027list\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":102,"author":{"gitId":"sanjevi13"},"content":"        String task1 \u003d \"\\n\\n\\t2. To add a general TODO task, use command:\\n\\t\u0027todo \u003cdescription\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":103,"author":{"gitId":"sanjevi13"},"content":"        String task2 \u003d \"\\n\\n\\t3. To add an EVENT, use command:\\n\\t\u0027event \u003cdescription\u003e /at \u003cplace and description\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":104,"author":{"gitId":"sanjevi13"},"content":"        String task3 \u003d \"\\n\\n\\t4. To add a DEADLINE, use command:\\n\\t\u0027deadline \u003cdescription\u003e /by \u003cdue date\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":105,"author":{"gitId":"sanjevi13"},"content":"        String deadline \u003d \"\\n\\tNOTE: Your due date should be in the format: \\n\\tDD/MM/YYYY\";","lastModifiedDate":"2023-02-14"},{"lineNumber":106,"author":{"gitId":"sanjevi13"},"content":"        String delete \u003d \"\\n\\n\\t5. To DELETE a task, use command:\\n\\t\u0027delete \u003cTask number in the list\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":107,"author":{"gitId":"sanjevi13"},"content":"        String mark \u003d \"\\n\\n\\t6. To MARK a task as done, use command:\\n\\t\u0027mark \u003cTask number in the list\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":108,"author":{"gitId":"sanjevi13"},"content":"        String unmark \u003d \"\\n\\n\\t7. To UNMARK a task as not done, use command:\\n\\t\u0027unmark \u003cTask number in the list\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":109,"author":{"gitId":"sanjevi13"},"content":"        String find \u003d \"\\n\\n\\t8. To SEARCH for certain tasks in the list, use \\n\\tcommand:\\n\\t\u0027find \u003ckeyword\u003e\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":110,"author":{"gitId":"sanjevi13"},"content":"        String bye \u003d \"\\n\\n\\t9. To CLOSE the application, use command: \u0027bye\u0027\";","lastModifiedDate":"2023-02-14"},{"lineNumber":111,"author":{"gitId":"sanjevi13"},"content":"        String totalList \u003d intro + list + task1 + task2 + task3 + deadline + delete + mark + unmark + find + bye;","lastModifiedDate":"2023-02-14"},{"lineNumber":112,"author":{"gitId":"sanjevi13"},"content":"        return totalList;","lastModifiedDate":"2023-02-14"},{"lineNumber":113,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":114,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":115,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"sanjevi13"},"content":"     * Prints a message that is displayed if there are any matching tasks to the query.","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"sanjevi13"},"content":"     * @return the message that is seen before printing found tasks.","lastModifiedDate":"2023-02-12"},{"lineNumber":118,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"sanjevi13"},"content":"    public String findTasksMessage() {","lastModifiedDate":"2023-02-10"},{"lineNumber":120,"author":{"gitId":"sanjevi13"},"content":"       return (\"\\tAre you looking for one of these?\");","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":123,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"sanjevi13"},"content":"     * Prints the tasks found using the query function.","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"sanjevi13"},"content":"     * @param taskList The TaskList object containing the ArrayList of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":126,"author":{"gitId":"sanjevi13"},"content":"     * @param taskNumbers The Integer ArrayList containing the task numbers to retrieve from the TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"sanjevi13"},"content":"     * @return the String notation of the tasks in the StringBuilder","lastModifiedDate":"2023-02-12"},{"lineNumber":128,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"sanjevi13"},"content":"    public String printFoundTasks(TaskList taskList, ArrayList\u003cInteger\u003e taskNumbers) {","lastModifiedDate":"2023-02-10"},{"lineNumber":130,"author":{"gitId":"sanjevi13"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-10"},{"lineNumber":131,"author":{"gitId":"sanjevi13"},"content":"        for (int j \u003d 0; j \u003c taskNumbers.size(); j++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":132,"author":{"gitId":"sanjevi13"},"content":"            int tempTaskNumber \u003d taskNumbers.get(j);","lastModifiedDate":"2023-01-30"},{"lineNumber":133,"author":{"gitId":"sanjevi13"},"content":"            Task tempTask \u003d taskList.getTask(tempTaskNumber);","lastModifiedDate":"2023-01-30"},{"lineNumber":134,"author":{"gitId":"sanjevi13"},"content":"            sb.append(String.format(\"\\n\\t%d. %s\", tempTaskNumber, tempTask));","lastModifiedDate":"2023-02-13"},{"lineNumber":135,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":136,"author":{"gitId":"sanjevi13"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-10"},{"lineNumber":137,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":138,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":139,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":140,"author":{"gitId":"sanjevi13"},"content":"     * Prints a message to confirm that the task has been marked as done.","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"sanjevi13"},"content":"     * @param t The Task object to be marked as done.","lastModifiedDate":"2023-01-30"},{"lineNumber":142,"author":{"gitId":"sanjevi13"},"content":"     * @return the message in String format that shows the task modified","lastModifiedDate":"2023-02-12"},{"lineNumber":143,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":144,"author":{"gitId":"sanjevi13"},"content":"    public String markTaskAsDoneMessage(Task t) {","lastModifiedDate":"2023-02-10"},{"lineNumber":145,"author":{"gitId":"sanjevi13"},"content":"        return printMessage(\"Good job! You have completed this task:\\n\\t\" + t);","lastModifiedDate":"2023-02-15"},{"lineNumber":146,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":149,"author":{"gitId":"sanjevi13"},"content":"     * Prints a message to confirm that the task has been marked as incomplete.","lastModifiedDate":"2023-01-30"},{"lineNumber":150,"author":{"gitId":"sanjevi13"},"content":"     * @param t The Task object to be marked as incomplete.","lastModifiedDate":"2023-01-30"},{"lineNumber":151,"author":{"gitId":"sanjevi13"},"content":"     * @return the message in String format that shows the task modified","lastModifiedDate":"2023-02-12"},{"lineNumber":152,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":153,"author":{"gitId":"sanjevi13"},"content":"    public String markTaskAsIncompleteMessage(Task t) {","lastModifiedDate":"2023-02-10"},{"lineNumber":154,"author":{"gitId":"sanjevi13"},"content":"        return printMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\\t\" + t);","lastModifiedDate":"2023-02-10"},{"lineNumber":155,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":159,"author":{"gitId":"sanjevi13"},"content":"     * Prints the content of ArrayList of Task objects.","lastModifiedDate":"2023-01-30"},{"lineNumber":160,"author":{"gitId":"sanjevi13"},"content":"     * @param tasks The ArrayList of Tasks to be printed.","lastModifiedDate":"2023-01-30"},{"lineNumber":161,"author":{"gitId":"sanjevi13"},"content":"     * @return the String format of the StringBuilder containing the tasks in the list.","lastModifiedDate":"2023-02-12"},{"lineNumber":162,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"sanjevi13"},"content":"    public String printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-10"},{"lineNumber":164,"author":{"gitId":"sanjevi13"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-10"},{"lineNumber":165,"author":{"gitId":"sanjevi13"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":166,"author":{"gitId":"sanjevi13"},"content":"            int taskNumber \u003d i + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"sanjevi13"},"content":"           sb.append(String.format(\"\\t%d. %s\\n\", taskNumber, tasks.get(i)));","lastModifiedDate":"2023-02-10"},{"lineNumber":168,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"sanjevi13"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-10"},{"lineNumber":170,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"sanjevi13":171}},{"path":"src/main/java/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package gui;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"    private void flip() {","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-10"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"        db.flip();","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"        return db;","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sanjevi13":64}},{"path":"src/main/java/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package gui;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import gui.Main;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"public class Launcher {","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sanjevi13":13}},{"path":"src/main/java/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package gui;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    @Override","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().sendGreeting();","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"            stage.show();","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sanjevi13":33}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package gui;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"/**","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":" */","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"sanjevi13"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"sanjevi13"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"sanjevi13"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userImage.png\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"sanjevi13"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeImage.png\"));","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"sanjevi13"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"sanjevi13"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"sanjevi13"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"sanjevi13"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"sanjevi13"},"content":"    public void sendGreeting() {","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"sanjevi13"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getGreeting(), dukeImage));","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"sanjevi13"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"sanjevi13"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"sanjevi13"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-10"},{"lineNumber":49,"author":{"gitId":"sanjevi13"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"sanjevi13"},"content":"    @FXML","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"sanjevi13"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"sanjevi13"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"sanjevi13"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-10"},{"lineNumber":54,"author":{"gitId":"sanjevi13"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"sanjevi13"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"sanjevi13"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-10"},{"lineNumber":57,"author":{"gitId":"sanjevi13"},"content":"        );","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"sanjevi13"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"sanjevi13"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"sanjevi13"},"content":"            // Adapted from https://stackoverflow.com/questions/30543619/how-to-use-pausetransition-method-in-javafx","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"sanjevi13"},"content":"            PauseTransition exitPause \u003d new PauseTransition(Duration.seconds(3));","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"sanjevi13"},"content":"            exitPause.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"sanjevi13"},"content":"            exitPause.play();","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"sanjevi13"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sanjevi13":66}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#4114d7\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sanjevi13":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"            fx:controller\u003d\"gui.MainWindow\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\"","lastModifiedDate":"2023-02-10"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"                    prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-10"}],"authorContributionMap":{"sanjevi13":24}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"    public void test() {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"        LocalDate date1 \u003d LocalDate.parse(\"13/01/2023\", DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"        Deadline deadline1 \u003d new Deadline(\"homework\", date1);","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[D][ ] homework (by: Jan 13 2023)\", deadline1.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"        LocalDate date2 \u003d LocalDate.parse(\"19/01/2023\", DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"        Deadline deadline2 \u003d new Deadline(\"submission\", date2);","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"        deadline2.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[D][X] submission (by: Jan 19 2023)\", deadline2.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"sanjevi13"},"content":"        Deadline deadline3 \u003d new Deadline(\"\", date2);","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[D][ ]  (by: Jan 19 2023)\", deadline3.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"sanjevi13":25}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"public class EventTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"    public void test() {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"        Event event1 \u003d new Event(\"party\", \"Saturday 2-9pm\");","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"        event1.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[E][X] party (at: Saturday 2-9pm)\", event1.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"        Event event2 \u003d new Event(\"reunion\", \"Sunday 3-7pm\");","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[E][ ] reunion (at: Sunday 3-7pm)\", event2.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"        Event event3 \u003d new Event(\"\", \"Monday 1pm\");","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[E][ ]  (at: Monday 1pm)\", event3.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"sanjevi13":18}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"sanjevi13"},"content":"    public void test() {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"        Todo todo1 \u003d new Todo(\"homework\");","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[T][ ] homework\", todo1.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"sanjevi13"},"content":"        Todo todo2 \u003d new Todo(\"watch lecture recording\");","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"sanjevi13"},"content":"        todo2.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[T][X] watch lecture recording\", todo2.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"sanjevi13"},"content":"        Todo todo3 \u003d new Todo(\"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"        assertEquals(\"[T][ ] \", todo3.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"sanjevi13"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"sanjevi13"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"sanjevi13":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sanjevi13"},"content":"event school trip /from Tues 12pm /to 8pm","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"sanjevi13"},"content":"todo CS2109S Problem Set","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"sanjevi13"},"content":"deadline buy food /by tonight","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"sanjevi13"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"sanjevi13"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"sanjevi13"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"sanjevi13"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"sanjevi13"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"sanjevi13":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"sanjevi13"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sanjevi13"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sanjevi13":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"sanjevi13"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sanjevi13":1,"-":37}}]
