[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shittake":18,"-":41}},{"path":"src/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"3","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"[T][X] yyy","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"[D][X] kdayyy  (by: 2021-12-21)","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"[T][X] skdakda","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"shittake":4}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"    private Label text;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"    public DialogBox(boolean isUser, Label l, ImageView iv) {","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"        text \u003d l;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"        text.setWrapText(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"        if (!isUser) {","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"            setDukeStyle(text);","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"            setUserStyle(text);","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"        displayPicture.setFitWidth(100.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"        displayPicture.setFitHeight(100.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"    //Code modified from https://www.tabnine.com/code/java/methods/javafx.scene.Node/setStyle","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"    private void setDukeStyle(Node... nodes) {","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"        for (Node node : nodes) {","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"            node.setStyle(\"-fx-background-color: lightblue\");","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"    private void setUserStyle(Node... nodes) {","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"        for (Node node : nodes) {","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"            node.setStyle(\"-fx-background-color: yellowgreen\");","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"    private void flip() {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"shittake"},"content":"        return new DialogBox(true, l, iv);","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"shittake"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"shittake"},"content":"        var db \u003d new DialogBox(false, l, iv);","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"shittake"},"content":"        db.flip();","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"shittake"},"content":"        return db;","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"shittake":63}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"import duke.Deadline;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import duke.Event;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"import duke.Parser;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"import duke.Task;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"import duke.Todo;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"    private Scene scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpeg\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpeg\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"    public Duke() {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"        super();","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"    /*","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"        new Duke(\"src/data/duke.txt\").run();","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"shittake"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"shittake"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"shittake"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"shittake"},"content":"        storage \u003d new Storage(\"src/data/duke.txt\");","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"shittake"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"shittake"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"shittake"},"content":"        //Step 1. Setting up required components","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"shittake"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"shittake"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"shittake"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"shittake"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"shittake"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"shittake"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"shittake"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"shittake"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"shittake"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"shittake"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"shittake"},"content":"        stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"shittake"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"shittake"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"shittake"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"shittake"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"shittake"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"shittake"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"shittake"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"shittake"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"shittake"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"shittake"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"shittake"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"shittake"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"shittake"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"shittake"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"shittake"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"shittake"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"shittake"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"shittake"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"shittake"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":110,"author":{"gitId":"shittake"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-02"},{"lineNumber":111,"author":{"gitId":"shittake"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-02-02"},{"lineNumber":112,"author":{"gitId":"shittake"},"content":"            userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":113,"author":{"gitId":"shittake"},"content":"        });","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":115,"author":{"gitId":"shittake"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-02"},{"lineNumber":116,"author":{"gitId":"shittake"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-02-02"},{"lineNumber":117,"author":{"gitId":"shittake"},"content":"            userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"shittake"},"content":"        });","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"shittake"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"shittake"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"shittake"},"content":"                DialogBox.getDukeDialog(ui.introduce(), new ImageView(duke))","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"shittake"},"content":"        );","lastModifiedDate":"2023-02-03"},{"lineNumber":125,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"shittake"},"content":"        //Part 3. Add functionality to handle user input.","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"shittake"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-02"},{"lineNumber":128,"author":{"gitId":"shittake"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"shittake"},"content":"        });","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"shittake"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"shittake"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"shittake"},"content":"        });","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"shittake"},"content":"     * Iteration 1:","lastModifiedDate":"2023-02-02"},{"lineNumber":138,"author":{"gitId":"shittake"},"content":"     * Creates a label with the specified text and adds it to the dialog container.","lastModifiedDate":"2023-02-02"},{"lineNumber":139,"author":{"gitId":"shittake"},"content":"     * @param text String containing text to add","lastModifiedDate":"2023-02-02"},{"lineNumber":140,"author":{"gitId":"shittake"},"content":"     * @return a label with the specified text that has word wrap enabled.","lastModifiedDate":"2023-02-02"},{"lineNumber":141,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":142,"author":{"gitId":"shittake"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2023-02-02"},{"lineNumber":143,"author":{"gitId":"shittake"},"content":"        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2023-02-02"},{"lineNumber":144,"author":{"gitId":"shittake"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2023-02-02"},{"lineNumber":145,"author":{"gitId":"shittake"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":146,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":147,"author":{"gitId":"shittake"},"content":"        return textToAdd;","lastModifiedDate":"2023-02-02"},{"lineNumber":148,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":149,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":150,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":151,"author":{"gitId":"shittake"},"content":"     * Iteration 2:","lastModifiedDate":"2023-02-02"},{"lineNumber":152,"author":{"gitId":"shittake"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-02"},{"lineNumber":153,"author":{"gitId":"shittake"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-02"},{"lineNumber":154,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":155,"author":{"gitId":"shittake"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":156,"author":{"gitId":"shittake"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2023-02-02"},{"lineNumber":157,"author":{"gitId":"shittake"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2023-02-02"},{"lineNumber":158,"author":{"gitId":"shittake"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-02"},{"lineNumber":159,"author":{"gitId":"shittake"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2023-02-02"},{"lineNumber":160,"author":{"gitId":"shittake"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))","lastModifiedDate":"2023-02-02"},{"lineNumber":161,"author":{"gitId":"shittake"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":162,"author":{"gitId":"shittake"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":163,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":164,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":165,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":166,"author":{"gitId":"shittake"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-02-02"},{"lineNumber":167,"author":{"gitId":"shittake"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-02-02"},{"lineNumber":168,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":169,"author":{"gitId":"shittake"},"content":"    private String getResponse(String userInput) {","lastModifiedDate":"2023-02-03"},{"lineNumber":170,"author":{"gitId":"shittake"},"content":"        String response \u003d \"I heard you: \" + userInput + \"\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":171,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":172,"author":{"gitId":"shittake"},"content":"        if (!parser.checkEnd(userInput)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":173,"author":{"gitId":"shittake"},"content":"            if (parser.checkListRequest(userInput)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":174,"author":{"gitId":"shittake"},"content":"                response +\u003d tasks.printContents();","lastModifiedDate":"2023-02-03"},{"lineNumber":175,"author":{"gitId":"shittake"},"content":"            } else if (parser.checkMarkRequest(userInput)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":176,"author":{"gitId":"shittake"},"content":"                String[] terms \u003d userInput.split(\" \");","lastModifiedDate":"2023-01-18"},{"lineNumber":177,"author":{"gitId":"shittake"},"content":"                int itemNo \u003d Integer.parseInt(terms[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":178,"author":{"gitId":"shittake"},"content":"                response +\u003d tasks.markTask(itemNo);","lastModifiedDate":"2023-02-03"},{"lineNumber":179,"author":{"gitId":"shittake"},"content":"            } else if (parser.checkDeleteRequest(userInput)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":180,"author":{"gitId":"shittake"},"content":"                String[] terms \u003d userInput.split(\" \");","lastModifiedDate":"2023-01-18"},{"lineNumber":181,"author":{"gitId":"shittake"},"content":"                int itemNo \u003d Integer.parseInt(terms[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":182,"author":{"gitId":"shittake"},"content":"                response +\u003d tasks.deleteTask(itemNo);","lastModifiedDate":"2023-02-03"},{"lineNumber":183,"author":{"gitId":"shittake"},"content":"            } else if (parser.checkFindRequest(userInput)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":184,"author":{"gitId":"shittake"},"content":"                String toBeFound \u003d userInput.substring(5);","lastModifiedDate":"2023-01-26"},{"lineNumber":185,"author":{"gitId":"shittake"},"content":"                response +\u003d tasks.find(toBeFound);","lastModifiedDate":"2023-02-03"},{"lineNumber":186,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":187,"author":{"gitId":"shittake"},"content":"            else {","lastModifiedDate":"2023-01-26"},{"lineNumber":188,"author":{"gitId":"shittake"},"content":"                String[] terms \u003d userInput.split(\" \");","lastModifiedDate":"2023-01-18"},{"lineNumber":189,"author":{"gitId":"shittake"},"content":"                if (terms[0].equals(\"todo\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":190,"author":{"gitId":"shittake"},"content":"                    try {","lastModifiedDate":"2023-01-18"},{"lineNumber":191,"author":{"gitId":"shittake"},"content":"                        if (terms.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-18"},{"lineNumber":192,"author":{"gitId":"shittake"},"content":"                            String error \u003d \"The description of a todo cannot be empty\";","lastModifiedDate":"2023-01-18"},{"lineNumber":193,"author":{"gitId":"shittake"},"content":"                            throw new DukeException(error);","lastModifiedDate":"2023-01-18"},{"lineNumber":194,"author":{"gitId":"shittake"},"content":"                        } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":195,"author":{"gitId":"shittake"},"content":"                            Task newTask \u003d new Todo(userInput.substring(5));","lastModifiedDate":"2023-01-26"},{"lineNumber":196,"author":{"gitId":"shittake"},"content":"                            response +\u003d tasks.addTask(newTask);","lastModifiedDate":"2023-02-03"},{"lineNumber":197,"author":{"gitId":"shittake"},"content":"                        }","lastModifiedDate":"2023-02-03"},{"lineNumber":198,"author":{"gitId":"shittake"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-01-18"},{"lineNumber":199,"author":{"gitId":"shittake"},"content":"                        response +\u003d (err + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":200,"author":{"gitId":"shittake"},"content":"                    }","lastModifiedDate":"2023-01-18"},{"lineNumber":201,"author":{"gitId":"shittake"},"content":"                } else if (terms[0].equals(\"deadline\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":202,"author":{"gitId":"shittake"},"content":"                    String[] splitBySlash \u003d userInput.split(\"/\");","lastModifiedDate":"2023-01-18"},{"lineNumber":203,"author":{"gitId":"shittake"},"content":"                    try {","lastModifiedDate":"2023-01-18"},{"lineNumber":204,"author":{"gitId":"shittake"},"content":"                        if (splitBySlash.length !\u003d 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":205,"author":{"gitId":"shittake"},"content":"                            throw new DukeException(\"Wrong format for deadline Task\");","lastModifiedDate":"2023-01-18"},{"lineNumber":206,"author":{"gitId":"shittake"},"content":"                        }","lastModifiedDate":"2023-01-18"},{"lineNumber":207,"author":{"gitId":"shittake"},"content":"                        String description \u003d splitBySlash[0].substring(9);","lastModifiedDate":"2023-01-18"},{"lineNumber":208,"author":{"gitId":"shittake"},"content":"                        String by \u003d splitBySlash[1].substring(3);","lastModifiedDate":"2023-01-18"},{"lineNumber":209,"author":{"gitId":"shittake"},"content":"                        Task newTask \u003d new Deadline(description, by);","lastModifiedDate":"2023-01-26"},{"lineNumber":210,"author":{"gitId":"shittake"},"content":"                        response +\u003d tasks.addTask(newTask);","lastModifiedDate":"2023-02-03"},{"lineNumber":211,"author":{"gitId":"shittake"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-01-18"},{"lineNumber":212,"author":{"gitId":"shittake"},"content":"                        response +\u003d (err + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":213,"author":{"gitId":"shittake"},"content":"                    }","lastModifiedDate":"2023-01-18"},{"lineNumber":214,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":215,"author":{"gitId":"shittake"},"content":"                } else if (terms[0].equals(\"event\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":216,"author":{"gitId":"shittake"},"content":"                    String[] splitBySlash \u003d userInput.split(\"/\");","lastModifiedDate":"2023-01-18"},{"lineNumber":217,"author":{"gitId":"shittake"},"content":"                    try {","lastModifiedDate":"2023-01-18"},{"lineNumber":218,"author":{"gitId":"shittake"},"content":"                        if (splitBySlash.length !\u003d 3) {","lastModifiedDate":"2023-01-18"},{"lineNumber":219,"author":{"gitId":"shittake"},"content":"                            throw new DukeException(\"Wrong format for event Task\");","lastModifiedDate":"2023-01-18"},{"lineNumber":220,"author":{"gitId":"shittake"},"content":"                        }","lastModifiedDate":"2023-01-18"},{"lineNumber":221,"author":{"gitId":"shittake"},"content":"                        String description \u003d splitBySlash[0].substring(6);","lastModifiedDate":"2023-01-18"},{"lineNumber":222,"author":{"gitId":"shittake"},"content":"                        String from \u003d splitBySlash[1].substring(5);","lastModifiedDate":"2023-01-18"},{"lineNumber":223,"author":{"gitId":"shittake"},"content":"                        String to \u003d splitBySlash[2].substring(3);","lastModifiedDate":"2023-01-18"},{"lineNumber":224,"author":{"gitId":"shittake"},"content":"                        Task newTask \u003d new Event(description, from, to);","lastModifiedDate":"2023-01-26"},{"lineNumber":225,"author":{"gitId":"shittake"},"content":"                        response +\u003d tasks.addTask(newTask);","lastModifiedDate":"2023-02-03"},{"lineNumber":226,"author":{"gitId":"shittake"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-01-18"},{"lineNumber":227,"author":{"gitId":"shittake"},"content":"                        response +\u003d (err + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":228,"author":{"gitId":"shittake"},"content":"                    }","lastModifiedDate":"2023-01-18"},{"lineNumber":229,"author":{"gitId":"shittake"},"content":"                } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":230,"author":{"gitId":"shittake"},"content":"                    try {","lastModifiedDate":"2023-01-18"},{"lineNumber":231,"author":{"gitId":"shittake"},"content":"                        throw new DukeException(\"I don\u0027t know what that means.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":232,"author":{"gitId":"shittake"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-01-18"},{"lineNumber":233,"author":{"gitId":"shittake"},"content":"                        response +\u003d (err + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":234,"author":{"gitId":"shittake"},"content":"                    }","lastModifiedDate":"2023-01-18"},{"lineNumber":235,"author":{"gitId":"shittake"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":236,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":237,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":238,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":239,"author":{"gitId":"shittake"},"content":"            storage.addToFile(tasks);","lastModifiedDate":"2023-01-25"},{"lineNumber":240,"author":{"gitId":"shittake"},"content":"            response +\u003d ui.terminate();","lastModifiedDate":"2023-02-03"},{"lineNumber":241,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":242,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":243,"author":{"gitId":"shittake"},"content":"        return response;","lastModifiedDate":"2023-02-03"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"shittake":242,"-":3}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"public class Launcher {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"shittake":10}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of a Deadline instance in MMM d yyyy format.","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of a Deadline instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"        String dateFormat \u003d by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateFormat + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of a Deadline instance in YYYY-MM-DD format.","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of a Deadline instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    public String parse() {","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"        return \"[D]\" + super.parse() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"shittake":32}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"        super(\":( Sorry! \" + errorMessage +\". Please try again.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"shittake":8}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"    protected String from;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"    protected String to;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of an Event instance with the \"from\" and \"to\" periods.","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of an Event instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of an Event instance with the \"from\" and \"to\" periods.","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of an Event instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"    public String parse() {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"        return \"[E]\" + super.parse() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"shittake":30}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"public class Parser {","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"     * Checks if the user wants to terminate the chatbot.","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"     * @param userInput the input keyed in by the user.","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"     * @return true if the user keyed in \"bye\" or false otherwise.","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"    public boolean checkEnd(String userInput) {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"        if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"            return true;","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"            return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"     * Checks if the user wants to see his/her list of tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"     * @param userInput the input keyed in by the user.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"     * @return true if the user keyed in \"list\" or false otherwise.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"    public boolean checkListRequest(String userInput) {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"        if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"            return true;","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"            return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"     * Checks if the user wants to mark his/her task.","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"     * @param userInput the input keyed in by the user.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"     * @return true if the user keyed in \"mark X\" where X is an integer, or false otherwise.","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"    public boolean checkMarkRequest(String userInput) {","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"        String[] terms \u003d userInput.split(\" \");","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"        if (terms[0].equals(\"mark\") \u0026\u0026 terms.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"            boolean isNumber \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c terms[1].length(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"                if (!Character.isDigit(terms[1].charAt(i))) {","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"                    isNumber \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"            return isNumber;","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"            return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"     * Checks if the user wishes to delete a task.","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"shittake"},"content":"     * @param userInput the input keyed in by the user.","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"     * @return true if the user keyed in \"delete X\" where X is an integer, or false otherwise.","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"shittake"},"content":"    public boolean checkDeleteRequest(String userInput) {","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"shittake"},"content":"        String[] terms \u003d userInput.split(\" \");","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"shittake"},"content":"        if (terms[0].equals(\"delete\") \u0026\u0026 terms.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"shittake"},"content":"            boolean isNumber \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c terms[1].length(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"shittake"},"content":"                if (!Character.isDigit(terms[1].charAt(i))) {","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"shittake"},"content":"                    isNumber \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"shittake"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"shittake"},"content":"            return isNumber;","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"shittake"},"content":"            return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"shittake"},"content":"    public boolean checkFindRequest(String userInput) {","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"shittake"},"content":"        String[] terms \u003d userInput.split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"shittake"},"content":"        if (terms[0].equals(\"find\") \u0026\u0026 terms.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"shittake"},"content":"            return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"shittake"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"shittake":78}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import java.nio.file.FileAlreadyExistsException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"public class Storage {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"    protected String filePath;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"     * Checks if the file in the given filePath exists.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"     * @return true if the file exists, or false otherwise.","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"    public boolean isExistFile() {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"        return new java.io.File(filePath).exists();","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"    // Idea for the following code snippet to create a file is referenced from:","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"    // https://stackoverflow.com/questions/6142901/how-to-create-a-file-in-a-directory-in-java","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"     * Returns the desired File in the filePath.","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"     * If there was originally no File, a new empty File with a \"0\" is created.","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"     * Otherwise, the previously saved File at that filePath is returned.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"     * @return the desired File in the filePath.","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"    public File load() {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"        // Idea for the following code snippet to create a file is referenced from:","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"        // https://stackoverflow.com/questions/6142901/how-to-create-a-file-in-a-directory-in-java","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"        if (!isExistFile()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"            Path desiredPath \u003d Paths.get(filePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"                Files.createDirectories(desiredPath.getParent());","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"            } catch (IOException err) {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"                System.out.println(err);","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"                Files.createFile(desiredPath);","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"            } catch (FileAlreadyExistsException err) {","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"                System.err.println(\"already exists: \" + err.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"            } catch (IOException err) {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"shittake"},"content":"                System.out.println(err);","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"shittake"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"shittake"},"content":"                Files.write(Paths.get(filePath), \"0\".getBytes());","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"shittake"},"content":"            } catch (IOException err) {","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"shittake"},"content":"                System.out.println(err);","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"shittake"},"content":"            File createdFile \u003d new File(filePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"shittake"},"content":"            return createdFile;","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"shittake"},"content":"            File savedFile \u003d new File(filePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"shittake"},"content":"            return savedFile;","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"shittake"},"content":"     * Adds and saves the user\u0027s tasks into the File at the filePath.","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"shittake"},"content":"     * @param tasks the user\u0027s list of tasks before termination of the chatbot.","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"shittake"},"content":"    public void addToFile(TaskList tasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"shittake"},"content":"        // Idea for the following code snippet is taken from:","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"shittake"},"content":"        // https://stackoverflow.com/questions/1053467/how-do-i-save-a-string-to-a-text-file-using-java","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"shittake"},"content":"        ArrayList\u003cTask\u003e lstOfItems \u003d tasks.getTasks();","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"shittake"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"shittake"},"content":"            ArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"shittake"},"content":"            lst.add(String.valueOf(lstOfItems.size()));","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c lstOfItems.size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"shittake"},"content":"                Task current \u003d lstOfItems.get(i);","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"shittake"},"content":"                lst.add(current.parse());","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"shittake"},"content":"            Files.write(Paths.get(filePath), lst);","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"shittake"},"content":"        } catch (IOException err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"shittake"},"content":"            System.out.println(err);","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"shittake":89}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"public class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"    private String name;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"    private boolean isCompleted;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"     * It does not matter whether the task has previously been marked as completed.","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"    public void makeCompleted() {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"        this.isCompleted \u003d true;","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"     * A [ ] indicates an uncompleted task, while a [X] indicates a completed task.","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of the task with its description.","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"        String completedString \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"        if (this.isCompleted) {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"            completedString +\u003d \"[X] \";","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"            completedString +\u003d \"[ ] \";","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"        completedString +\u003d this.name;","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"        return completedString;","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"     * A [ ] indicates an uncompleted task, while a [X] indicates a completed task.","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of the task with its description.","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"    public String parse() {","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"        String completedString \u003d \"\";","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"        if (this.isCompleted) {","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"            completedString +\u003d \"[X] \";","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"            completedString +\u003d \"[ ] \";","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"        completedString +\u003d this.name;","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"shittake"},"content":"        return completedString;","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"shittake"},"content":"    public boolean contains(String keyword) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"shittake"},"content":"        return name.contains(keyword);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"shittake":58}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"public class TaskList {","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"    private ArrayList\u003cTask\u003e lstOfItems;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"    public TaskList(File file) {","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"        this.lstOfItems \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"            Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"            int noOfTasks \u003d Integer.parseInt(fileScanner.nextLine());","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c noOfTasks; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"                String curr \u003d fileScanner.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"                parseTask(curr);","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"            System.out.println(err);","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"        this.lstOfItems \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"     * Parses the previously saved tasks that were keyed in, in the previous iteration.","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"     * @param currentTask the saved task in the File in the filePath.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"    public void parseTask(String currentTask) {","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"        if (currentTask.charAt(1) \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"            task \u003d new Todo(currentTask.substring(7));","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"        } else if (currentTask.charAt(1) \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"            String[] split \u003d currentTask.split(\"by: \");","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"            String description \u003d split[0].substring(7, split[0].length() - 2);","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"            String date \u003d split[1].substring(0, split[1].length() - 1);","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"            task \u003d new Deadline(description, date);","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"            String[] split \u003d currentTask.split(\"from: \");","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"            String description \u003d split[0].substring(7, split[0].length() - 2);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"            String[] dateSplit \u003d split[1].split(\" to: \");","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"            String from \u003d dateSplit[0];","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"            String to \u003d dateSplit[1].substring(0, dateSplit[1].length() - 1);","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"            task \u003d new Event(description, from, to);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"        if (currentTask.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"shittake"},"content":"            task.makeCompleted();","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"        lstOfItems.add(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"shittake"},"content":"     * Prints the contents of the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"shittake"},"content":"     * If the list is empty, print a custom message.","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"shittake"},"content":"     * Otherwise, print out the contents of the list in the order in which they were added.","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"shittake"},"content":"    public String printContents() {","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"shittake"},"content":"        String response \u003d \"Attempting to print out your tasks...\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"shittake"},"content":"        if (lstOfItems.size() \u003d\u003d 0 ) {","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"shittake"},"content":"            response +\u003d (\"Nothing here yet. Add your 1st item!\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c lstOfItems.size(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"shittake"},"content":"                response +\u003d (String.valueOf(i + 1) + \".\");","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"shittake"},"content":"                response +\u003d (lstOfItems.get(i) + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"shittake"},"content":"        return response;","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"shittake"},"content":"     * Returns a string representation of a TaskList instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"shittake"},"content":"     * If there are no tasks, return \"Empty List\".","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"shittake"},"content":"     * Otherwise, return the string representation of all tasks inside in order.","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of a TaskList instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"shittake"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"shittake"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"shittake"},"content":"        if (lstOfItems.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"shittake"},"content":"            return \"Empty List\";","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"shittake"},"content":"            String answer \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c lstOfItems.size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"shittake"},"content":"                answer +\u003d (lstOfItems.get(i).toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"shittake"},"content":"                answer +\u003d \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"shittake"},"content":"            return answer;","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"shittake"},"content":"     * Adds the desired new Task into the TaskList.","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"shittake"},"content":"     * @param newTask the desired new Task that the user wishes to add in.","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"shittake"},"content":"    public String addTask(Task newTask) {","lastModifiedDate":"2023-02-03"},{"lineNumber":100,"author":{"gitId":"shittake"},"content":"        String response \u003d \"Adding new task in progress...\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":101,"author":{"gitId":"shittake"},"content":"        response +\u003d (\"Got it. I have added: \");","lastModifiedDate":"2023-02-03"},{"lineNumber":102,"author":{"gitId":"shittake"},"content":"        response +\u003d (newTask + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":103,"author":{"gitId":"shittake"},"content":"        lstOfItems.add(newTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":104,"author":{"gitId":"shittake"},"content":"        response +\u003d (\"Now you have \" + String.valueOf(lstOfItems.size()));","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"shittake"},"content":"        if (lstOfItems.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-25"},{"lineNumber":106,"author":{"gitId":"shittake"},"content":"            response +\u003d (\" task\");","lastModifiedDate":"2023-02-03"},{"lineNumber":107,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":108,"author":{"gitId":"shittake"},"content":"            response +\u003d (\" tasks\");","lastModifiedDate":"2023-02-03"},{"lineNumber":109,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":110,"author":{"gitId":"shittake"},"content":"        response +\u003d (\" in the list\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":111,"author":{"gitId":"shittake"},"content":"        return response;","lastModifiedDate":"2023-02-03"},{"lineNumber":112,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":113,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":114,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"shittake"},"content":"     * A method stub to test the TaskList class.","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"shittake"},"content":"     * A stub Task with a simple \"Test\" description is added into the list of tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":118,"author":{"gitId":"shittake"},"content":"    public void addTask() {","lastModifiedDate":"2023-01-25"},{"lineNumber":119,"author":{"gitId":"shittake"},"content":"        lstOfItems.add(new Task(\"Test\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":120,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":121,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":122,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"shittake"},"content":"     * Marks a task as completed.","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"shittake"},"content":"     * @param number the task number to be marked as completed.","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":126,"author":{"gitId":"shittake"},"content":"    public String markTask(int number) {","lastModifiedDate":"2023-02-03"},{"lineNumber":127,"author":{"gitId":"shittake"},"content":"        String response \u003d \"Marking task in progress...\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"shittake"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":129,"author":{"gitId":"shittake"},"content":"            if (number \u003e lstOfItems.size()) {","lastModifiedDate":"2023-01-25"},{"lineNumber":130,"author":{"gitId":"shittake"},"content":"                throw new DukeException(\"No such item!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":131,"author":{"gitId":"shittake"},"content":"            } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"shittake"},"content":"                lstOfItems.get(number - 1).makeCompleted();","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"shittake"},"content":"                response +\u003d (\"Ok, I\u0027ve marked this Task as completed: \\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":134,"author":{"gitId":"shittake"},"content":"                response +\u003d (lstOfItems.get(number - 1) + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":135,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":136,"author":{"gitId":"shittake"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":137,"author":{"gitId":"shittake"},"content":"            response +\u003d (err + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":138,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"shittake"},"content":"        return response;","lastModifiedDate":"2023-02-03"},{"lineNumber":140,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":141,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":142,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":143,"author":{"gitId":"shittake"},"content":"     * Deletes a task..","lastModifiedDate":"2023-01-26"},{"lineNumber":144,"author":{"gitId":"shittake"},"content":"     * @param number the task number to be deleted.","lastModifiedDate":"2023-01-26"},{"lineNumber":145,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":146,"author":{"gitId":"shittake"},"content":"    public String deleteTask(int number) {","lastModifiedDate":"2023-02-03"},{"lineNumber":147,"author":{"gitId":"shittake"},"content":"        String response \u003d \"Deleting task in progress...\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":148,"author":{"gitId":"shittake"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":149,"author":{"gitId":"shittake"},"content":"            if (number \u003e lstOfItems.size()) {","lastModifiedDate":"2023-01-25"},{"lineNumber":150,"author":{"gitId":"shittake"},"content":"                throw new DukeException(\"No such item!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":151,"author":{"gitId":"shittake"},"content":"            } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":152,"author":{"gitId":"shittake"},"content":"                response +\u003d (\"Ok, I\u0027ve removed this Task: \\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":153,"author":{"gitId":"shittake"},"content":"                response +\u003d (lstOfItems.get(number - 1) + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":154,"author":{"gitId":"shittake"},"content":"                lstOfItems.remove(number - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":155,"author":{"gitId":"shittake"},"content":"                String remaining \u003d (lstOfItems.size() \u003d\u003d 1) ? \" task\" : \" tasks\";","lastModifiedDate":"2023-01-25"},{"lineNumber":156,"author":{"gitId":"shittake"},"content":"                response +\u003d (\"Now you have \");","lastModifiedDate":"2023-02-03"},{"lineNumber":157,"author":{"gitId":"shittake"},"content":"                response +\u003d (String.valueOf(lstOfItems.size()) + remaining + \" left!\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":158,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":159,"author":{"gitId":"shittake"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2023-01-25"},{"lineNumber":160,"author":{"gitId":"shittake"},"content":"            response +\u003d (err + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":161,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":162,"author":{"gitId":"shittake"},"content":"        return response;","lastModifiedDate":"2023-02-03"},{"lineNumber":163,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":164,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":165,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":166,"author":{"gitId":"shittake"},"content":"     * Returns the list of tasks that are currently present.","lastModifiedDate":"2023-01-26"},{"lineNumber":167,"author":{"gitId":"shittake"},"content":"     * @return the list of tasks currently present.","lastModifiedDate":"2023-01-26"},{"lineNumber":168,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":169,"author":{"gitId":"shittake"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-01-25"},{"lineNumber":170,"author":{"gitId":"shittake"},"content":"        return lstOfItems;","lastModifiedDate":"2023-01-25"},{"lineNumber":171,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":172,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":173,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":174,"author":{"gitId":"shittake"},"content":"     * Returns the number of tasks in the list at the moment.","lastModifiedDate":"2023-01-26"},{"lineNumber":175,"author":{"gitId":"shittake"},"content":"     * @return the number of tasks currently in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":176,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":177,"author":{"gitId":"shittake"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-25"},{"lineNumber":178,"author":{"gitId":"shittake"},"content":"        return lstOfItems.size();","lastModifiedDate":"2023-01-25"},{"lineNumber":179,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":180,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":181,"author":{"gitId":"shittake"},"content":"    public String find(String keyword) {","lastModifiedDate":"2023-02-03"},{"lineNumber":182,"author":{"gitId":"shittake"},"content":"        String response \u003d \"Finding \" + keyword + \" in progress...\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":183,"author":{"gitId":"shittake"},"content":"        int found \u003d 0;","lastModifiedDate":"2023-01-26"},{"lineNumber":184,"author":{"gitId":"shittake"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":185,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":186,"author":{"gitId":"shittake"},"content":"        for (int i \u003d 0; i \u003c getSize(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":187,"author":{"gitId":"shittake"},"content":"            if (lstOfItems.get(i).contains(keyword)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":188,"author":{"gitId":"shittake"},"content":"                found++;","lastModifiedDate":"2023-01-26"},{"lineNumber":189,"author":{"gitId":"shittake"},"content":"                foundTasks.add(lstOfItems.get(i));","lastModifiedDate":"2023-01-26"},{"lineNumber":190,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":191,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":192,"author":{"gitId":"shittake"},"content":"        if (found \u003d\u003d 0) {","lastModifiedDate":"2023-01-26"},{"lineNumber":193,"author":{"gitId":"shittake"},"content":"            response +\u003d (\"Didn\u0027t manage to find any tasks with this keyword!\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":194,"author":{"gitId":"shittake"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":195,"author":{"gitId":"shittake"},"content":"            String descriptor \u003d (found \u003d\u003d 1) ? \" task \" : \" tasks \";","lastModifiedDate":"2023-01-26"},{"lineNumber":196,"author":{"gitId":"shittake"},"content":"            response +\u003d (\"Found \" + String.valueOf(found) + descriptor + \"with this keyword\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":197,"author":{"gitId":"shittake"},"content":"            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":198,"author":{"gitId":"shittake"},"content":"                response +\u003d (String.valueOf(i + 1) + \". \");","lastModifiedDate":"2023-02-03"},{"lineNumber":199,"author":{"gitId":"shittake"},"content":"                response +\u003d (foundTasks.get(i) + \"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":200,"author":{"gitId":"shittake"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":201,"author":{"gitId":"shittake"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":202,"author":{"gitId":"shittake"},"content":"        return response;","lastModifiedDate":"2023-02-03"},{"lineNumber":203,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":204,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"shittake":204}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of a To-do instance with a [T] indicator.","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of a To-do instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"     * Returns the string representation of a To-do instance with a [T] indicator.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"     * @return the desired string representation of a To-do instance.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"    public String parse() {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"        return \"[T]\" + super.parse();","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"shittake":25}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"public class Ui {","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"     * Prints the introduction message when the chatbot is first booted up.","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"    public void introduce(StringBuilder allResponses) {","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"        allResponses.append(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"        allResponses.append(\"Hello! I\u0027m Duke, your friendly chatbot.\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"        allResponses.append(\"What can I do for you?\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"    public Label introduce() {","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"        String introString \u003d \"Hello! I\u0027m Pearl, your friendly chatbot.\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"        introString +\u003d instruct();","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"        return new Label(introString);","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    public String instruct() {","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"        String instructString \u003d \"There are various commands you can instruct me to do.\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"A. If you want to see your list of tasks, type \u0027list\u0027\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"B. If you want to add a task, there are three possible commands:\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"\\t1. Type \u0027todo (name of task)\u0027 to add a todo task.\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"\\t2. Type \u0027deadline (name of task) /by (date in YYYY-MM-DD)\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\" to add a task that is to be done by a certain date.\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"\\t3. Type \u0027event (name of task) /from (date and time) /to \");","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"(date and time) to add in a time-limited event.\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"C. To delete a task, type \u0027delete X\u0027 where X is the task number\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"D. To mark a task as completed, type \u0027mark X\u0027\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"        instructString +\u003d (\"E. To save and exit, type \u0027bye\u0027\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"        return instructString;","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"     * Prints the goodbye message upon termination of the chatbot.","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"    public String terminate() {","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"        return(\"Bye. Hope to see you again!\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"shittake":50}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"    public void emptyListTest(){","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"        TaskList emptyList \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"        assertEquals(emptyList.getSize(), 0);","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"        assertEquals(emptyList.toString(), \"Empty List\");","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"    public void addTaskTest() {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"        TaskList lst \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"        lst.addTask();","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.getSize(), 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.toString(), \"[ ] Test\\n\");","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"        lst.addTask();","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.getSize(), 2);","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.toString(), \"[ ] Test\\n[ ] Test\\n\");","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"shittake"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"shittake"},"content":"    public void deleteTaskTest() {","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"shittake"},"content":"        TaskList lst \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"shittake"},"content":"        lst.addTask();","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"shittake"},"content":"        lst.addTask();","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"shittake"},"content":"        lst.deleteTask(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.getSize(), 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.toString(), \"[ ] Test\\n\");","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"shittake"},"content":"        lst.deleteTask(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.getSize(), 0);","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.toString(), \"Empty List\");","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"shittake"},"content":"        lst.addTask();","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"shittake"},"content":"        lst.addTask();","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"shittake"},"content":"        lst.deleteTask(2);","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.getSize(), 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.toString(), \"[ ] Test\\n\");","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"shittake"},"content":"        lst.deleteTask(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.getSize(), 0);","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"shittake"},"content":"        assertEquals(lst.toString(), \"Empty List\");","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"shittake":54}},{"path":"src/test/java/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"public class TaskTest {","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"    public void notMarkTest() {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"        Task checkTask \u003d new Task(\"Eat\");","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"        assertEquals(checkTask.toString(), \"[ ] Eat\");","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"        assertEquals(checkTask.parse(), \"[ ] Eat\");","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"shittake"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"shittake"},"content":"    public void markTest() {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"shittake"},"content":"        Task checkTask \u003d new Task(\"Eat\");","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"shittake"},"content":"        checkTask.makeCompleted();","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"shittake"},"content":"        assertEquals(checkTask.toString(), \"[X] Eat\");","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"shittake"},"content":"        assertEquals(checkTask.parse(), \"[X] Eat\");","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"shittake"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"shittake"},"content":"}","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"shittake"},"content":"","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"shittake":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"shittake"},"content":"todo play piano","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"shittake"},"content":"event finish tutorial /from 24 Aug 2022 4pm /to 23 Oct 2022 3pm","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"shittake"},"content":"deadline go for a run /by tomorrow if possible","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"shittake"},"content":"mark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"shittake"},"content":"mark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"shittake"},"content":"mark 2","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"shittake"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"shittake"},"content":"bye","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"shittake":14}}]
