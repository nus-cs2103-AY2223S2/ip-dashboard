[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"checkstyle {","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"//javafx {","lastModifiedDate":"2023-02-04"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"//    version \u003d \"17.0.2\"","lastModifiedDate":"2023-02-04"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"//    modules \u003d [ \u0027javafx.base\u0027, \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027 ]","lastModifiedDate":"2023-02-04"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"//}","lastModifiedDate":"2023-02-04"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"slackernoob":26,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"Duke helps you keep track of your tasks.","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"### Add and Delete tasks","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"Add todo, deadline, and event tasks to your list.","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"Delete tasks that do not require keeping track anymore from your list.","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"### List tasks","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"Displays the list of tasks.","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"### Mark and Unmark tasks","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"Mark a task as completed or not completed.","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"### Find task","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"Search and displays tasks by specified keyword.","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"### Sort tasks","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"Displays sorted task list based on chronological date.","lastModifiedDate":"2023-02-18"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"Todo tasks will always be at the top of the list.","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"### `todo` - Add a todo","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"Adds an unmarked todo task to the list.","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"Format: `todo description`","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"- The `description` can contain any string.","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"`todo cs2100 homework`","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"`todo buy cake`","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"### `deadline` - Add a deadline","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"Adds an unmarked deadline task to the list.","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"Format: `todo description /by YYYY-MM-DD`","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"- The `description` can contain any string.","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"`deadline cs2100 homework /by 2023-02-20`","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"`deadline buy a house /by 2026-12-12`","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"### `event` - Add an event","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"Adds an unmarked event task to the list.","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"Format: `event description /from YYYY-MM-DD /to YYYY-MM-DD`","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"- The `description` can contain any string.","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"Example of usage:","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"`event recess week /from 2023-02-20 /to 2023-02-27`","lastModifiedDate":"2023-02-18"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"`event week six /from 2023-02-13 /to 2023-02-19`","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"### `sort` - Sorts the list","lastModifiedDate":"2023-02-18"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"Sorts the list by date, in chronological order.","lastModifiedDate":"2023-02-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":70,"author":{"gitId":"slackernoob"},"content":"Format: `sort`","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":72,"author":{"gitId":"slackernoob"},"content":"Example of usage:","lastModifiedDate":"2023-02-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":74,"author":{"gitId":"slackernoob"},"content":"`sort`","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"slackernoob":51,"-":23}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"[T][ ] hello, [D][X] add book (by: Apr 5 2022)","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"slackernoob":1}},{"path":"src/main/java/duke/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command for bye input to terminate program.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the bye command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public ByeCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the bye command with given task list","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        ui.showGoodbye();","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"     * Executes the Bye command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"        return ui.formatGoodbye();","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"     * Returns whether program should continue","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"     * @return False since bye command terminates program.","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"        return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":54}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command class that is abstract.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"    private String input;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     * Constructs classes that inherits from command class","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"     * @param input User input.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    public Command(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"    public abstract String executeReturnString(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * Returns whether program should terminate, true or false.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"     * @return True or false, if bot should continue running.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        return true;","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    public String getInput() {","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"        return this.input;","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":36}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" * A deadline task.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"    protected String by;","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     * Constructs a deadline task with given description and deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"     * @param description Description of deadline task.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     * @param by Deadline of deadline task.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"        this.byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public int containsDate() {","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        return 1;","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        return this.byDate;","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"        String datePattern \u003d \"MMM d yyyy\";","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"                + byDate.format(DateTimeFormatter.ofPattern(datePattern)) + \")\";","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"slackernoob":40}},{"path":"src/main/java/duke/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command for deadline tasks to be added.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the deadline command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public DeadlineCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the deadline command with given task list,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If task description is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        if (this.getInput().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"                    \"You cant be doing nothing!! Please try again!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"        String[] descSplit \u003d this.getInput().split(\"/\");","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"        Deadline taskDeadline \u003d new Deadline(","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"                descSplit[0].substring(0, descSplit[0].length() - 1),","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"                descSplit[1].substring(3));","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"        taskList.addTask(taskDeadline);","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"        ui.showTaskAdded(taskDeadline);","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"        ui.showNumTasks(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     * Executes the Deadline command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"        if (this.getInput().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"                    \"You cant be doing nothing!! Please try again!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"        String[] descSplit \u003d this.getInput().split(\"/\");","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"        Deadline taskDeadline \u003d new Deadline(","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"                descSplit[0].substring(0, descSplit[0].length() - 1),","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"                descSplit[1].substring(3));","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"        taskList.addTask(taskDeadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"        return ui.formatTaskAdded(taskDeadline, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":68}},{"path":"src/main/java/duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command to delete a task.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the delete command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the delete command with given task list,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        int taskNumber \u003d Integer.parseInt(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        Task removedTask \u003d taskList.deleteTask(taskNumber);","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        ui.showTaskRemoved(removedTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"        ui.showNumTasks(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * Executes the delete command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"        int taskNumber \u003d Integer.parseInt(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"        Task removedTask \u003d taskList.deleteTask(taskNumber);","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"        return ui.formatTaskRemoved(removedTask, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":53}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"    private void flip() {","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"        db.flip();","lastModifiedDate":"2023-02-04"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"        return db;","lastModifiedDate":"2023-02-04"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"slackernoob":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * Class that contains the main method to run the bot.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"public class Duke {","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"     * Constructs Duke object with given file path.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"     * @param filePath String path to file location.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"            this.tasks \u003d new TaskList(storage.readTasksFromFile(ui));","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"            this.tasks \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"     * Runs the bot.","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    public void run() {","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"        boolean canContinue \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"        while (canContinue) {","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"            try {","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"                String userCommandText \u003d ui.getUserCommand();","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"                ui.showLine();","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"                Command c \u003d Parser.parse(userCommandText);","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"                c.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"                canContinue \u003d c.isExit();","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"            } finally {","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"                ui.showLine();","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"     * Given user input, parses it and gets response from","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"     * executing the associated Command. If no such command,","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"     * returns the error message instead.","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"     * @param input User input message.","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"     * @return Response after executing command, or error message.","lastModifiedDate":"2023-02-18"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"            String userCommandText \u003d input;","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"            Command c \u003d Parser.parse(userCommandText);","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"            assert c instanceof Command : \"c should be a Command\";","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"            return c.executeReturnString(this.tasks, this.ui, this.storage);","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"            return ui.formatMessage(e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"slackernoob"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"slackernoob"},"content":"        new Duke(System.getProperty(\"user.dir\") + \"/duke.txt\").run();","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"slackernoob":71,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * Exception class for Duke methods to throw.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"     * Exception with custom error message.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     * @param errorMessage Custom error message.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"        return \":( OOPS!!! \" + super.getMessage();","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"slackernoob":20}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" * An event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    protected String start;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    protected String end;","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     * Constructs an event with given description, start and end.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     * @param start Time that event starts.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param end Time that event ends.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        this.startDate \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"        this.endDate \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    public int containsDate() {","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"        return 1;","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"        return this.startDate;","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"        String datePattern \u003d \"MMM d yyyy\";","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"        return \"[E]\" + super.toString() + \" (from: \"","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"                + startDate.format(DateTimeFormatter.ofPattern(datePattern))","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"                + \" to: \"","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"                + endDate.format(DateTimeFormatter.ofPattern(datePattern)) + \")\";","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"slackernoob":48}},{"path":"src/main/java/duke/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command for event tasks to be added.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the event command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public EventCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the event command with given task list,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If task description is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        if (this.getInput().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"                    \"You can\u0027t be doing nothing!! Please try again!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"        String[] descSplit \u003d this.getInput().split(\"/\");","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"        String description \u003d descSplit[0].substring(","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"                0, descSplit[0].length() - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"        String start \u003d descSplit[1].substring(","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"                5, descSplit[1].length() - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"        String end \u003d descSplit[2].substring(3);","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"        Event taskEvent \u003d new Event(description, start, end);","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"        taskList.addTask(taskEvent);","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"        ui.showTaskAdded(taskEvent);","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"        ui.showNumTasks(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"     * Executes the Event command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"        if (this.getInput().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"                    \"You can\u0027t be doing nothing!! Please try again!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"        String[] descSplit \u003d this.getInput().split(\"/\");","lastModifiedDate":"2023-02-18"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"        String description \u003d descSplit[0].substring(","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"                0, descSplit[0].length() - 1);","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"        String start \u003d descSplit[1].substring(","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"                5, descSplit[1].length() - 1);","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"        String end \u003d descSplit[2].substring(3);","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"        Event taskEvent \u003d new Event(description, start, end);","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"slackernoob"},"content":"        taskList.addTask(taskEvent);","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"slackernoob"},"content":"        return ui.formatTaskAdded(taskEvent, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":74}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command to find tasks by searching.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the find command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the find command with given task list","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"            ui.displayFormattedMessage(\"Task list is empty, can\u0027t find anything!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"            ui.showMatchingTasksMessage();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"            int matchingTasksCounter \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"                Task curTask \u003d taskList.getTask(i);","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"                if (curTask.getDescription().contains(this.getInput())) {","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"                    matchingTasksCounter +\u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"                    ui.displayFoundTask(matchingTasksCounter, curTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * Executes the Find command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"            return ui.formatMessage(\"Task list is empty, can\u0027t find anything!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"        } else {","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"            String matchingTasks \u003d \"Matching tasks are shown below: \";","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"            int matchingTasksCounter \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"                Task curTask \u003d taskList.getTask(i);","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"                if (curTask.getDescription().contains(this.getInput())) {","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"                    matchingTasksCounter +\u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"                    matchingTasks \u003d matchingTasks + \"\\n\" + ui.formatFoundTask(matchingTasksCounter, curTask);","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"                }","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"            return matchingTasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"slackernoob":68}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"public class Launcher {","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"slackernoob":12}},{"path":"src/main/java/duke/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command to list the tasks in the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the list command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public ListCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the list command to display the list,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * given task list, ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        ui.showList(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        return ui.formatShowList(taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":33}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    private Duke duke \u003d new Duke(\"../duke.txt\");","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"            stage.show();","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"slackernoob":30}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"     * Initializes the main window.","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Ui.getWelcomeMsg(), dukeImage));","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"        );","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"slackernoob":56}},{"path":"src/main/java/duke/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command to mark tasks as completed.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the mark command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public MarkCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the mark command given task list,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        int taskNumber \u003d Integer.parseInt(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        Task markedTask \u003d taskList.changeMarkStatus(taskNumber);","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        ui.showTaskMarked(markedTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"        ui.showNumTasks(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * Executes the Mark command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"        int taskNumber \u003d Integer.parseInt(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"        Task markedTask \u003d taskList.changeMarkStatus(taskNumber);","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"        return ui.formatTaskMarked(markedTask, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":53}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A parser class to make sense of the user command.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class Parser {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the parser.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    public Parser() {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"        //","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"     * Parses the input command from the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * @param input Input command from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * @return Command to be executed.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"            String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"            switch (inputSplit[0]) {","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"            case \"todo\":","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"                return new TodoCommand(input.replaceFirst(\"todo\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"            case \"deadline\":","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"                return new DeadlineCommand(input.replaceFirst(\"deadline\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"            case \"event\":","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"                return new EventCommand(input.replaceFirst(\"event\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"            case \"list\":","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"                return new ListCommand(input.replaceFirst(\"list\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"            case \"delete\":","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"                return new DeleteCommand(input.replaceFirst(\"delete\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"            case \"mark\":","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"                return new MarkCommand(input.replaceFirst(\"mark\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"                return new UnmarkCommand(input.replaceFirst(\"unmark\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"            case \"bye\":","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"                return new ByeCommand(input.replaceFirst(\"bye\", \"\").trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"            case \"find\":","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"                return new FindCommand(input.replaceFirst(\"find\", \"\").trim());","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"            case \"sort\":","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"                return new SortCommand(input.replaceFirst(\"sort\", \"\").trim());","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"            default:","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"                throw new DukeException(\"No such command!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(\"Something went wrong! Please try again.\");","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":54}},{"path":"src/main/java/duke/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command to sort tasks in tasklist.","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"     * Constructs the list command with given user input.","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    public SortCommand(String input) {","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     * Executes the list command to display the list,","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * given task list, ui and storage.","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        taskList.sortTasks(taskList, new TaskDateComparator());","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"     * Executes the Sort command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"        taskList.sortTasks(taskList, new TaskDateComparator());","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"        return ui.formatShowList(taskList);","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"slackernoob":45}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"import java.text.ParseException;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"import java.util.Date;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":" * A storage class to help load tasks from and","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":" * save tasks to specified file.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"public class Storage {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    private File path;","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * Constructs storage object given file path.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     * @param filePath Path to specified file.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"        this.path \u003d new File(filePath);","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"     * Writes tasks to file.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"     * @param taskListStrings A string of all tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"    public void writeTasksToFile(String taskListStrings) {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"            FileWriter fw \u003d new FileWriter(this.path);","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"            fw.write(taskListStrings.substring(1, taskListStrings.length() - 1));","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"            fw.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"     * Reads tasks from file.","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"     * @return ArrayList of tasks read from file.","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If filepath does not exist.","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    public ArrayList\u003cTask\u003e readTasksFromFile(Ui ui) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"            String path \u003d \"../duke.txt\";","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"            Scanner scanner \u003d new Scanner(new File(path));","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"            String contentsOfFile \u003d scanner.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"            String[] fileContentsArray \u003d contentsOfFile.split(\", \");","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"            for (String task: fileContentsArray) {","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"                processTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"            return this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"        } catch (IOException | NoSuchElementException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"            this.makeDirectory();","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"            return this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":69,"author":{"gitId":"slackernoob"},"content":"     * Creates a new file at specified Path.","lastModifiedDate":"2023-02-18"},{"lineNumber":70,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"slackernoob"},"content":"    void makeDirectory() {","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"slackernoob"},"content":"            if (!checkDirectory()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"slackernoob"},"content":"                path.createNewFile();","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"slackernoob"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"slackernoob"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":82,"author":{"gitId":"slackernoob"},"content":"     * Checks if directory exists.","lastModifiedDate":"2023-02-18"},{"lineNumber":83,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":84,"author":{"gitId":"slackernoob"},"content":"     * @return True or False whether path exists or not.","lastModifiedDate":"2023-02-18"},{"lineNumber":85,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":86,"author":{"gitId":"slackernoob"},"content":"    boolean checkDirectory() {","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"slackernoob"},"content":"        return path.exists();","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"slackernoob"},"content":"     * Determines what type of task and adds the chosen task","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"slackernoob"},"content":"     * to the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"slackernoob"},"content":"     * @param task String of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"slackernoob"},"content":"    void processTask(String task) {","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"slackernoob"},"content":"            String taskType \u003d \"\" + task.charAt(1);","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"slackernoob"},"content":"            if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"slackernoob"},"content":"                addTodo(task.substring(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"slackernoob"},"content":"            } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"slackernoob"},"content":"                addDeadline(task.substring(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"slackernoob"},"content":"            } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"slackernoob"},"content":"                addEvent(task.substring(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"slackernoob"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"slackernoob"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":107,"author":{"gitId":"slackernoob"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":108,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":109,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"slackernoob"},"content":"     * Adds an event task to the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"slackernoob"},"content":"     * @param task String of event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"slackernoob"},"content":"     * @throws ParseException If parsing error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"slackernoob"},"content":"    void addEvent(String task) throws ParseException {","lastModifiedDate":"2023-01-25"},{"lineNumber":118,"author":{"gitId":"slackernoob"},"content":"        String taskDescriptionWithTime \u003d task.substring(4);","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"slackernoob"},"content":"        String[] taskDetails \u003d taskDescriptionWithTime.split(\"\\\\(\");","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"slackernoob"},"content":"        String taskDescription \u003d taskDetails[0];","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"slackernoob"},"content":"        taskDescription \u003d taskDescription.substring(0, taskDescription.length() - 1);","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"slackernoob"},"content":"        String timeRange \u003d taskDetails[1].substring(6, taskDetails[1].length() - 1);","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"slackernoob"},"content":"        String[] timings \u003d timeRange.split(\" to: \");","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":125,"author":{"gitId":"slackernoob"},"content":"        String start \u003d timings[0];","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"slackernoob"},"content":"        String displayFormat \u003d \"MMM d yyyy\";","lastModifiedDate":"2023-01-25"},{"lineNumber":127,"author":{"gitId":"slackernoob"},"content":"        String taskFormat \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2023-01-25"},{"lineNumber":128,"author":{"gitId":"slackernoob"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(displayFormat);","lastModifiedDate":"2023-01-25"},{"lineNumber":129,"author":{"gitId":"slackernoob"},"content":"        Date oldStart \u003d format.parse(start);","lastModifiedDate":"2023-01-25"},{"lineNumber":130,"author":{"gitId":"slackernoob"},"content":"        format.applyPattern(taskFormat);","lastModifiedDate":"2023-01-25"},{"lineNumber":131,"author":{"gitId":"slackernoob"},"content":"        String newStart \u003d format.format(oldStart);","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"slackernoob"},"content":"        String end \u003d timings[1];","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"slackernoob"},"content":"        format \u003d new SimpleDateFormat(displayFormat);","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"slackernoob"},"content":"        Date oldEnd \u003d format.parse(end);","lastModifiedDate":"2023-01-25"},{"lineNumber":136,"author":{"gitId":"slackernoob"},"content":"        format.applyPattern(taskFormat);","lastModifiedDate":"2023-01-25"},{"lineNumber":137,"author":{"gitId":"slackernoob"},"content":"        String newEnd \u003d format.format(oldEnd);","lastModifiedDate":"2023-01-25"},{"lineNumber":138,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"slackernoob"},"content":"        Task curTask \u003d new Event(taskDescription, newStart, newEnd);","lastModifiedDate":"2023-01-25"},{"lineNumber":140,"author":{"gitId":"slackernoob"},"content":"        if ((\"\" + task.charAt(1)).equals(\"X\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"slackernoob"},"content":"            curTask \u003d curTask.mark();","lastModifiedDate":"2023-01-25"},{"lineNumber":142,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"slackernoob"},"content":"        ArrayList\u003cTask\u003e curList \u003d this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"slackernoob"},"content":"        curList.add(curTask);","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"slackernoob"},"content":"        this.tasks \u003d curList;","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":148,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"slackernoob"},"content":"     * Adds a to do task to the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":151,"author":{"gitId":"slackernoob"},"content":"     * @param task String of to do task.s","lastModifiedDate":"2023-01-29"},{"lineNumber":152,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":153,"author":{"gitId":"slackernoob"},"content":"    void addTodo(String task) {","lastModifiedDate":"2023-01-24"},{"lineNumber":154,"author":{"gitId":"slackernoob"},"content":"        String taskDescription \u003d task.substring(4);","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"slackernoob"},"content":"        Task curTask \u003d new Todo(taskDescription);","lastModifiedDate":"2023-01-24"},{"lineNumber":156,"author":{"gitId":"slackernoob"},"content":"        if ((\"\" + task.charAt(1)).equals(\"X\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":157,"author":{"gitId":"slackernoob"},"content":"            curTask \u003d curTask.mark();","lastModifiedDate":"2023-01-25"},{"lineNumber":158,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"slackernoob"},"content":"        ArrayList\u003cTask\u003e curList \u003d this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":160,"author":{"gitId":"slackernoob"},"content":"        curList.add(curTask);","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"slackernoob"},"content":"        this.tasks \u003d curList;","lastModifiedDate":"2023-01-24"},{"lineNumber":162,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":163,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":164,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":165,"author":{"gitId":"slackernoob"},"content":"     * Adds a deadline task to the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":166,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":167,"author":{"gitId":"slackernoob"},"content":"     * @param task String of deadline task.","lastModifiedDate":"2023-01-29"},{"lineNumber":168,"author":{"gitId":"slackernoob"},"content":"     * @throws ParseException If parsing error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":169,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":170,"author":{"gitId":"slackernoob"},"content":"    void addDeadline(String task) throws ParseException {","lastModifiedDate":"2023-01-25"},{"lineNumber":171,"author":{"gitId":"slackernoob"},"content":"        String taskDescriptionWithTime \u003d task.substring(4);","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":173,"author":{"gitId":"slackernoob"},"content":"        String[] taskDetails \u003d taskDescriptionWithTime.split(\" \\\\(by: \");","lastModifiedDate":"2023-01-24"},{"lineNumber":174,"author":{"gitId":"slackernoob"},"content":"        String taskDescription \u003d taskDetails[0];","lastModifiedDate":"2023-01-24"},{"lineNumber":175,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":176,"author":{"gitId":"slackernoob"},"content":"        String by \u003d taskDetails[1];","lastModifiedDate":"2023-01-24"},{"lineNumber":177,"author":{"gitId":"slackernoob"},"content":"        by \u003d by.substring(0, by.length() - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":178,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":179,"author":{"gitId":"slackernoob"},"content":"        String displayFormat \u003d \"MMM d yyyy\";","lastModifiedDate":"2023-01-25"},{"lineNumber":180,"author":{"gitId":"slackernoob"},"content":"        String taskFormat \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2023-01-25"},{"lineNumber":181,"author":{"gitId":"slackernoob"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(displayFormat);","lastModifiedDate":"2023-01-25"},{"lineNumber":182,"author":{"gitId":"slackernoob"},"content":"        Date oldDate \u003d format.parse(by);","lastModifiedDate":"2023-01-25"},{"lineNumber":183,"author":{"gitId":"slackernoob"},"content":"        format.applyPattern(taskFormat);","lastModifiedDate":"2023-01-25"},{"lineNumber":184,"author":{"gitId":"slackernoob"},"content":"        String newDateString \u003d format.format(oldDate);","lastModifiedDate":"2023-01-25"},{"lineNumber":185,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":186,"author":{"gitId":"slackernoob"},"content":"        Task curTask \u003d new Deadline(taskDescription, newDateString);","lastModifiedDate":"2023-01-25"},{"lineNumber":187,"author":{"gitId":"slackernoob"},"content":"        if ((\"\" + task.charAt(1)).equals(\"X\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":188,"author":{"gitId":"slackernoob"},"content":"            curTask \u003d curTask.mark();","lastModifiedDate":"2023-01-25"},{"lineNumber":189,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":190,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":191,"author":{"gitId":"slackernoob"},"content":"        ArrayList\u003cTask\u003e curList \u003d this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":192,"author":{"gitId":"slackernoob"},"content":"        curList.add(curTask);","lastModifiedDate":"2023-01-24"},{"lineNumber":193,"author":{"gitId":"slackernoob"},"content":"        this.tasks \u003d curList;","lastModifiedDate":"2023-01-24"},{"lineNumber":194,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":195,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"slackernoob":195}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":" * A task that contains the description and","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" * whether it is marked done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"abstract class Task {","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"    protected String description;","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     * Constructs task with description of task.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * Returns marked task.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"     * @return Marked task.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"    public Task mark() {","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        this.isDone \u003d !this.isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        return this;","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"     * Returns if task is marked done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * @return Task done or not done, true or false.","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * Returns task status icon.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"     * @return Task status icon, X or blank.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"        return this.description;","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"    public int containsDate() {","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"        return 0;","lastModifiedDate":"2023-02-17"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"    abstract LocalDate getDate();","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"        return \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"                + description;","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"slackernoob":66}},{"path":"src/main/java/duke/TaskDateComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":" * A Comparator for task, to be used for Sort command.","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"public class TaskDateComparator implements Comparator\u003cTask\u003e {","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * Compares two tasks.","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     * @param t1 the first object to be compared.","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"     * @param t2 the second object to be compared.","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     * @return Positive integer if t1 is greater,","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"     *     negative integer if t2 is greater,","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"     *     0 if t1 is equals to t2.","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    public int compare(Task t1, Task t2) {","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"        if (t1.containsDate() !\u003d t2.containsDate()) {","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"            return t1.containsDate() - t2.containsDate();","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"        } else {","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"            return t1.getDate().compareTo(t2.getDate());","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"slackernoob":25}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":" * A custom class to store tasks given by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"public class TaskList {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     * Constructs new TaskList without parameters.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * Constructs new TaskList given ArrayList of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param taskList An arraylist of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        this.tasks \u003d taskList;","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"     * Gets the number of tasks inside the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"     * @return Size of task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     * Gets the ArrayList of tasks stored inside the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"     * @return Arraylist of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"        return this.tasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"     * Gets task from task list given task number.","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"     * @param taskNumber Task number.","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"     * @return Task with specified task number.","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"        return this.tasks.get(taskNumber - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"     * Sorts the tasks in taskList and reorders them.","lastModifiedDate":"2023-02-18"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"     * @param taskList taskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"     * @param comparator TaskDateComparator to compare task dates.","lastModifiedDate":"2023-02-18"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"    public void sortTasks(TaskList taskList, Comparator\u003cTask\u003e comparator) {","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"        Collections.sort(taskList.tasks, comparator);","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"     * Adds given task into the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"slackernoob"},"content":"     * @param task Task to be added into the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"slackernoob"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"slackernoob"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"slackernoob"},"content":"     * Deletes task from the task list given task number.","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"slackernoob"},"content":"     * @param num Task number starting from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"slackernoob"},"content":"     * @return Task deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If task list is empty,","lastModifiedDate":"2023-02-08"},{"lineNumber":81,"author":{"gitId":"slackernoob"},"content":"     *     given task number below 1 or given task number","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"slackernoob"},"content":"     *     greater than total number of tasks in task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"slackernoob"},"content":"    public Task deleteTask(int num) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"slackernoob"},"content":"        int numTasks \u003d this.tasks.size();","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"slackernoob"},"content":"        if (numTasks \u003d\u003d 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(\"Can\u0027t delete anything since no tasks in list! \"","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"slackernoob"},"content":"                    + \"Add some tasks first!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"slackernoob"},"content":"        if (num \u003c 1) {","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(\"Tasks start from 1, please try again!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"slackernoob"},"content":"        } else if (num \u003e numTasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(String.format(\"You only have %d task(s), \"","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"slackernoob"},"content":"                    + \"please try again with a number less or equal to %d!\",","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"slackernoob"},"content":"                    numTasks, numTasks));","lastModifiedDate":"2023-01-25"},{"lineNumber":96,"author":{"gitId":"slackernoob"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":97,"author":{"gitId":"slackernoob"},"content":"            Task selectedTask \u003d this.tasks.get(num - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"slackernoob"},"content":"            this.tasks.remove(num - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":99,"author":{"gitId":"slackernoob"},"content":"            return selectedTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":100,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":101,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":102,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":103,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"slackernoob"},"content":"     * Changes the mark status of a task given task number.","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"slackernoob"},"content":"     * @param num Task number starting from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"slackernoob"},"content":"     * @return Task after changing mark status.","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If task list is empty or","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"slackernoob"},"content":"     *     given task number below 1 or given task number","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"slackernoob"},"content":"     *     greater than total number of tasks in task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"slackernoob"},"content":"    public Task changeMarkStatus(int num) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":113,"author":{"gitId":"slackernoob"},"content":"        int numTasks \u003d this.tasks.size();","lastModifiedDate":"2023-01-25"},{"lineNumber":114,"author":{"gitId":"slackernoob"},"content":"        if (numTasks \u003d\u003d 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":115,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(\"Can\u0027t mark anything since no tasks in list! \"","lastModifiedDate":"2023-01-25"},{"lineNumber":116,"author":{"gitId":"slackernoob"},"content":"                    + \"Add some tasks first!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":117,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":118,"author":{"gitId":"slackernoob"},"content":"        if (num \u003c 1) {","lastModifiedDate":"2023-01-25"},{"lineNumber":119,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(\"Tasks start from 1, please try again!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":120,"author":{"gitId":"slackernoob"},"content":"        } else if (num \u003e numTasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":121,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(String.format(\"You only have %d task(s), \"","lastModifiedDate":"2023-01-25"},{"lineNumber":122,"author":{"gitId":"slackernoob"},"content":"                            + \"please try again with a number less or equal to %d!\",","lastModifiedDate":"2023-01-25"},{"lineNumber":123,"author":{"gitId":"slackernoob"},"content":"                    numTasks, numTasks));","lastModifiedDate":"2023-01-25"},{"lineNumber":124,"author":{"gitId":"slackernoob"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":125,"author":{"gitId":"slackernoob"},"content":"            Task selectedTask \u003d this.tasks.get(num - 1).mark();","lastModifiedDate":"2023-01-25"},{"lineNumber":126,"author":{"gitId":"slackernoob"},"content":"            this.tasks.set(num - 1, selectedTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":127,"author":{"gitId":"slackernoob"},"content":"            return selectedTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":128,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":129,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":130,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":131,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"slackernoob"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"slackernoob"},"content":"        return this.tasks.toString();","lastModifiedDate":"2023-01-25"},{"lineNumber":134,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":135}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" * A todo task.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     * Constructs a todo task with given description.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"     * @param description Description of todo task.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"        return LocalDate.now();","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"slackernoob":28}},{"path":"src/main/java/duke/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command for Todo tasks to be added.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the todo command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public TodoCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Executes the todo command with given task list,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If task description is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        if (this.getInput().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"                    \"You cant be doing nothing!! Please try again!\");","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        Todo taskTodo \u003d new Todo(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"        taskList.addTask(taskTodo);","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"        ui.showTaskAdded(taskTodo);","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"        ui.showNumTasks(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     * Executes the Todo command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"        if (this.getInput().length() \u003d\u003d 0) {","lastModifiedDate":"2023-02-18"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"            throw new DukeException(","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"                    \"You cant be doing nothing!! Please try again!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"        Todo taskTodo \u003d new Todo(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"        taskList.addTask(taskTodo);","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"        return ui.formatTaskAdded(taskTodo, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":59}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":" * A class to manage the user interface","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":" * and deal with interactions with the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"public class Ui {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"    private static final String spacesPrefix \u003d \"     \";","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"    private static final String dashes \u003d \"    \"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"            + \"______________________________\"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"            + \"______________________________\";","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    private final Scanner in;","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * Constructs the Ui object given the scanner with input.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"    public Ui() {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"        this.in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"     * Gets the user command from input line.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"     * @return User command string.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"    public String getUserCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        System.out.println(\"Enter your desired action: \");","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        String fullInputLine \u003d in.nextLine();","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"        return fullInputLine;","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * Displays welcome message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"        String welcomeMsg \u003d spacesPrefix","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"                + \"Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"                + spacesPrefix","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"                + \"How can I help you?\";","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"        System.out.println(welcomeMsg);","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"    public static String getWelcomeMsg() {","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"        String welcomeMsg \u003d spacesPrefix","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"                + \"Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"                + spacesPrefix","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"                + \"How can I help you?\";","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"        return welcomeMsg;","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"slackernoob"},"content":"     * Displays goodbye message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"slackernoob"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"slackernoob"},"content":"        String exitMsg \u003d spacesPrefix","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"slackernoob"},"content":"                + \"Farewell! See you soon!\";","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"slackernoob"},"content":"        System.out.println(exitMsg);","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":64,"author":{"gitId":"slackernoob"},"content":"     * Formats goodbye message.","lastModifiedDate":"2023-02-18"},{"lineNumber":65,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted goodbye message.","lastModifiedDate":"2023-02-18"},{"lineNumber":66,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":67,"author":{"gitId":"slackernoob"},"content":"    public String formatGoodbye() {","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"slackernoob"},"content":"        String exitMsg \u003d spacesPrefix","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"slackernoob"},"content":"                + \"Farewell! See you soon!\";","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"slackernoob"},"content":"        return exitMsg;","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"slackernoob"},"content":"     * Displays loading error message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"slackernoob"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"slackernoob"},"content":"        String loadingErrorString \u003d \"Failed to load from file!\";","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"slackernoob"},"content":"        System.out.println(loadingErrorString);","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"slackernoob"},"content":"     * Displays the added task to the user given Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"slackernoob"},"content":"     * @param task Task that has been added.","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"slackernoob"},"content":"    public void showTaskAdded(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(\"New task added: \"));","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"slackernoob"},"content":"        System.out.println(spacesPrefix + task);","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":92,"author":{"gitId":"slackernoob"},"content":"     * Formats add task message.","lastModifiedDate":"2023-02-18"},{"lineNumber":93,"author":{"gitId":"slackernoob"},"content":"     * @param task Added task.","lastModifiedDate":"2023-02-18"},{"lineNumber":94,"author":{"gitId":"slackernoob"},"content":"     * @param taskList taskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":95,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted string for added task","lastModifiedDate":"2023-02-18"},{"lineNumber":96,"author":{"gitId":"slackernoob"},"content":"     *      and number of remaining tasks in list.","lastModifiedDate":"2023-02-18"},{"lineNumber":97,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":98,"author":{"gitId":"slackernoob"},"content":"    public String formatTaskAdded(Task task, TaskList taskList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"slackernoob"},"content":"        String addedTask \u003d spacesPrefix + \"New task added: \" + task;","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"slackernoob"},"content":"        String numTasks \u003d spacesPrefix + \" Now list has \" + taskList.getSize() + \" tasks.\";","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"slackernoob"},"content":"        return addedTask + \"\\n\" + numTasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"slackernoob"},"content":"     * Displays the removed task to the user given Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"slackernoob"},"content":"     * @param task Task that has been removed.","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"slackernoob"},"content":"    public void showTaskRemoved(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":110,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(\"Removed task: \"));","lastModifiedDate":"2023-01-25"},{"lineNumber":111,"author":{"gitId":"slackernoob"},"content":"        System.out.println(spacesPrefix + task);","lastModifiedDate":"2023-01-25"},{"lineNumber":112,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":113,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":114,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":115,"author":{"gitId":"slackernoob"},"content":"     * Formats delete task message.","lastModifiedDate":"2023-02-18"},{"lineNumber":116,"author":{"gitId":"slackernoob"},"content":"     * @param task Deleted task.","lastModifiedDate":"2023-02-18"},{"lineNumber":117,"author":{"gitId":"slackernoob"},"content":"     * @param taskList taskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":118,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted string for deleted task and","lastModifiedDate":"2023-02-18"},{"lineNumber":119,"author":{"gitId":"slackernoob"},"content":"     *      and number of remaining tasks in list.","lastModifiedDate":"2023-02-18"},{"lineNumber":120,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":121,"author":{"gitId":"slackernoob"},"content":"    public String formatTaskRemoved(Task task, TaskList taskList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"slackernoob"},"content":"        String removedTask \u003d spacesPrefix + \"Removed task: \" + task;","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"slackernoob"},"content":"        String numTasks \u003d spacesPrefix + \" Now list has \" + taskList.getSize() + \" tasks.\";","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"slackernoob"},"content":"        return removedTask + \"\\n\" + numTasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":127,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"slackernoob"},"content":"     * Displays the message containing number of tasks","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"slackernoob"},"content":"     * to the user given TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"slackernoob"},"content":"    public void showNumTasks(TaskList taskList) {","lastModifiedDate":"2023-01-25"},{"lineNumber":134,"author":{"gitId":"slackernoob"},"content":"        System.out.println(spacesPrefix","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"slackernoob"},"content":"                + \" Now list has \" + taskList.getSize() + \" tasks.\");","lastModifiedDate":"2023-01-25"},{"lineNumber":136,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":137,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":138,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"slackernoob"},"content":"     * Displays the contents of the task list to the","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"slackernoob"},"content":"     * user given TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":142,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":144,"author":{"gitId":"slackernoob"},"content":"    public void showList(TaskList taskList) {","lastModifiedDate":"2023-01-25"},{"lineNumber":145,"author":{"gitId":"slackernoob"},"content":"        System.out.println(spacesPrefix","lastModifiedDate":"2023-01-25"},{"lineNumber":146,"author":{"gitId":"slackernoob"},"content":"                + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-01-25"},{"lineNumber":147,"author":{"gitId":"slackernoob"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":148,"author":{"gitId":"slackernoob"},"content":"            int number \u003d i + 1;","lastModifiedDate":"2023-01-25"},{"lineNumber":149,"author":{"gitId":"slackernoob"},"content":"            System.out.println(spacesPrefix + \" \"","lastModifiedDate":"2023-01-25"},{"lineNumber":150,"author":{"gitId":"slackernoob"},"content":"                    + number + \". \"","lastModifiedDate":"2023-01-25"},{"lineNumber":151,"author":{"gitId":"slackernoob"},"content":"                    + taskList.getTaskList().get(i));","lastModifiedDate":"2023-01-25"},{"lineNumber":152,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":153,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":154,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":155,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":156,"author":{"gitId":"slackernoob"},"content":"     * Formats list contents of task list.","lastModifiedDate":"2023-02-18"},{"lineNumber":157,"author":{"gitId":"slackernoob"},"content":"     * @param taskList taskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":158,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted string for tasks in list.","lastModifiedDate":"2023-02-18"},{"lineNumber":159,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":160,"author":{"gitId":"slackernoob"},"content":"    public String formatShowList(TaskList taskList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":161,"author":{"gitId":"slackernoob"},"content":"        String finishedList \u003d spacesPrefix + \"Here are the tasks in your list:\";","lastModifiedDate":"2023-02-05"},{"lineNumber":162,"author":{"gitId":"slackernoob"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-02-05"},{"lineNumber":163,"author":{"gitId":"slackernoob"},"content":"            int number \u003d i + 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":164,"author":{"gitId":"slackernoob"},"content":"            finishedList +\u003d \"\\n\" + spacesPrefix + \" \" + number","lastModifiedDate":"2023-02-18"},{"lineNumber":165,"author":{"gitId":"slackernoob"},"content":"                    + \". \" + taskList.getTaskList().get(i);","lastModifiedDate":"2023-02-05"},{"lineNumber":166,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":167,"author":{"gitId":"slackernoob"},"content":"        return finishedList;","lastModifiedDate":"2023-02-05"},{"lineNumber":168,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":169,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":170,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":171,"author":{"gitId":"slackernoob"},"content":"     * Displays the marked task to the user given Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":172,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":173,"author":{"gitId":"slackernoob"},"content":"     * @param task Task that has been marked.","lastModifiedDate":"2023-01-29"},{"lineNumber":174,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":175,"author":{"gitId":"slackernoob"},"content":"    public void showTaskMarked(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":176,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(\"Marked task as done:\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":177,"author":{"gitId":"slackernoob"},"content":"        System.out.println(spacesPrefix + task);","lastModifiedDate":"2023-01-25"},{"lineNumber":178,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":179,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":180,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":181,"author":{"gitId":"slackernoob"},"content":"     * Formats marked task message.","lastModifiedDate":"2023-02-18"},{"lineNumber":182,"author":{"gitId":"slackernoob"},"content":"     * @param task Marked task.","lastModifiedDate":"2023-02-18"},{"lineNumber":183,"author":{"gitId":"slackernoob"},"content":"     * @param taskList taskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":184,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted string for marked task","lastModifiedDate":"2023-02-18"},{"lineNumber":185,"author":{"gitId":"slackernoob"},"content":"     *      and number of remaining tasks in list.","lastModifiedDate":"2023-02-18"},{"lineNumber":186,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":187,"author":{"gitId":"slackernoob"},"content":"    public String formatTaskMarked(Task task, TaskList taskList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":188,"author":{"gitId":"slackernoob"},"content":"        String markedTask \u003d spacesPrefix + \"Marked task as done: \" + task;","lastModifiedDate":"2023-02-05"},{"lineNumber":189,"author":{"gitId":"slackernoob"},"content":"        String numTasks \u003d spacesPrefix + \" Now list has \" + taskList.getSize() + \" tasks.\";","lastModifiedDate":"2023-02-05"},{"lineNumber":190,"author":{"gitId":"slackernoob"},"content":"        return markedTask + \"\\n\" + numTasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":191,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":192,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":193,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"slackernoob"},"content":"     * Displays the unmarked task to the user given Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"slackernoob"},"content":"     * @param task Task that has been unmarked.","lastModifiedDate":"2023-01-29"},{"lineNumber":197,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":198,"author":{"gitId":"slackernoob"},"content":"    public void showTaskUnmarked(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":199,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(\"Marked task as undone:\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":200,"author":{"gitId":"slackernoob"},"content":"        System.out.println(spacesPrefix + task);","lastModifiedDate":"2023-01-25"},{"lineNumber":201,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":202,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":203,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":204,"author":{"gitId":"slackernoob"},"content":"     * Formats unmarked task message.","lastModifiedDate":"2023-02-18"},{"lineNumber":205,"author":{"gitId":"slackernoob"},"content":"     * @param task Unmarked task.","lastModifiedDate":"2023-02-18"},{"lineNumber":206,"author":{"gitId":"slackernoob"},"content":"     * @param taskList taskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":207,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted string for unmarked task","lastModifiedDate":"2023-02-18"},{"lineNumber":208,"author":{"gitId":"slackernoob"},"content":"     *      and number of remaining tasks in list.","lastModifiedDate":"2023-02-18"},{"lineNumber":209,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":210,"author":{"gitId":"slackernoob"},"content":"    public String formatTaskUnmarked(Task task, TaskList taskList) {","lastModifiedDate":"2023-02-05"},{"lineNumber":211,"author":{"gitId":"slackernoob"},"content":"        String unmarkedTask \u003d spacesPrefix + \"Marked task as undone: \" + task;","lastModifiedDate":"2023-02-05"},{"lineNumber":212,"author":{"gitId":"slackernoob"},"content":"        String numTasks \u003d spacesPrefix + \" Now list has \" + taskList.getSize() + \" tasks.\";","lastModifiedDate":"2023-02-05"},{"lineNumber":213,"author":{"gitId":"slackernoob"},"content":"        return unmarkedTask + \"\\n\" + numTasks;","lastModifiedDate":"2023-02-05"},{"lineNumber":214,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":215,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":216,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":217,"author":{"gitId":"slackernoob"},"content":"     * Displays the error message to the user given","lastModifiedDate":"2023-01-29"},{"lineNumber":218,"author":{"gitId":"slackernoob"},"content":"     * the error message.","lastModifiedDate":"2023-01-29"},{"lineNumber":219,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":220,"author":{"gitId":"slackernoob"},"content":"     * @param errorMessage Error message to be shown.","lastModifiedDate":"2023-01-29"},{"lineNumber":221,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":222,"author":{"gitId":"slackernoob"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2023-01-25"},{"lineNumber":223,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(errorMessage));","lastModifiedDate":"2023-01-25"},{"lineNumber":224,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":225,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":226,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":227,"author":{"gitId":"slackernoob"},"content":"     * Displays a line of dashes to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":228,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":229,"author":{"gitId":"slackernoob"},"content":"    public void showLine() {","lastModifiedDate":"2023-01-25"},{"lineNumber":230,"author":{"gitId":"slackernoob"},"content":"        System.out.println(dashes);","lastModifiedDate":"2023-01-25"},{"lineNumber":231,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":232,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":233,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":234,"author":{"gitId":"slackernoob"},"content":"     * Displays the matching tasks message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":235,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":236,"author":{"gitId":"slackernoob"},"content":"    public void showMatchingTasksMessage() {","lastModifiedDate":"2023-01-29"},{"lineNumber":237,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(\"Matching tasks are shown below: \"));","lastModifiedDate":"2023-01-29"},{"lineNumber":238,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":239,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":240,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":241,"author":{"gitId":"slackernoob"},"content":"     * Displays the found task with numbering.","lastModifiedDate":"2023-01-29"},{"lineNumber":242,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":243,"author":{"gitId":"slackernoob"},"content":"     * @param number Task number.","lastModifiedDate":"2023-01-29"},{"lineNumber":244,"author":{"gitId":"slackernoob"},"content":"     * @param task Task found.","lastModifiedDate":"2023-01-29"},{"lineNumber":245,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":246,"author":{"gitId":"slackernoob"},"content":"    public void displayFoundTask(int number, Task task) {","lastModifiedDate":"2023-01-29"},{"lineNumber":247,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(number + \".\" + task));","lastModifiedDate":"2023-01-29"},{"lineNumber":248,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":249,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":250,"author":{"gitId":"slackernoob"},"content":"    public String formatFoundTask(int number, Task task) {","lastModifiedDate":"2023-02-05"},{"lineNumber":251,"author":{"gitId":"slackernoob"},"content":"        return formatMessage(number + \".\" + task);","lastModifiedDate":"2023-02-05"},{"lineNumber":252,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":253,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":254,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":255,"author":{"gitId":"slackernoob"},"content":"     * Displays message with formatting to user.","lastModifiedDate":"2023-01-29"},{"lineNumber":256,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":257,"author":{"gitId":"slackernoob"},"content":"     * @param message Message to be displayed.","lastModifiedDate":"2023-01-29"},{"lineNumber":258,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":259,"author":{"gitId":"slackernoob"},"content":"    public void displayFormattedMessage(String message) {","lastModifiedDate":"2023-01-29"},{"lineNumber":260,"author":{"gitId":"slackernoob"},"content":"        System.out.println(formatMessage(message));","lastModifiedDate":"2023-01-29"},{"lineNumber":261,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":262,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":263,"author":{"gitId":"slackernoob"},"content":"    public void closeScanner() {","lastModifiedDate":"2023-02-04"},{"lineNumber":264,"author":{"gitId":"slackernoob"},"content":"        this.in.close();","lastModifiedDate":"2023-02-04"},{"lineNumber":265,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":266,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":267,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":268,"author":{"gitId":"slackernoob"},"content":"     * Adds spacing indentation to the message.","lastModifiedDate":"2023-01-29"},{"lineNumber":269,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":270,"author":{"gitId":"slackernoob"},"content":"     * @param message Message to be displayed.","lastModifiedDate":"2023-01-29"},{"lineNumber":271,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted message to be displayed.","lastModifiedDate":"2023-01-29"},{"lineNumber":272,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":273,"author":{"gitId":"slackernoob"},"content":"    public String formatMessage(String message) {","lastModifiedDate":"2023-01-25"},{"lineNumber":274,"author":{"gitId":"slackernoob"},"content":"        return spacesPrefix + message;","lastModifiedDate":"2023-01-25"},{"lineNumber":275,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":276,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":276}},{"path":"src/main/java/duke/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":" * A command to mark tasks as not completed.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"     * Constructs the unmark command with given user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"     * @param input Input from user.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    public UnmarkCommand(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"        super(input);","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"     * Executes the unmark command given task list,","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"     * ui and storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"        int taskNumber \u003d Integer.parseInt(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"        Task unmarkedTask \u003d taskList.changeMarkStatus(taskNumber);","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"        ui.showTaskUnmarked(unmarkedTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"        ui.showNumTasks(taskList);","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"    /**","lastModifiedDate":"2023-02-18"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"     * Executes the Unmark command with given task list,","lastModifiedDate":"2023-02-18"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"     * ui and storage, and also returns output String for bot.","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"     *","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"     * @param taskList TaskList for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"     * @param ui Ui for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"     * @param storage Storage for Duke.","lastModifiedDate":"2023-02-18"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"     * @return Formatted output message.","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"     * @throws DukeException If error occurs.","lastModifiedDate":"2023-02-18"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"     */","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"    public String executeReturnString(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"slackernoob"},"content":"        int taskNumber \u003d Integer.parseInt(this.getInput());","lastModifiedDate":"2023-02-18"},{"lineNumber":46,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"slackernoob"},"content":"        Task unmarkedTask \u003d taskList.changeMarkStatus(taskNumber);","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"slackernoob"},"content":"        storage.writeTasksToFile(taskList.getTaskList().toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"slackernoob"},"content":"        return ui.formatTaskUnmarked(unmarkedTask, taskList);","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":52}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"slackernoob":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"slackernoob":19}},{"path":"src/test/java/duke/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"public class CommandTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"    public void execute_markCommand() {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"        Command testCommand \u003d new MarkCommand(\"2\");","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"slackernoob"},"content":"        taskArrayList.add(new Todo(\"sample task 1\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"slackernoob"},"content":"        taskArrayList.add(new Todo(\"sample task 2\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"slackernoob"},"content":"        TaskList tasks \u003d new TaskList(taskArrayList);","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"slackernoob"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"slackernoob"},"content":"        Storage storage \u003d new Storage(System.getProperty(\"user.dir\") + \"/tasklist.txt\");","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"slackernoob"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"slackernoob"},"content":"            testCommand.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"slackernoob"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"slackernoob"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"slackernoob"},"content":"        } finally {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"slackernoob"},"content":"            assertTrue(tasks.getTaskList().get(2 - 1).isDone());","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"slackernoob"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"slackernoob"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"slackernoob"},"content":"    public void test_isExit_byeCommand() {","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"slackernoob"},"content":"        Command testCommand \u003d new ByeCommand(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"slackernoob"},"content":"        assertFalse(testCommand.isExit());","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"slackernoob"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"slackernoob"},"content":"    public void test_isNotExit_deadlineCommand() {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"slackernoob"},"content":"        Command testCommand \u003d new DeadlineCommand(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"slackernoob"},"content":"        assertTrue(testCommand.isExit());","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"slackernoob"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"slackernoob"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"slackernoob"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"slackernoob":44}},{"path":"tasklist.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"[T][ ] sample task 1, [T][X] sample task 2","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"slackernoob":1}},{"path":"text-ui-test/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"[T][X] borrow book, [D][ ] return book (by: Jun 12 2022), [T][X] join sports club, [T][ ] borrow book, [D][ ] return book (by: Aug 4 2022), [E][ ] project meeting (from: Sep 12 2022 to: Sep 13 2022)","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"slackernoob":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"slackernoob"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"slackernoob"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"slackernoob"},"content":"deadline return book /by 2022-06-12","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"slackernoob"},"content":"event project meeting /from 2022-08-13 /to 2022-08-16","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"slackernoob"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"slackernoob"},"content":"todo join sports club","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"slackernoob"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"slackernoob"},"content":"mark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"slackernoob"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"slackernoob"},"content":"deadline return book /by 2022-08-04","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"slackernoob"},"content":"event project meeting /from 2022-09-12 /to 2022-09-13","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"slackernoob"},"content":"delete 3","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"slackernoob"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"slackernoob"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"slackernoob":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"slackernoob"},"content":"if ! javac -cp ../src/main/java/duke/Duke -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"slackernoob":1,"-":37}}]
