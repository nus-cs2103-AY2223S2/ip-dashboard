[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"import core.singletons.Singletons;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import core.utils.TokenUtilities;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.Writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.ByeUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.EchoUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.TaskManagerUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.UnknownCommandUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"import presentation.controllers.DukeEventLoop;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"import presentation.ui.SystemOut;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"        configureInjections();","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"        final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"        final DukeEventLoop eventLoop \u003d DukeEventLoop.createEventLoop(scanner);","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"        eventLoop.run();","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"        scanner.close();","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"     * This would register the singletons that we would be using later on.","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"    private static void configureInjections() {","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"        Singletons.registerLazySingleton(Writable.class, SystemOut::new);","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"        Singletons.registerLazySingleton(ByeUsecase.class,","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"                () -\u003e new ByeUsecase(Singletons.get(Writable.class)));","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"        Singletons.registerLazySingleton(EchoUsecase.class,","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"                () -\u003e new EchoUsecase(Singletons.get(Writable.class)));","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"        Singletons.registerLazySingleton(TaskManagerUsecase.class,","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"                () -\u003e new TaskManagerUsecase(Singletons.get(Writable.class)));","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"        Singletons.registerLazySingleton(UnknownCommandUsecase.class,","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"                () -\u003e new UnknownCommandUsecase(Singletons.get(Writable.class)));","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"        Singletons.registerLazySingleton(TokenUtilities.class,","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"                TokenUtilities::new);","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"wxxedu":33,"-":11}},{"path":"src/main/java/core/exceptions/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package core.exceptions;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * The exception thrown when the argument does not match the expected.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"public class InvalidArgumentException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"     * Creates a new exception due to not having a valid argument.","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     * @param message the message, if any.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the tokens because of which this exception is thrown.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    public InvalidArgumentException(String message, String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"        this.tokens \u003d tokens;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     * Creates a new exception due to not having a valid argument.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     * @param message the message of the argument.","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"    public InvalidArgumentException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"        this(message, null);","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"     * The tokens that caused this exception to be thrown.","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"    final String[] tokens;","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"        if (tokens \u003d\u003d null) {","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"            return \"InvalidArgumentException: \" + super.getMessage();","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"            return \"InvalidArgumentException: \" + super.getMessage() +","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"                    \"[\" + String.join(\", \", tokens) + \"]\";","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":39}},{"path":"src/main/java/core/singletons/Singletons.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package core.singletons;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":" * The utilities class for handling the registering singletons. To use it, call","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":" * \u003ccode\u003eSingletons.registerSingleton(Hello.class, new Hello());\u003c/code\u003e","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":" * This way, it can provide a new layer of abstraction, and if any concrete","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" * implementations were to change, any code calling \u003ccode\u003eSingletons.get\u003c/code\u003e","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":" * would not need to be changed, unless, or course, you directly call the","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":" * class itself.","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"public class Singletons {","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     * The dependencies stored in this dependencies section.","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"    static private final Map\u003cClass\u003c?\u003e, Object\u003e singletons \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     * The dependency suppliers, used for lazy registration.","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"    static private final Map\u003cClass\u003c?\u003e, Supplier\u003c?\u003e\u003e lazySingletons \u003d","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"            new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"     * Registers a class as a singleton, therefore, it would only be created","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"     * once.","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"     * @param cls the class of the object.","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     * @param object the object itself.","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"     * @param \u003cT\u003e the type of the object.","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"    static public \u003cT\u003e void registerSingleton(Class\u003cT\u003e cls,","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"                                             T object) {","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"        if (singletons.containsKey(cls) || lazySingletons.containsKey(cls)) {","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"            return;","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"        singletons.put(cls, object);","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"     * Registers a class as a lazy singleton. A lazy singleton will only get","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"     * instantiated if it was used.","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"     * @param cls the class of the object","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"     * @param supplier the lazy singleton of the object.","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"     * @param \u003cT\u003e the type of the object.","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"    static public \u003cT\u003e void registerLazySingleton(Class\u003cT\u003e cls,","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"                                                 Supplier\u003cT\u003e supplier) {","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"        if (singletons.containsKey(cls) || lazySingletons.containsKey(cls)) {","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"            return;","lastModifiedDate":"2023-01-20"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"        lazySingletons.put(cls, supplier);","lastModifiedDate":"2023-01-20"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"     * Gets an instance of the specified class.","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"     * @param cls the class of the class.","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"     * @return the object that has been registered for this class.","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"     * @param \u003cT\u003e the type of the object.","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"    static public \u003cT\u003e T get(Class\u003cT\u003e cls) {","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"        if (singletons.containsKey(cls)) {","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"            return cls.cast(singletons.get(cls));","lastModifiedDate":"2023-01-20"},{"lineNumber":65,"author":{"gitId":"wxxedu"},"content":"        } else if (lazySingletons.containsKey(cls)) {","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"wxxedu"},"content":"            final T object \u003d cls.cast(lazySingletons.get(cls).get());","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"wxxedu"},"content":"            singletons.put(cls, object);","lastModifiedDate":"2023-01-20"},{"lineNumber":68,"author":{"gitId":"wxxedu"},"content":"            lazySingletons.remove(cls);","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"wxxedu"},"content":"            return object;","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"wxxedu"},"content":"        throw new RuntimeException(\"Dependency for \" + cls.getName() + \" has \" +","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"wxxedu"},"content":"                \"not been injected.\");","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":74,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"wxxedu":74}},{"path":"src/main/java/core/utils/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package core.utils;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * A Pair of objects.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" * @param \u003cL\u003e the type of the left object.","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" * @param \u003cR\u003e the type of the right object.","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"public class Pair\u003cL, R\u003e {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     * Creates a new pair.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     * @param left the object stored as the left.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"     * @param right the object stored as the right.","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    public Pair(L left, R right) {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"        this.left \u003d left;","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"        this.right \u003d right;","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     * The left object.","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    private final L left;","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"     * The right object.","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"    private final R right;","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     * Gets the left object.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"     * @return the object stored as left.","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"    public L getLeft() {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"        return left;","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"     * Gets the right object.","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"     * @return the object stored as right.","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"    public R getRight() {","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"        return right;","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":44}},{"path":"src/main/java/core/utils/TokenUtilities.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package core.utils;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import java.util.*;","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" * A helper class for joining the tokens to strings according to the delim","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" * provided.","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"public class TokenUtilities {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     * Instantiates a TokenUtilities.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    public TokenUtilities() {}","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"     * Joins the tokens together","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the tokens to be joined","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"     * @param delim a hashset containing the potential delimiters, a delimiter","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     *              is a string that splits the tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     * @return a pair, the left of which would be a string if the token does","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     * not start with a delimiter. The right would be a hash set containing the","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     * information.","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"    public Pair\u003cString, Map\u003cString, String\u003e\u003e joinTokens(","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"            String[] tokens, Set\u003cString\u003e delim) {","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"        String currentDelim \u003d null;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"        final StringBuilder left \u003d new StringBuilder();","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"        final HashMap\u003cString, StringBuilder\u003e rightBuilders \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"        for (String token: tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"            if (delim.contains(token)) {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"                currentDelim \u003d token;","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"                rightBuilders.put(token, new StringBuilder());","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"                continue;","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"            if (currentDelim \u003d\u003d null) {","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"                left.append(token);","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"                left.append(\" \");","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"            } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"                final StringBuilder builder \u003d rightBuilders.get(currentDelim);","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"                builder.append(token);","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"                builder.append(\" \");","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"        final HashMap\u003cString, String\u003e right \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"        for (final String key: rightBuilders.keySet()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"            right.put(key, rightBuilders.get(key).toString().trim());","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"        return new Pair\u003c\u003e(left.toString().trim(), right);","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"     * Gets the subsequence of the tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the tokens from which the subsequence is get.","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"     * @param startIdx the start index of the subsequence.","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"     * @param endIdx the end index of the subsequence.","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"     * @return the subsequence starting from the startIdx ending with the","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"     * endIdx, inclusive of both sides.","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"    public String[] getSubsequence(String[] tokens, int startIdx, int endIdx) {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"        assert (endIdx \u003c tokens.length) : \"The end index should be smaller than\" +","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"                \"the length of the tokens.\";","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"        if (startIdx \u003e endIdx) {","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"            return new String[0];","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"        final int length \u003d endIdx - startIdx + 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"wxxedu"},"content":"        String[] res \u003d new String[length];","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"wxxedu"},"content":"        for (int i \u003d 0; i \u003c length; i ++) {","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"wxxedu"},"content":"            res[i] \u003d tokens[i + startIdx];","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"wxxedu"},"content":"        return res;","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"wxxedu"},"content":"     * Returns an array with the first item removed.","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the list of tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"wxxedu"},"content":"     * @return the tokens with the first item removed.","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"wxxedu"},"content":"    public String[] removeFirst(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"wxxedu"},"content":"        if (tokens.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"wxxedu"},"content":"            return new String[0];","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"wxxedu"},"content":"        return  getSubsequence(tokens, 1, tokens.length - 1);","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":83}},{"path":"src/main/java/core/utils/fp/ThrowingFunction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package core.utils.fp;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"@FunctionalInterface","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"public interface ThrowingFunction\u003cT, R, E extends Exception\u003e {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"    R apply(T param) throws E;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":5}},{"path":"src/main/java/core/utils/fp/ThrowingSupplier.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package core.utils.fp;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"@FunctionalInterface","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"public interface ThrowingSupplier\u003cR, E extends Exception\u003e {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"    R supply() throws E;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":5}},{"path":"src/main/java/domain/entities/core/EventLoop.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * This shall serve as the base for implementing an event loop. An event loop","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" * loops forever unless the executable in it returns ExitStatus.terminate.","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"public abstract class EventLoop {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"    public EventLoop(Executable rootExecutable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"        this.rootExecutable \u003d rootExecutable;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"     * The root executable that shall be executed in the loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"    private final Executable rootExecutable;","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     * The function for getting the tokens for each loop iteration.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     * @return the array of tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"    abstract protected String[] getTokens();","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"     * The function that starts the event loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"    public void run() {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"        ExitStatus status \u003d ExitStatus.continueExecute;","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"        while (true) {","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"            status \u003d rootExecutable.execute(getTokens());","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"            if (status \u003d\u003d ExitStatus.terminate) {","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"                break;","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":35}},{"path":"src/main/java/domain/entities/core/Executable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * The interface for objects that can be run.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"public interface Executable {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"     * Runs the executable.","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the tokens, i.e. the arguments, for the executable. They","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     *               should include the first word.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     * @return the exit status of the runnable, which decides what to do with","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"     * the next executable in line.","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    ExitStatus execute(String[] tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":15}},{"path":"src/main/java/domain/entities/core/ExecutableRegisterable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * The interface that can registers its executables to the event loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"public interface ExecutableRegisterable {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"     * Registers the executables related to this interface to the nestable.","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     * @param nestable the root executable to which the executable of this","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     *                 interface shall be registered.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    void register(NestableExecutableObject nestable);","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":13}},{"path":"src/main/java/domain/entities/core/ExitStatus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * This is the return type of executing any command. It should signify what the","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" * event loop in the input manager shall do after executing it.","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" * \u003cli\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":" * If a command returns skipCurrentLoop, then it means that all the commands","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":" * that could be executed after this would be skipped.","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":" * \u003c/li\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" * \u003cli\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":" * If a command returns terminate, then it means that the event loop shall","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":" * terminate.","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":" * \u003c/li\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":" * \u003cli\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":" * If a command returns continueCurrentLoop, then it means that all the event","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":" * loop will continue executing the commands after this in the same iteration.","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":" * \u003c/li\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"public enum ExitStatus {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"    finishCurrentIteration,","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"    terminate,","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    continueExecute;","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":23}},{"path":"src/main/java/domain/entities/core/Identifiable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * An interface for objects that have a id, so that in a sense they could be","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" * located in hash tables using this key.","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"public interface Identifiable {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     * Gets the id of the Keyable object, which can be stored as keys for a","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     * HashMap.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     * @return the id of the Keyable object.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"    String getId();","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":14}},{"path":"src/main/java/domain/entities/core/IdentifiableExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * The interface for objects that have both ids and can be executed.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"public interface IdentifiableExecutable extends Executable, Identifiable {}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":6}},{"path":"src/main/java/domain/entities/core/NestableExecutableObject.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import core.singletons.Singletons;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import core.utils.TokenUtilities;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"import java.util.*;","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":" * This class shall contain several executable objects, hence it shall be","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":" * considered \u0027nestable\u0027 executable.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"public class NestableExecutableObject implements Executable {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"     * Instantiates a new TokensManager.","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"     * @param preExecutables the executables to be executed first in an","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"     *                       iteration.","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     * @param postExecutables the executables to be executed last in an","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"     *                        iteration.","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     * @param identifiedExecutables the commands to be executed in the middle in","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     *                              an iteration, with a mapping from tokens to","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     *                              the commands themselves.","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    public NestableExecutableObject(","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"            ArrayList\u003cExecutable\u003e preExecutables,","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"            ArrayList\u003cExecutable\u003e postExecutables,","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"            HashMap\u003cString, IdentifiableExecutable\u003e identifiedExecutables","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"            ) {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"        this.preExecutables \u003d preExecutables;","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"        this.postExecutables \u003d postExecutables;","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"        this.identifiedExecutables \u003d identifiedExecutables;","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"     * Instantiates a new TokensManager with all the values defaulting to empty","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"     * collections.","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"    public NestableExecutableObject() {","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"        this(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new HashMap\u003c\u003e());","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"     * The commands that are executed in sequence before executing the","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"     * tokenedCommands in an execution iteration.","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"     * \u003cp\u003eIt shall be noted that this","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"     * iteration may not continue after executing a certain command, depending","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"     * on the command\u0027s return value upon execution.\u003c/p\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"    private final List\u003cExecutable\u003e preExecutables;","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"     * The commands that are executed in the sequence after executing the","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"     * keywordCommands.","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"     * \u003cp\u003eIt shall be noted that this","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"     * iteration may not continue after executing a certain command, depending","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"     * on the command\u0027s return value upon execution.\u003c/p\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"    private final List\u003cExecutable\u003e postExecutables;","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"     * The commands that are executed in the middle. They will be matched","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"     * against the keyword to decide whether if they wil be executed.","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"     * \u003cp\u003eIt shall be noted that this","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"     * iteration may not continue after executing a certain command, depending","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"     * on the command\u0027s return value upon execution.\u003c/p\u003e","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"wxxedu"},"content":"    private final Map\u003cString, IdentifiableExecutable\u003e identifiedExecutables;","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"wxxedu"},"content":"     * Registers a executable to be executed before the tokened commands.","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"wxxedu"},"content":"     * @param executable the executable to be put into the preCommand loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"wxxedu"},"content":"    public void registerPreExecutable(Executable executable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"wxxedu"},"content":"        this.preExecutables.add(executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"wxxedu"},"content":"     * Registers a executable to be exe","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"wxxedu"},"content":"     * @param executable the executable to be put into the postCommand loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"wxxedu"},"content":"    public  void registerPostExecutable(Executable executable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"wxxedu"},"content":"        this.postExecutables.add(executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"wxxedu"},"content":"     * Registers a keyword executable. A keyword executable is a KeywordCommand that","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"wxxedu"},"content":"     * will be activated if the line inputted has the keyword corresponding","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"wxxedu"},"content":"     * to that executable.","lastModifiedDate":"2023-01-19"},{"lineNumber":87,"author":{"gitId":"wxxedu"},"content":"     * @param executable the executable to be put into the keyword executable loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":88,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"wxxedu"},"content":"    public void registerIdentifiableExecutable(IdentifiableExecutable executable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"wxxedu"},"content":"        final String key \u003d executable.getId();","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"wxxedu"},"content":"        identifiedExecutables.put(key, executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":94,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":95,"author":{"gitId":"wxxedu"},"content":"     * Runs an list of executables.","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"wxxedu"},"content":"     * @param executables the list of executables to be run.","lastModifiedDate":"2023-01-19"},{"lineNumber":97,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the array of tokens to be passed to the list of executables","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"wxxedu"},"content":"     *               as argument.","lastModifiedDate":"2023-01-19"},{"lineNumber":99,"author":{"gitId":"wxxedu"},"content":"     * @return the ExitStatus of executing the executables.","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"wxxedu"},"content":"    private ExitStatus runExecutablesList(List\u003cExecutable\u003e executables,","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"wxxedu"},"content":"            String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"wxxedu"},"content":"        ExitStatus status \u003d ExitStatus.continueExecute;","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"wxxedu"},"content":"        for (Executable executable: executables) {","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"wxxedu"},"content":"            status \u003d executable.execute(tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"wxxedu"},"content":"            if (status !\u003d ExitStatus.continueExecute) {","lastModifiedDate":"2023-01-19"},{"lineNumber":107,"author":{"gitId":"wxxedu"},"content":"                return status;","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"wxxedu"},"content":"        return status;","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"wxxedu"},"content":"    public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"wxxedu"},"content":"        ExitStatus status \u003d runExecutablesList(preExecutables, tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":117,"author":{"gitId":"wxxedu"},"content":"        if (status !\u003d ExitStatus.continueExecute) {","lastModifiedDate":"2023-01-19"},{"lineNumber":118,"author":{"gitId":"wxxedu"},"content":"            return status;","lastModifiedDate":"2023-01-19"},{"lineNumber":119,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":120,"author":{"gitId":"wxxedu"},"content":"        if (!identifiedExecutables.isEmpty()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":121,"author":{"gitId":"wxxedu"},"content":"            final Executable executable \u003d identifiedExecutables.get(tokens[0]);","lastModifiedDate":"2023-01-19"},{"lineNumber":122,"author":{"gitId":"wxxedu"},"content":"            if (executable !\u003d null) {","lastModifiedDate":"2023-01-19"},{"lineNumber":123,"author":{"gitId":"wxxedu"},"content":"                final String[] newTokens \u003d","lastModifiedDate":"2023-01-20"},{"lineNumber":124,"author":{"gitId":"wxxedu"},"content":"                        Singletons.get(TokenUtilities.class).removeFirst(tokens);","lastModifiedDate":"2023-01-20"},{"lineNumber":125,"author":{"gitId":"wxxedu"},"content":"                status \u003d executable.execute(newTokens);","lastModifiedDate":"2023-01-20"},{"lineNumber":126,"author":{"gitId":"wxxedu"},"content":"                if (status !\u003d ExitStatus.continueExecute) {","lastModifiedDate":"2023-01-19"},{"lineNumber":127,"author":{"gitId":"wxxedu"},"content":"                    return status;","lastModifiedDate":"2023-01-19"},{"lineNumber":128,"author":{"gitId":"wxxedu"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":129,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":130,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":131,"author":{"gitId":"wxxedu"},"content":"        return runExecutablesList(postExecutables, tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":133}},{"path":"src/main/java/domain/entities/core/Writable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.core;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * An interface wrapping around things that can be written to.","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"public interface Writable {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"     * Write the content to the interface. This will not add a new line to the","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     * method. The content\u0027s toString method will be called.","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     * @param content the content to be written to the interface.","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    public void write(Object content);","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"     * Write the content to the interface. This will add a new line to the","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     * method. The content\u0027s toString method will be called.","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"     * @param content the content to be written to the interface.","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"    public void writeln(Object content);","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"wxxedu":20}},{"path":"src/main/java/domain/entities/taskmanager/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.taskmanager;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import core.exceptions.InvalidArgumentException;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import core.singletons.Singletons;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"import core.utils.Pair;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"import core.utils.TokenUtilities;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"import java.util.Set;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" * A Deadline is a Task with a deadline.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":" * Note that this class is not set to public by design. It is supposed to be","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":" * package private only. Therefore, anything that\u0027s related to this task","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":" * manager shall remain in this task manager.","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"     * Creates a new deadline object whose isComplete is set to false.","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the deadline object.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     * @param deadline the deadline of the deadline object.","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     * @param isComplete if the deadline object is complete or not.","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    public Deadline(String name, boolean isComplete, String deadline) {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"     * Creates a new deadline object whose isComplete is set to false.","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the deadline object.","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     * @param deadline the deadline of the deadline object.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"        this(name, false, deadline);","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"     * Creates a new deadline from the given tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"     * @return a new deadline from the given tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"    public static Deadline fromTokens(String[] tokens) throws InvalidArgumentException {","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"        final Pair\u003cString, Map\u003cString, String\u003e\u003e tmp \u003d","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"                Singletons.get(TokenUtilities.class).joinTokens(tokens, delims);","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"        if (tmp.getLeft().isBlank()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, the name for a deadline \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"                    \"should not be null\", tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"        } else if (tmp.getRight().get(deadlineKey) \u003d\u003d null) {","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, did you forgot to type \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"                    deadlineKey + \" for your deadline?\");","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"        return new Deadline(tmp.getLeft(), tmp.getRight().get(deadlineKey));","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"     * The deadline.","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"    private final String deadline;","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"     * The key used for retrieving the deadline.","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"    private static final String deadlineKey \u003d \"/by\";","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"wxxedu"},"content":"     * The set of keys for retrieving the data.","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"wxxedu"},"content":"    private static final Set\u003cString\u003e delims \u003d Set.of(deadlineKey);","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"wxxedu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"wxxedu"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":73}},{"path":"src/main/java/domain/entities/taskmanager/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.taskmanager;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import core.exceptions.InvalidArgumentException;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import core.singletons.Singletons;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"import core.utils.Pair;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"import core.utils.TokenUtilities;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"import java.util.Set;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" * An Event is a Task with a starting time and a ending time.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":" * Note that this class is not set to public by design. It is supposed to be","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":" * package private only. Therefore, anything that\u0027s related to this task","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":" * manager shall remain in this task manager.","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"     * Creates a new event.","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the event","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     * @param isComplete whether if the event is completed","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     * @param startAt the starting time of the event","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     * @param endAt the end time of the event","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"    public Event(String name, boolean isComplete, String startAt, String endAt) {","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"        this.startAt \u003d startAt;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"        this.endAt \u003d endAt;","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     * Creates a new event that has not been completed.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the event.","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"     * @param startAt the starting time of the event.","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"     * @param endAt the end time of the event.","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"    public Event(String name, String startAt, String endAt) {","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"        this(name, false, startAt, endAt);","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"    public static Event fromTokens(String[] tokens) throws InvalidArgumentException {","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"        final Pair\u003cString, Map\u003cString, String\u003e\u003e tmp \u003d","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"                Singletons.get(TokenUtilities.class).joinTokens(tokens, delims);","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"        if (tmp.getLeft().isBlank()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, the name for an event \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"                    \"should not be null\", tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"        } else if (tmp.getRight().get(startAtKey) \u003d\u003d null) {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, did you forgot to type \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"                    startAtKey + \" for your event?\");","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"        } else if (tmp.getRight().get(endAtKey) \u003d\u003d null) {","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, did you forgot to type \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"                    endAtKey + \" for your event?\");","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"        return new Event(tmp.getLeft(), tmp.getRight().get(startAtKey),","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"                tmp.getRight().get(endAtKey));","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"    private final String startAt;","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"    private final String endAt;","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"     * The token for getting the start time.","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"    private static final String startAtKey \u003d \"/from\";","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"     * The token for getting the end time.","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"wxxedu"},"content":"    private static final String endAtKey \u003d \"/to\";","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"wxxedu"},"content":"     * The set for retrieval of the values from the Token Utils","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"wxxedu"},"content":"    private static final Set\u003cString\u003e delims \u003d Set.of(startAtKey, endAtKey);","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"wxxedu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"wxxedu"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startAt + \" to: \" + endAt + \")\";","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":78}},{"path":"src/main/java/domain/entities/taskmanager/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.taskmanager;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":" * This shall resemble a Task. The reason that no modifiers was added was","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":" * because this class shall be package private.","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     * Creates a new Task instance.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the list item.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"     * @param isComplete if the Task is complete or not.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"    Task(String name, boolean isComplete) {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"        this.isComplete \u003d isComplete;","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"     * Initializes a new Task instance, with its isComplete set to false.","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the Task instance.","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    Task(String name) {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"        this(name, false);","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"     * The name of the list item.","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"     * It is set to final now as we do not allow the change of names for now.","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"    private final String name;","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"     * If the object is complete or not.","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"    private boolean isComplete;","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"     * Sets the isComplete to complete.","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"     * @param complete the value to set the isComplete to.","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"    public void setComplete(boolean complete) {","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"        isComplete \u003d complete;","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"     * Toggles the isComplete value, i.e. if it were true, then set it to false;","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"     * if it were false, then set it to true.","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"    public void toggleIsComplete() {","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"       isComplete \u003d !isComplete;","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"        String prefix;","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"        if (isComplete) {","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"            prefix \u003d \"[x] \";","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"            prefix \u003d \"[ ] \";","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"        return prefix + name;","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":64}},{"path":"src/main/java/domain/entities/taskmanager/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.entities.taskmanager;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import core.exceptions.InvalidArgumentException;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" * A ToDo is just a very boring task.","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":" * Note that this class is not set to public by design. It is supposed to be","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":" * package private only. Therefore, anything that\u0027s related to this task","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":" * manager shall remain in this task manager.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"     * Creates a new todo.","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the new todo.","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"     * @param isComplete whether if this todo is completed.","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    public ToDo(String name, boolean isComplete) {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"     * Creates a todo that is completed.","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"     * @param name the name of the new todo.","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"        super(name);","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"     * Creates a new todo from the tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"     * @param tokens the tokens.","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"     * @return a new todo object.","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"    public static ToDo fromTokens(String[] tokens) throws InvalidArgumentException {","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"        final String name \u003d String.join(\" \", tokens).trim();","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"        if (name.isBlank()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, the name for a ToDo should\" +","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"                    \"not be blank.\", tokens);","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"        return new ToDo(String.join(\" \", tokens));","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":47}},{"path":"src/main/java/domain/usecases/ByeUsecase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.usecases;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.*;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"public class ByeUsecase implements IdentifiableExecutable, ExecutableRegisterable {","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"     * Creates a new Bye Usecase.","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"     * @param writable the destination that this ByeUsecase would write its","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     *                 content to.","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"    public ByeUsecase(Writable writable) {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"        this.writable \u003d writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    private final Writable writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"    public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"        writable.writeln(\"Bye! See you next time:-)\");","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"        return ExitStatus.terminate;","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    public String getId() {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"        return \"bye\";","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"    public void register(NestableExecutableObject nestable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(this);","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":30}},{"path":"src/main/java/domain/usecases/EchoUsecase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.usecases;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.*;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"public class EchoUsecase implements Executable, ExecutableRegisterable {","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"     * Creates a new EchoUsecase.","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"     * @param writable the writable that this EchoUsecase writes to.","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"    public EchoUsecase(Writable writable) {","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"        this.writable \u003d writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"     * The writable that this usecase writes to.","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    private final Writable writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"    public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"        writable.writeln(String.join(\" \", tokens));","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"        // after this, we would want it to skip the current execution loop.","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"        return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"    public void register(NestableExecutableObject nestable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"        nestable.registerPostExecutable(this);","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":29}},{"path":"src/main/java/domain/usecases/TaskManagerUsecase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.usecases;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import core.exceptions.InvalidArgumentException;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import core.utils.fp.ThrowingFunction;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.*;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"import domain.entities.taskmanager.*;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":" * A class for managing tasks.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"public class TaskManagerUsecase implements ExecutableRegisterable {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"     * Creates a new TaskManagerUsecase with the todos set to items.","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"     * @param items the todos that this TaskManagerUsecase starts with.","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"     * @param writable the writable that this manager writes to.","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    public TaskManagerUsecase(Writable writable, ArrayList\u003cTask\u003e items) {","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"        this.tasks \u003d items;","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"        this.writable \u003d writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"     * Creates a new TaskManagerUsecase with the todos set to empty.","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"     * @param writable the writable that this manager writes to.","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"    public TaskManagerUsecase(Writable writable) {","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"        this(writable, new ArrayList\u003c\u003e());","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"     * The list of tasks that this manager contains.","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"     * The writable that this manager writes to.","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"    private final Writable writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"     * Adds a Task to the todoItems.","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"     * @param task the Task.","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"    void addTask(Task task) {","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"wxxedu"},"content":"     * The executable for adding a Task to this class.","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"wxxedu"},"content":"     * @param taskSupplier the function for creating a task instance.","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"wxxedu"},"content":"     * @param id the id of the task instance.","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"wxxedu"},"content":"     * @return the executable for adding a Task to this class.","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"wxxedu"},"content":"    private IdentifiableExecutable getAddTaskExecutable(ThrowingFunction\u003cString[], Task,","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"wxxedu"},"content":"            InvalidArgumentException\u003e taskSupplier, String id) {","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"wxxedu"},"content":"        return new IdentifiableExecutable() {","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"wxxedu"},"content":"            @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"wxxedu"},"content":"            public String getId() {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"wxxedu"},"content":"                return id;","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"wxxedu"},"content":"            @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"wxxedu"},"content":"            public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"wxxedu"},"content":"                final Task task;","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"wxxedu"},"content":"                try {","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"wxxedu"},"content":"                    task \u003d taskSupplier.apply(tokens);","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"wxxedu"},"content":"                } catch (InvalidArgumentException exception) {","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"wxxedu"},"content":"                    writable.writeln(exception.getMessage());","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"wxxedu"},"content":"                    return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"wxxedu"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"wxxedu"},"content":"                addTask(task);","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"wxxedu"},"content":"                writable.writeln(\"added: \" + task);","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"wxxedu"},"content":"                return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"wxxedu"},"content":"        };","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"wxxedu"},"content":"     * Gets the executable for listing TodoItems.","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"wxxedu"},"content":"     * @return the executable for listing all the TodoItems.","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"wxxedu"},"content":"    private IdentifiableExecutable getListTodosExecutable() {","lastModifiedDate":"2023-01-20"},{"lineNumber":83,"author":{"gitId":"wxxedu"},"content":"       return new IdentifiableExecutable() {","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"wxxedu"},"content":"           @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"wxxedu"},"content":"           public String getId() {","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"wxxedu"},"content":"               return \"list\";","lastModifiedDate":"2023-01-19"},{"lineNumber":87,"author":{"gitId":"wxxedu"},"content":"           }","lastModifiedDate":"2023-01-19"},{"lineNumber":88,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"wxxedu"},"content":"           @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"wxxedu"},"content":"           public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"wxxedu"},"content":"               for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"wxxedu"},"content":"                   writable.writeln((i+1) + \". \" + tasks.get(i));","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"wxxedu"},"content":"               }","lastModifiedDate":"2023-01-19"},{"lineNumber":94,"author":{"gitId":"wxxedu"},"content":"               return null;","lastModifiedDate":"2023-01-19"},{"lineNumber":95,"author":{"gitId":"wxxedu"},"content":"           }","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"wxxedu"},"content":"       };","lastModifiedDate":"2023-01-19"},{"lineNumber":97,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":99,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"wxxedu"},"content":"     * Gets a index number from the index string.","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"wxxedu"},"content":"     * @param indexStr the string from which the index number is get.","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"wxxedu"},"content":"     * @return the index as an int.","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"wxxedu"},"content":"     * @throws InvalidArgumentException the exception whose value should be","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"wxxedu"},"content":"     * displayed.","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"wxxedu"},"content":"    private int getIndex(String indexStr) throws InvalidArgumentException {","lastModifiedDate":"2023-01-19"},{"lineNumber":107,"author":{"gitId":"wxxedu"},"content":"        final int index;","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"wxxedu"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"wxxedu"},"content":"            index \u003d Integer.parseInt(indexStr) - 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"wxxedu"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, please input a \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"wxxedu"},"content":"                    \"number!\");","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"wxxedu"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"wxxedu"},"content":"            throw new InvalidArgumentException(\"☹ OOPS, please input a number\" +","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"wxxedu"},"content":"                    \" that is within range!\");","lastModifiedDate":"2023-01-19"},{"lineNumber":117,"author":{"gitId":"wxxedu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":118,"author":{"gitId":"wxxedu"},"content":"        return index;","lastModifiedDate":"2023-01-19"},{"lineNumber":119,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":120,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":121,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":122,"author":{"gitId":"wxxedu"},"content":"     * Gets the executable that will mark an item\u0027s isComplete as isComplete.","lastModifiedDate":"2023-01-19"},{"lineNumber":123,"author":{"gitId":"wxxedu"},"content":"     * @param id the id for the marker executable.","lastModifiedDate":"2023-01-19"},{"lineNumber":124,"author":{"gitId":"wxxedu"},"content":"     * @param isComplete whether if the marker executable will mark item as","lastModifiedDate":"2023-01-19"},{"lineNumber":125,"author":{"gitId":"wxxedu"},"content":"     *                   complete or not.","lastModifiedDate":"2023-01-19"},{"lineNumber":126,"author":{"gitId":"wxxedu"},"content":"     * @return the executable that will mark an item\u0027s isComplete.","lastModifiedDate":"2023-01-19"},{"lineNumber":127,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":128,"author":{"gitId":"wxxedu"},"content":"    private IdentifiableExecutable getMarkerExecutable(boolean isComplete,","lastModifiedDate":"2023-01-20"},{"lineNumber":129,"author":{"gitId":"wxxedu"},"content":"                                                 String id) {","lastModifiedDate":"2023-01-20"},{"lineNumber":130,"author":{"gitId":"wxxedu"},"content":"        return new IdentifiableExecutable() {","lastModifiedDate":"2023-01-19"},{"lineNumber":131,"author":{"gitId":"wxxedu"},"content":"            @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"wxxedu"},"content":"            public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"wxxedu"},"content":"                final String indexStr \u003d tokens[0];","lastModifiedDate":"2023-01-20"},{"lineNumber":134,"author":{"gitId":"wxxedu"},"content":"                final int index;","lastModifiedDate":"2023-01-19"},{"lineNumber":135,"author":{"gitId":"wxxedu"},"content":"                try {","lastModifiedDate":"2023-01-19"},{"lineNumber":136,"author":{"gitId":"wxxedu"},"content":"                    index \u003d getIndex(indexStr);","lastModifiedDate":"2023-01-19"},{"lineNumber":137,"author":{"gitId":"wxxedu"},"content":"                } catch (InvalidArgumentException exception) {","lastModifiedDate":"2023-01-19"},{"lineNumber":138,"author":{"gitId":"wxxedu"},"content":"                    writable.writeln(exception.getMessage());","lastModifiedDate":"2023-01-20"},{"lineNumber":139,"author":{"gitId":"wxxedu"},"content":"                    return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"wxxedu"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":141,"author":{"gitId":"wxxedu"},"content":"                final Task item \u003d tasks.get(index);","lastModifiedDate":"2023-01-19"},{"lineNumber":142,"author":{"gitId":"wxxedu"},"content":"                item.setComplete(isComplete);","lastModifiedDate":"2023-01-19"},{"lineNumber":143,"author":{"gitId":"wxxedu"},"content":"                writable.writeln(\"Nice, I\u0027ve marked this item as done:\");","lastModifiedDate":"2023-01-20"},{"lineNumber":144,"author":{"gitId":"wxxedu"},"content":"                writable.writeln(\"\\t\" + item);","lastModifiedDate":"2023-01-20"},{"lineNumber":145,"author":{"gitId":"wxxedu"},"content":"                return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":146,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":147,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":148,"author":{"gitId":"wxxedu"},"content":"            @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":149,"author":{"gitId":"wxxedu"},"content":"            public String getId() {","lastModifiedDate":"2023-01-19"},{"lineNumber":150,"author":{"gitId":"wxxedu"},"content":"                return id;","lastModifiedDate":"2023-01-19"},{"lineNumber":151,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":152,"author":{"gitId":"wxxedu"},"content":"        };","lastModifiedDate":"2023-01-19"},{"lineNumber":153,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":154,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":155,"author":{"gitId":"wxxedu"},"content":"    private IdentifiableExecutable getDeleteExecutable() {","lastModifiedDate":"2023-01-20"},{"lineNumber":156,"author":{"gitId":"wxxedu"},"content":"        return new IdentifiableExecutable() {","lastModifiedDate":"2023-01-19"},{"lineNumber":157,"author":{"gitId":"wxxedu"},"content":"            @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":158,"author":{"gitId":"wxxedu"},"content":"            public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":159,"author":{"gitId":"wxxedu"},"content":"                final String indexStr \u003d tokens[0];","lastModifiedDate":"2023-01-20"},{"lineNumber":160,"author":{"gitId":"wxxedu"},"content":"                final int index;","lastModifiedDate":"2023-01-19"},{"lineNumber":161,"author":{"gitId":"wxxedu"},"content":"                try {","lastModifiedDate":"2023-01-19"},{"lineNumber":162,"author":{"gitId":"wxxedu"},"content":"                    index \u003d getIndex(indexStr);","lastModifiedDate":"2023-01-19"},{"lineNumber":163,"author":{"gitId":"wxxedu"},"content":"                } catch (InvalidArgumentException exception) {","lastModifiedDate":"2023-01-19"},{"lineNumber":164,"author":{"gitId":"wxxedu"},"content":"                    writable.writeln(exception.getMessage());","lastModifiedDate":"2023-01-20"},{"lineNumber":165,"author":{"gitId":"wxxedu"},"content":"                    return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":166,"author":{"gitId":"wxxedu"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":167,"author":{"gitId":"wxxedu"},"content":"                final Task res \u003d tasks.remove(index);","lastModifiedDate":"2023-01-19"},{"lineNumber":168,"author":{"gitId":"wxxedu"},"content":"                writable.writeln(\"removed: \" + res);","lastModifiedDate":"2023-01-20"},{"lineNumber":169,"author":{"gitId":"wxxedu"},"content":"                return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":170,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":171,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":172,"author":{"gitId":"wxxedu"},"content":"            @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":173,"author":{"gitId":"wxxedu"},"content":"            public String getId() {","lastModifiedDate":"2023-01-19"},{"lineNumber":174,"author":{"gitId":"wxxedu"},"content":"                return \"delete\";","lastModifiedDate":"2023-01-19"},{"lineNumber":175,"author":{"gitId":"wxxedu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":176,"author":{"gitId":"wxxedu"},"content":"        };","lastModifiedDate":"2023-01-19"},{"lineNumber":177,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":178,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":179,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":180,"author":{"gitId":"wxxedu"},"content":"    public void register(NestableExecutableObject nestable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":181,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(getAddTaskExecutable(","lastModifiedDate":"2023-01-19"},{"lineNumber":182,"author":{"gitId":"wxxedu"},"content":"                ToDo::fromTokens,","lastModifiedDate":"2023-01-19"},{"lineNumber":183,"author":{"gitId":"wxxedu"},"content":"                \"todo\"","lastModifiedDate":"2023-01-19"},{"lineNumber":184,"author":{"gitId":"wxxedu"},"content":"        ));","lastModifiedDate":"2023-01-19"},{"lineNumber":185,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(getAddTaskExecutable(","lastModifiedDate":"2023-01-19"},{"lineNumber":186,"author":{"gitId":"wxxedu"},"content":"                Deadline::fromTokens,","lastModifiedDate":"2023-01-19"},{"lineNumber":187,"author":{"gitId":"wxxedu"},"content":"                \"deadline\"","lastModifiedDate":"2023-01-19"},{"lineNumber":188,"author":{"gitId":"wxxedu"},"content":"        ));","lastModifiedDate":"2023-01-19"},{"lineNumber":189,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(getAddTaskExecutable(","lastModifiedDate":"2023-01-19"},{"lineNumber":190,"author":{"gitId":"wxxedu"},"content":"                Event::fromTokens,","lastModifiedDate":"2023-01-19"},{"lineNumber":191,"author":{"gitId":"wxxedu"},"content":"                \"event\"","lastModifiedDate":"2023-01-19"},{"lineNumber":192,"author":{"gitId":"wxxedu"},"content":"        ));","lastModifiedDate":"2023-01-19"},{"lineNumber":193,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(getListTodosExecutable());","lastModifiedDate":"2023-01-19"},{"lineNumber":194,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(","lastModifiedDate":"2023-01-19"},{"lineNumber":195,"author":{"gitId":"wxxedu"},"content":"                getMarkerExecutable(true, \"mark\")","lastModifiedDate":"2023-01-19"},{"lineNumber":196,"author":{"gitId":"wxxedu"},"content":"        );","lastModifiedDate":"2023-01-19"},{"lineNumber":197,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(","lastModifiedDate":"2023-01-19"},{"lineNumber":198,"author":{"gitId":"wxxedu"},"content":"                getMarkerExecutable(false, \"unmark\")","lastModifiedDate":"2023-01-19"},{"lineNumber":199,"author":{"gitId":"wxxedu"},"content":"        );","lastModifiedDate":"2023-01-19"},{"lineNumber":200,"author":{"gitId":"wxxedu"},"content":"        nestable.registerIdentifiableExecutable(getDeleteExecutable());","lastModifiedDate":"2023-01-19"},{"lineNumber":201,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":202,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":202}},{"path":"src/main/java/domain/usecases/UnknownCommandUsecase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package domain.usecases;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.*;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"public class UnknownCommandUsecase implements Executable, ExecutableRegisterable {","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"    public UnknownCommandUsecase(Writable writable) {","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"        this.writable \u003d writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"    private final Writable writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"    public ExitStatus execute(String[] tokens) {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"                \"means :-(\");","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"        return ExitStatus.finishCurrentIteration;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    public void register(NestableExecutableObject nestable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"        nestable.registerPostExecutable(this);","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":20}},{"path":"src/main/java/presentation/controllers/DukeEventLoop.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package presentation.controllers;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import core.singletons.Singletons;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.EventLoop;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.Executable;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.NestableExecutableObject;","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.ByeUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.TaskManagerUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"import domain.usecases.UnknownCommandUsecase;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":" * The event loop for managing Duke.","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"public class DukeEventLoop extends EventLoop {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    private DukeEventLoop(Scanner scanner, Executable rootExecutable) {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"        super(rootExecutable);","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"wxxedu"},"content":"        this.scanner \u003d scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"wxxedu"},"content":"    public static DukeEventLoop createEventLoop(Scanner scanner) {","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"wxxedu"},"content":"        final NestableExecutableObject executable \u003d","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"wxxedu"},"content":"                new NestableExecutableObject();","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"wxxedu"},"content":"        final ByeUsecase bye \u003d Singletons.get(ByeUsecase.class);","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"wxxedu"},"content":"        bye.register(executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"wxxedu"},"content":"        // final EchoUsecase echo \u003d new EchoUsecase();","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"wxxedu"},"content":"        // echo.register(executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"wxxedu"},"content":"        final TaskManagerUsecase manager \u003d","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"wxxedu"},"content":"                Singletons.get(TaskManagerUsecase.class);","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"wxxedu"},"content":"        manager.register(executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"wxxedu"},"content":"        final UnknownCommandUsecase unknown \u003d","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"wxxedu"},"content":"                Singletons.get(UnknownCommandUsecase.class);","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"wxxedu"},"content":"        unknown.register(executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"wxxedu"},"content":"        return new DukeEventLoop(scanner, executable);","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"wxxedu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"wxxedu"},"content":"     * The scanner used for reading user input.","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"wxxedu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"wxxedu"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"wxxedu"},"content":"    protected String[] getTokens() {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"wxxedu"},"content":"        return scanner.nextLine().trim().split(\" \");","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":48}},{"path":"src/main/java/presentation/ui/SystemOut.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"package presentation.ui;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"import domain.entities.core.Writable;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":" * This will be writing the contents to the System\u0027s output stream.","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"public class SystemOut implements Writable {","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"wxxedu"},"content":"    public void write(Object content) {","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"wxxedu"},"content":"        System.out.print(content.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"wxxedu"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"wxxedu"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"wxxedu"},"content":"    public void writeln(Object content) {","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"wxxedu"},"content":"        System.out.println(content.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"wxxedu"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"wxxedu"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"wxxedu":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wxxedu"},"content":"todo hello","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"wxxedu"},"content":"deadline CS2103T Week 2 homework /by 23:59 Thursday 19th, Jan","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"wxxedu"},"content":"event CS2101 Group Meeting /from Wednesday 7PM /to Wednesday 9PM","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"wxxedu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"wxxedu"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"wxxedu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"wxxedu"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"wxxedu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"wxxedu"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"wxxedu":9}}]
