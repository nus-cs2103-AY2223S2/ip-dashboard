[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"T | 1 | test","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"D | 0 | homework | thursday","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"E | 0 | interview | 1 | 2","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"zhacatomn":3}},{"path":"src/main/java/duke/BadCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"public class BadCommandException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    public BadCommandException(String errMsg) {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"        super(\"â˜¹ OOPS!!! \" + errMsg);","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":7}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"    protected String by;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"    protected LocalDateTime byObj;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"    protected static DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"    protected static DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, hh:mma\");","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"        super(description.trim(), TaskSymbol.DEADLINE);","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"        this.by \u003d by.trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"        if (this.description.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"        if (this.by.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The \u0027by\u0027 date of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"zhacatomn"},"content":"            byObj \u003d LocalDateTime.parse(by, inputFormatter);","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"zhacatomn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"zhacatomn"},"content":"            byObj \u003d null;","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"zhacatomn"},"content":"     * Getter function for by date","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"zhacatomn"},"content":"     * @return The by date","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"zhacatomn"},"content":"    public String getByDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"zhacatomn"},"content":"        return by;","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"zhacatomn"},"content":"     * Represent duke.Deadline as a string","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"zhacatomn"},"content":"     * @return String representation of a duke.Deadline","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"zhacatomn"},"content":"        return String.format(","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"zhacatomn"},"content":"            \"%s (by: %s)\", ","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"zhacatomn"},"content":"            super.toString(), ","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zhacatomn"},"content":"            byObj \u003d\u003d null ? by : byObj.format(outputFormatter)","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"zhacatomn"},"content":"        );","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":47}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"    static protected ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"    static protected final String DATA_DIR \u003d \"data/\";","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"    static protected final String DATA_FILENAME \u003d \"duke.txt\";","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"     * Helper function to add a new task to the ArrayList, while outputting a message","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"     * @param newTask the new duke.Task object to be added","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"    public static void addTask(Task newTask) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"zhacatomn"},"content":"                \"Got it. I\u0027ve added this task:\\n\\t\\t%s\\n\\tNow you have %d task%s in the list.\",","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"zhacatomn"},"content":"                newTask,","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"zhacatomn"},"content":"                tasks.size(),","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zhacatomn"},"content":"                tasks.size() \u003e 1 ? \"s\" : \"\"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zhacatomn"},"content":"        ));","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"zhacatomn"},"content":"     * Helper function to add a new task to the ArrayList, while outputting a message","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"zhacatomn"},"content":"     * @param idx The index of the task to be removed","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"zhacatomn"},"content":"     * @throws BadCommandException","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"zhacatomn"},"content":"    public static void removeTask(int idx) throws BadCommandException {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"zhacatomn"},"content":"        if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"zhacatomn"},"content":"            throw new BadCommandException(\"Index given is out of bounds!\");","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"zhacatomn"},"content":"        Task taskToDelete \u003d tasks.get(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"zhacatomn"},"content":"        tasks.remove(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(String.format(","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"zhacatomn"},"content":"                \"Got it. I\u0027ve removed this task:\\n\\t\\t%s\\n\\tNow you have %d task%s in the list.\",","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"zhacatomn"},"content":"                taskToDelete,","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"zhacatomn"},"content":"                tasks.size(),","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"zhacatomn"},"content":"                tasks.size() \u003e 1 ? \"s\" : \"\"","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"zhacatomn"},"content":"        ));","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"zhacatomn"},"content":"     * Helper function the output a list of tasks","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"zhacatomn"},"content":"    public static void listTasks() {","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"zhacatomn"},"content":"        StringBuilder listOutput \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"zhacatomn"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"zhacatomn"},"content":"            listOutput.append(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"zhacatomn"},"content":"                    \"\\t%d. %s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"zhacatomn"},"content":"                    i + 1,","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"zhacatomn"},"content":"                    tasks.get(i)","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"zhacatomn"},"content":"            ));","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"zhacatomn"},"content":"            if (i \u003c tasks.size() - 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"zhacatomn"},"content":"                listOutput.append(\"\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(listOutput.toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"zhacatomn"},"content":"     * Helper function to parse the commands and params (if available)","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"zhacatomn"},"content":"     * @param inputStr the inputted string by the user","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"zhacatomn"},"content":"     * @throws BadCommandException","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"zhacatomn"},"content":"    public static void parseInput(String inputStr) throws BadCommandException {","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"zhacatomn"},"content":"        inputStr \u003d inputStr.trim();","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"zhacatomn"},"content":"            if (inputStr.equals(\"list\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"zhacatomn"},"content":"                listTasks();","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"zhacatomn"},"content":"                return;","lastModifiedDate":"2023-01-18"},{"lineNumber":76,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":77,"author":{"gitId":"zhacatomn"},"content":"            String[] inputSplit \u003d inputStr.split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":78,"author":{"gitId":"zhacatomn"},"content":"            if (inputSplit.length \u003c 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"zhacatomn"},"content":"                throw new BadCommandException(\"There are insufficient parameters!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":81,"author":{"gitId":"zhacatomn"},"content":"            String command \u003d inputSplit[0].trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"zhacatomn"},"content":"            String params \u003d inputSplit[1].trim();","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"zhacatomn"},"content":"            if (command.equals(\"mark\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"zhacatomn"},"content":"                int idx \u003d Integer.parseInt(params) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"zhacatomn"},"content":"                if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"Index given is out of bounds!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":88,"author":{"gitId":"zhacatomn"},"content":"                tasks.get(idx).markAsDone();","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"zhacatomn"},"content":"                prettyPrint(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"zhacatomn"},"content":"                        \"Nice! I\u0027ve marked this task as done:\\n\\t\\t%s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"zhacatomn"},"content":"                        tasks.get(idx)","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"zhacatomn"},"content":"                ));","lastModifiedDate":"2023-01-18"},{"lineNumber":93,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"zhacatomn"},"content":"                int idx \u003d Integer.parseInt(params) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"zhacatomn"},"content":"                if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"Index given is out of bounds!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":97,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":98,"author":{"gitId":"zhacatomn"},"content":"                tasks.get(idx).unmarkAsDone();","lastModifiedDate":"2023-01-19"},{"lineNumber":99,"author":{"gitId":"zhacatomn"},"content":"                prettyPrint(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":100,"author":{"gitId":"zhacatomn"},"content":"                        \"OK, I\u0027ve marked this task as not done yet:\\n\\t\\t%s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":101,"author":{"gitId":"zhacatomn"},"content":"                        tasks.get(idx)","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"zhacatomn"},"content":"                ));","lastModifiedDate":"2023-01-18"},{"lineNumber":103,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"zhacatomn"},"content":"                int idx \u003d Integer.parseInt(params) - 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"zhacatomn"},"content":"                removeTask(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"zhacatomn"},"content":"                addTask(new Todo(params.trim()));","lastModifiedDate":"2023-01-18"},{"lineNumber":108,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":109,"author":{"gitId":"zhacatomn"},"content":"                String[] paramsSplit \u003d params.split(\"/by\", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":110,"author":{"gitId":"zhacatomn"},"content":"                if (paramsSplit.length \u003c 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":111,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"There are insufficient parameters!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":112,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":113,"author":{"gitId":"zhacatomn"},"content":"                addTask(new Deadline(paramsSplit[0].trim(), paramsSplit[1].trim()));","lastModifiedDate":"2023-01-18"},{"lineNumber":114,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":115,"author":{"gitId":"zhacatomn"},"content":"                String[] paramsSplit \u003d params.split(\"/from|/to\", 3);","lastModifiedDate":"2023-01-18"},{"lineNumber":116,"author":{"gitId":"zhacatomn"},"content":"                if (paramsSplit.length \u003c 3) {","lastModifiedDate":"2023-01-18"},{"lineNumber":117,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"There are insufficient parameters!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":118,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":119,"author":{"gitId":"zhacatomn"},"content":"                addTask(new Event(paramsSplit[0].trim(), paramsSplit[1].trim(), paramsSplit[2].trim()));","lastModifiedDate":"2023-01-18"},{"lineNumber":120,"author":{"gitId":"zhacatomn"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":121,"author":{"gitId":"zhacatomn"},"content":"                throw new BadCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-18"},{"lineNumber":122,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":123,"author":{"gitId":"zhacatomn"},"content":"            saveTasks();","lastModifiedDate":"2023-01-21"},{"lineNumber":124,"author":{"gitId":"zhacatomn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":125,"author":{"gitId":"zhacatomn"},"content":"            prettyPrint(e.getMessage());","lastModifiedDate":"2023-01-18"},{"lineNumber":126,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":127,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":128,"author":{"gitId":"zhacatomn"},"content":"    public static void saveTasks() {","lastModifiedDate":"2023-01-21"},{"lineNumber":129,"author":{"gitId":"zhacatomn"},"content":"        File dataDirectory \u003d new File(DATA_DIR);","lastModifiedDate":"2023-01-21"},{"lineNumber":130,"author":{"gitId":"zhacatomn"},"content":"        if (!dataDirectory.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":131,"author":{"gitId":"zhacatomn"},"content":"            dataDirectory.mkdir();","lastModifiedDate":"2023-01-21"},{"lineNumber":132,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":133,"author":{"gitId":"zhacatomn"},"content":"        File dataFile \u003d new File(DATA_DIR + DATA_FILENAME);","lastModifiedDate":"2023-01-21"},{"lineNumber":134,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":135,"author":{"gitId":"zhacatomn"},"content":"            FileWriter fw \u003d new FileWriter(dataFile.getAbsoluteFile());","lastModifiedDate":"2023-01-21"},{"lineNumber":136,"author":{"gitId":"zhacatomn"},"content":"            for (Task task: tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"zhacatomn"},"content":"                ArrayList\u003cString\u003e params \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-21"},{"lineNumber":138,"author":{"gitId":"zhacatomn"},"content":"                params.add(task.getTaskType().getSymbol());","lastModifiedDate":"2023-01-21"},{"lineNumber":139,"author":{"gitId":"zhacatomn"},"content":"                params.add(task.isDone() ? \"1\" : \"0\");","lastModifiedDate":"2023-01-21"},{"lineNumber":140,"author":{"gitId":"zhacatomn"},"content":"                params.add(task.getDescription());","lastModifiedDate":"2023-01-21"},{"lineNumber":141,"author":{"gitId":"zhacatomn"},"content":"                if (task instanceof Event) {","lastModifiedDate":"2023-01-21"},{"lineNumber":142,"author":{"gitId":"zhacatomn"},"content":"                    Event castedTask \u003d (Event) task;","lastModifiedDate":"2023-01-21"},{"lineNumber":143,"author":{"gitId":"zhacatomn"},"content":"                    params.add(castedTask.getStartTime());","lastModifiedDate":"2023-01-21"},{"lineNumber":144,"author":{"gitId":"zhacatomn"},"content":"                    params.add(castedTask.getEndTime());","lastModifiedDate":"2023-01-21"},{"lineNumber":145,"author":{"gitId":"zhacatomn"},"content":"                } else if (task instanceof Deadline) {","lastModifiedDate":"2023-01-21"},{"lineNumber":146,"author":{"gitId":"zhacatomn"},"content":"                    Deadline castedTask \u003d (Deadline) task;","lastModifiedDate":"2023-01-21"},{"lineNumber":147,"author":{"gitId":"zhacatomn"},"content":"                    params.add(castedTask.getByDate());","lastModifiedDate":"2023-01-21"},{"lineNumber":148,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":149,"author":{"gitId":"zhacatomn"},"content":"                String outputStr \u003d String.join(\" | \", params);","lastModifiedDate":"2023-01-21"},{"lineNumber":150,"author":{"gitId":"zhacatomn"},"content":"                fw.write(outputStr + System.lineSeparator());","lastModifiedDate":"2023-01-21"},{"lineNumber":151,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":152,"author":{"gitId":"zhacatomn"},"content":"            fw.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":153,"author":{"gitId":"zhacatomn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":154,"author":{"gitId":"zhacatomn"},"content":"            prettyPrint(\"Error saving to hard drive: \" + e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":155,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":156,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":157,"author":{"gitId":"zhacatomn"},"content":"    public static void retrieveData() {","lastModifiedDate":"2023-01-21"},{"lineNumber":158,"author":{"gitId":"zhacatomn"},"content":"        File dataFile \u003d new File(DATA_DIR + DATA_FILENAME);","lastModifiedDate":"2023-01-21"},{"lineNumber":159,"author":{"gitId":"zhacatomn"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":160,"author":{"gitId":"zhacatomn"},"content":"            return;","lastModifiedDate":"2023-01-21"},{"lineNumber":161,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":162,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":163,"author":{"gitId":"zhacatomn"},"content":"            Scanner fileScanner \u003d new Scanner(dataFile);","lastModifiedDate":"2023-01-21"},{"lineNumber":164,"author":{"gitId":"zhacatomn"},"content":"            int rowCnt \u003d 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":165,"author":{"gitId":"zhacatomn"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":166,"author":{"gitId":"zhacatomn"},"content":"                rowCnt++;","lastModifiedDate":"2023-01-21"},{"lineNumber":167,"author":{"gitId":"zhacatomn"},"content":"                String[] inputStr \u003d fileScanner.nextLine().trim().split(\" \\\\| \");","lastModifiedDate":"2023-01-21"},{"lineNumber":168,"author":{"gitId":"zhacatomn"},"content":"                if (inputStr.length \u003c 3) {","lastModifiedDate":"2023-01-21"},{"lineNumber":169,"author":{"gitId":"zhacatomn"},"content":"                    continue;","lastModifiedDate":"2023-01-21"},{"lineNumber":170,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":171,"author":{"gitId":"zhacatomn"},"content":"                try {","lastModifiedDate":"2023-01-21"},{"lineNumber":172,"author":{"gitId":"zhacatomn"},"content":"                    Task newTask \u003d null;","lastModifiedDate":"2023-01-21"},{"lineNumber":173,"author":{"gitId":"zhacatomn"},"content":"                    if (inputStr[0].equals(Task.TaskSymbol.TODO.getSymbol())) {","lastModifiedDate":"2023-01-21"},{"lineNumber":174,"author":{"gitId":"zhacatomn"},"content":"                        newTask \u003d new Todo(inputStr[2]);","lastModifiedDate":"2023-01-21"},{"lineNumber":175,"author":{"gitId":"zhacatomn"},"content":"                        tasks.add(newTask);","lastModifiedDate":"2023-01-21"},{"lineNumber":176,"author":{"gitId":"zhacatomn"},"content":"                    } else if (inputStr[0].equals(Task.TaskSymbol.DEADLINE.getSymbol())) {","lastModifiedDate":"2023-01-21"},{"lineNumber":177,"author":{"gitId":"zhacatomn"},"content":"                        if (inputStr.length \u003c 4) {","lastModifiedDate":"2023-01-21"},{"lineNumber":178,"author":{"gitId":"zhacatomn"},"content":"                            continue;","lastModifiedDate":"2023-01-21"},{"lineNumber":179,"author":{"gitId":"zhacatomn"},"content":"                        }","lastModifiedDate":"2023-01-21"},{"lineNumber":180,"author":{"gitId":"zhacatomn"},"content":"                        newTask \u003d new Deadline(inputStr[2], inputStr[3]);","lastModifiedDate":"2023-01-21"},{"lineNumber":181,"author":{"gitId":"zhacatomn"},"content":"                        tasks.add(newTask);","lastModifiedDate":"2023-01-21"},{"lineNumber":182,"author":{"gitId":"zhacatomn"},"content":"                    } else if (inputStr[0].equals(Task.TaskSymbol.EVENT.getSymbol())) {","lastModifiedDate":"2023-01-21"},{"lineNumber":183,"author":{"gitId":"zhacatomn"},"content":"                        if (inputStr.length \u003c 5) {","lastModifiedDate":"2023-01-21"},{"lineNumber":184,"author":{"gitId":"zhacatomn"},"content":"                            continue;","lastModifiedDate":"2023-01-21"},{"lineNumber":185,"author":{"gitId":"zhacatomn"},"content":"                        }","lastModifiedDate":"2023-01-21"},{"lineNumber":186,"author":{"gitId":"zhacatomn"},"content":"                        newTask \u003d new Event(inputStr[2], inputStr[3], inputStr[4]);","lastModifiedDate":"2023-01-21"},{"lineNumber":187,"author":{"gitId":"zhacatomn"},"content":"                        tasks.add(newTask);","lastModifiedDate":"2023-01-21"},{"lineNumber":188,"author":{"gitId":"zhacatomn"},"content":"                    }","lastModifiedDate":"2023-01-21"},{"lineNumber":189,"author":{"gitId":"zhacatomn"},"content":"                    if (newTask !\u003d null) {","lastModifiedDate":"2023-01-21"},{"lineNumber":190,"author":{"gitId":"zhacatomn"},"content":"                        if (Integer.parseInt(inputStr[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-01-21"},{"lineNumber":191,"author":{"gitId":"zhacatomn"},"content":"                            newTask.markAsDone();","lastModifiedDate":"2023-01-21"},{"lineNumber":192,"author":{"gitId":"zhacatomn"},"content":"                        }","lastModifiedDate":"2023-01-21"},{"lineNumber":193,"author":{"gitId":"zhacatomn"},"content":"                    }","lastModifiedDate":"2023-01-21"},{"lineNumber":194,"author":{"gitId":"zhacatomn"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":195,"author":{"gitId":"zhacatomn"},"content":"                    prettyPrint(String.format(","lastModifiedDate":"2023-01-21"},{"lineNumber":196,"author":{"gitId":"zhacatomn"},"content":"                            \"Error processing row %d of %s: %s\",","lastModifiedDate":"2023-01-21"},{"lineNumber":197,"author":{"gitId":"zhacatomn"},"content":"                            rowCnt,","lastModifiedDate":"2023-01-21"},{"lineNumber":198,"author":{"gitId":"zhacatomn"},"content":"                            DATA_DIR + DATA_FILENAME,","lastModifiedDate":"2023-01-21"},{"lineNumber":199,"author":{"gitId":"zhacatomn"},"content":"                            e.getMessage()","lastModifiedDate":"2023-01-21"},{"lineNumber":200,"author":{"gitId":"zhacatomn"},"content":"                    ));","lastModifiedDate":"2023-01-21"},{"lineNumber":201,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":202,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":203,"author":{"gitId":"zhacatomn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":204,"author":{"gitId":"zhacatomn"},"content":"            prettyPrint(\"Error retrieving local data: \" + e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":205,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":206,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":207,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":208,"author":{"gitId":"zhacatomn"},"content":"     * Helper function to output to the user \"prettily\".","lastModifiedDate":"2023-01-19"},{"lineNumber":209,"author":{"gitId":"zhacatomn"},"content":"     * @param out the string to output","lastModifiedDate":"2023-01-19"},{"lineNumber":210,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":211,"author":{"gitId":"zhacatomn"},"content":"    public static void prettyPrint(String out) {","lastModifiedDate":"2023-01-18"},{"lineNumber":212,"author":{"gitId":"zhacatomn"},"content":"        final String divider \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-01-18"},{"lineNumber":213,"author":{"gitId":"zhacatomn"},"content":"        System.out.println(String.format(\"\\t%s\\n\\t%s\\n\\t%s\", divider, out, divider));","lastModifiedDate":"2023-01-18"},{"lineNumber":214,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":215,"author":{"gitId":"zhacatomn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-18"},{"lineNumber":216,"author":{"gitId":"zhacatomn"},"content":"        // Retrieve list from data/duke.txt","lastModifiedDate":"2023-01-21"},{"lineNumber":217,"author":{"gitId":"zhacatomn"},"content":"        retrieveData();","lastModifiedDate":"2023-01-21"},{"lineNumber":218,"author":{"gitId":"zhacatomn"},"content":"        // Start receiving inputs from terminal","lastModifiedDate":"2023-01-21"},{"lineNumber":219,"author":{"gitId":"zhacatomn"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-18"},{"lineNumber":220,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(\"Hello! I\u0027m Duke\\n\\tWhat can I do for you?\");","lastModifiedDate":"2023-01-19"},{"lineNumber":221,"author":{"gitId":"zhacatomn"},"content":"        String inputStr \u003d inputScanner.nextLine().trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":222,"author":{"gitId":"zhacatomn"},"content":"        while (!inputStr.equals(\"bye\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":223,"author":{"gitId":"zhacatomn"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":224,"author":{"gitId":"zhacatomn"},"content":"                parseInput(inputStr);","lastModifiedDate":"2023-01-18"},{"lineNumber":225,"author":{"gitId":"zhacatomn"},"content":"            } catch (BadCommandException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":226,"author":{"gitId":"zhacatomn"},"content":"                prettyPrint(e.getMessage());","lastModifiedDate":"2023-01-18"},{"lineNumber":227,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":228,"author":{"gitId":"zhacatomn"},"content":"            inputStr \u003d inputScanner.nextLine().trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":229,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":230,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(\"Bye. Hope to see you again soon!\");;","lastModifiedDate":"2023-01-18"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zhacatomn":229,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"        super(\"â˜¹ OOPS!!! \" + errMsg);","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":7}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"    protected String startTime;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"    protected LocalDateTime startObj;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"    protected String endTime;","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"    protected LocalDateTime endObj;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"    protected static DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"    protected static DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, hh:mma\");","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    public Event(String description, String startTime, String endTime) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"        super(description.trim(), TaskSymbol.EVENT);","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"        this.startTime \u003d startTime.trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"        this.endTime \u003d endTime.trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"        if (this.description.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"zhacatomn"},"content":"        if (this.startTime.equals(\"\") || this.endTime.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The start and/or end time of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"zhacatomn"},"content":"            startObj \u003d LocalDateTime.parse(startTime, inputFormatter);","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zhacatomn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zhacatomn"},"content":"            startObj \u003d null;","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"zhacatomn"},"content":"            endObj \u003d LocalDateTime.parse(endTime, inputFormatter);","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zhacatomn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"zhacatomn"},"content":"            endObj \u003d null;","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"zhacatomn"},"content":"     * Getter function for start time","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"zhacatomn"},"content":"     * @return Start time","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"zhacatomn"},"content":"    public String getStartTime() {","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"zhacatomn"},"content":"        return startTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"zhacatomn"},"content":"     * Getter function for end time","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"zhacatomn"},"content":"     * @return End time","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"zhacatomn"},"content":"    public String getEndTime() {","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"zhacatomn"},"content":"        return endTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"zhacatomn"},"content":"     * Represent duke.Event as a string","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"zhacatomn"},"content":"     * @return String representation of a duke.Event","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"zhacatomn"},"content":"        return String.format(","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"zhacatomn"},"content":"            \"%s (from: %s to: %s)\", ","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"zhacatomn"},"content":"            super.toString(), ","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"zhacatomn"},"content":"            startObj \u003d\u003d null ? startTime : startObj.format(outputFormatter),","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"zhacatomn"},"content":"            endObj \u003d\u003d null ? endTime : endObj.format(outputFormatter)","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"zhacatomn"},"content":"        );","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":64}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    public enum TaskSymbol {","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"        TODO (\"T\"),","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        EVENT (\"E\"),","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"        DEADLINE (\"D\");","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"        private final String symbol;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"        TaskSymbol(String symbol) {","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"        /**","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"         * Getter function for the symbol of the enum","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"         * @return Symbol string","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"         */","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"        public String getSymbol() {","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"            return symbol;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"zhacatomn"},"content":"    };","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"zhacatomn"},"content":"    protected String description;","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"zhacatomn"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"zhacatomn"},"content":"    protected TaskSymbol symbol;","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"zhacatomn"},"content":"     * Constructor for task","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"zhacatomn"},"content":"     * @param description Description of the task","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"zhacatomn"},"content":"    protected Task(String description, TaskSymbol symbol) {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"zhacatomn"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"zhacatomn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"zhacatomn"},"content":"        this.symbol \u003d symbol;","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"zhacatomn"},"content":"     * Gets the status icon for the current task. (\"X\" or \" \")","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"zhacatomn"},"content":"     * @return String representing the status","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"zhacatomn"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"zhacatomn"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"zhacatomn"},"content":"     * Getter function to return the description of the task","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"zhacatomn"},"content":"     * @return A String representing the description","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"zhacatomn"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"zhacatomn"},"content":"        return description;","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"zhacatomn"},"content":"     * Setter function to mark the task as done","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"zhacatomn"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"zhacatomn"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"zhacatomn"},"content":"     * Setter function to mark the as undone","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"zhacatomn"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"zhacatomn"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"zhacatomn"},"content":"     * Getter function for isDone","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"zhacatomn"},"content":"     * @return isDone","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"zhacatomn"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"zhacatomn"},"content":"        return isDone;","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"zhacatomn"},"content":"     * Getter function for the task type","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"zhacatomn"},"content":"     * @return Task type enum","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"zhacatomn"},"content":"    public TaskSymbol getTaskType() {","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"zhacatomn"},"content":"        return this.symbol;","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"zhacatomn"},"content":"     * toString function to represent the task as a string","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"zhacatomn"},"content":"     * @return String representation of the task","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":86,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"zhacatomn"},"content":"        return String.format(\"[%s][%s] %s\", this.symbol.getSymbol(), getStatusIcon(), getDescription());","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":90}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"package duke;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    public Todo(String description) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"        super(description.trim(), TaskSymbol.TODO);","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        if (this.description.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"     * Represent duke.Todo as a string","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"     * @return String representation of a duke.Todo","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"        return String.format(\"%s\", super.toString());","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"todo read book","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"todo join sports club","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"mark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"mark 4","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"todo borrow book","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"delete 2","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"delete 5","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"delete 10","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"bye","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"zhacatomn":1}}]
