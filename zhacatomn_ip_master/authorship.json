[{"path":"src/main/java/BadCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"public class BadCommandException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"    public BadCommandException(String errMsg) {","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"        super(\"â˜¹ OOPS!!! \" + errMsg);","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":5}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"    protected String by;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"        super(description.trim());","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"        this.by \u003d by.trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        if (this.description.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"        if (this.by.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The \u0027by\u0027 date of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), by);","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":17}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    static protected ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"    public static void addTask(Task newTask) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"                \"Got it. I\u0027ve added this task:\\n\\t\\t%s\\n\\tNow you have %d task%s in the list.\",","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"                newTask,","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"                tasks.size(),","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"                tasks.size() \u003e 1 ? \"s\" : \"\"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"        ));","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    public static void removeTask(int idx) throws BadCommandException {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"        if (idx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"            throw new BadCommandException(\"Index given is out of bounds!\");","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"        Task taskToDelete \u003d tasks.get(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"        tasks.remove(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(String.format(","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"zhacatomn"},"content":"                \"Got it. I\u0027ve removed this task:\\n\\t\\t%s\\n\\tNow you have %d task%s in the list.\",","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"zhacatomn"},"content":"                taskToDelete,","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"zhacatomn"},"content":"                tasks.size(),","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zhacatomn"},"content":"                tasks.size() \u003e 1 ? \"s\" : \"\"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zhacatomn"},"content":"        ));","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"zhacatomn"},"content":"    public static void listTasks() {","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"zhacatomn"},"content":"        StringBuilder listOutput \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"zhacatomn"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"zhacatomn"},"content":"            listOutput.append(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"zhacatomn"},"content":"                    \"\\t%d. %s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"zhacatomn"},"content":"                    i + 1,","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"zhacatomn"},"content":"                    tasks.get(i)","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"zhacatomn"},"content":"            ));","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"zhacatomn"},"content":"            if (i \u003c tasks.size() - 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"zhacatomn"},"content":"                listOutput.append(\"\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(listOutput.toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"zhacatomn"},"content":"    public static void parseInput(String inputStr) throws BadCommandException {","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"zhacatomn"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"zhacatomn"},"content":"            if (inputStr.equals(\"list\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"zhacatomn"},"content":"                listTasks();","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"zhacatomn"},"content":"                return;","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"zhacatomn"},"content":"            String[] inputSplit \u003d inputStr.split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"zhacatomn"},"content":"            if (inputSplit.length \u003c 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"zhacatomn"},"content":"                throw new BadCommandException(\"There are insufficient parameters!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"zhacatomn"},"content":"            String command \u003d inputSplit[0].trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"zhacatomn"},"content":"            String params \u003d inputSplit[1];","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"zhacatomn"},"content":"            if (command.equals(\"mark\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"zhacatomn"},"content":"                int idx \u003d Integer.parseInt(params) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"zhacatomn"},"content":"                if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"Index given is out of bounds!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"zhacatomn"},"content":"                tasks.get(idx).markAsDone();","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"zhacatomn"},"content":"                prettyPrint(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"zhacatomn"},"content":"                        \"Nice! I\u0027ve marked this task as done:\\n\\t\\t%s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"zhacatomn"},"content":"                        tasks.get(idx)","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"zhacatomn"},"content":"                ));","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"zhacatomn"},"content":"                int idx \u003d Integer.parseInt(params) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"zhacatomn"},"content":"                if (idx \u003e\u003d tasks.size() || idx \u003c 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"Index given is out of bounds!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"zhacatomn"},"content":"                tasks.get(idx).unmarkAsDone();","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"zhacatomn"},"content":"                prettyPrint(String.format(","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"zhacatomn"},"content":"                        \"OK, I\u0027ve marked this task as not done yet:\\n\\t\\t%s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":72,"author":{"gitId":"zhacatomn"},"content":"                        tasks.get(idx)","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"zhacatomn"},"content":"                ));","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"zhacatomn"},"content":"                int idx \u003d Integer.parseInt(params) - 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"zhacatomn"},"content":"                removeTask(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":78,"author":{"gitId":"zhacatomn"},"content":"                addTask(new Todo(params.trim()));","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"zhacatomn"},"content":"                String[] paramsSplit \u003d params.split(\"/by\", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":81,"author":{"gitId":"zhacatomn"},"content":"                if (paramsSplit.length \u003c 2) {","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"There are insufficient parameters!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":83,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"zhacatomn"},"content":"                addTask(new Deadline(paramsSplit[0].trim(), paramsSplit[1].trim()));","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"zhacatomn"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":86,"author":{"gitId":"zhacatomn"},"content":"                String[] paramsSplit \u003d params.split(\"/from|/to\", 3);","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"zhacatomn"},"content":"                if (paramsSplit.length \u003c 3) {","lastModifiedDate":"2023-01-18"},{"lineNumber":88,"author":{"gitId":"zhacatomn"},"content":"                    throw new BadCommandException(\"There are insufficient parameters!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"zhacatomn"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"zhacatomn"},"content":"                addTask(new Event(paramsSplit[0].trim(), paramsSplit[1].trim(), paramsSplit[2].trim()));","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"zhacatomn"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"zhacatomn"},"content":"                throw new BadCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-18"},{"lineNumber":93,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"zhacatomn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"zhacatomn"},"content":"            prettyPrint(e.getMessage());","lastModifiedDate":"2023-01-18"},{"lineNumber":96,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":97,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":98,"author":{"gitId":"zhacatomn"},"content":"    public static void prettyPrint(String out) {","lastModifiedDate":"2023-01-18"},{"lineNumber":99,"author":{"gitId":"zhacatomn"},"content":"        final String divider \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-01-18"},{"lineNumber":100,"author":{"gitId":"zhacatomn"},"content":"        System.out.println(String.format(\"\\t%s\\n\\t%s\\n\\t%s\", divider, out, divider));","lastModifiedDate":"2023-01-18"},{"lineNumber":101,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-18"},{"lineNumber":103,"author":{"gitId":"zhacatomn"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-18"},{"lineNumber":104,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(\"Hello! I\u0027m Duke\\n\\tWhat can I do for you?\");","lastModifiedDate":"2023-01-18"},{"lineNumber":105,"author":{"gitId":"zhacatomn"},"content":"        String inputStr \u003d inputScanner.nextLine().trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":106,"author":{"gitId":"zhacatomn"},"content":"        while (!inputStr.equals(\"bye\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"zhacatomn"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":108,"author":{"gitId":"zhacatomn"},"content":"                parseInput(inputStr);","lastModifiedDate":"2023-01-18"},{"lineNumber":109,"author":{"gitId":"zhacatomn"},"content":"            } catch (BadCommandException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":110,"author":{"gitId":"zhacatomn"},"content":"                prettyPrint(e.getMessage());","lastModifiedDate":"2023-01-18"},{"lineNumber":111,"author":{"gitId":"zhacatomn"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":112,"author":{"gitId":"zhacatomn"},"content":"            inputStr \u003d inputScanner.nextLine().trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":113,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":114,"author":{"gitId":"zhacatomn"},"content":"        prettyPrint(\"Bye. Hope to see you again soon!\");;","lastModifiedDate":"2023-01-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zhacatomn":112,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"        super(\"â˜¹ OOPS!!! \" + errMsg);","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"    protected String startTime;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"    protected String endTime;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"    public Event(String description, String startTime, String endTime) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"        super(description.trim());","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        this.startTime \u003d startTime.trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"        this.endTime \u003d endTime.trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"        if (this.description.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"        if (this.startTime.equals(\"\") || this.endTime.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The start and/or end time of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), startTime, endTime);","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":19}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"public class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"    protected String description;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhacatomn"},"content":"        return description;","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"zhacatomn"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"zhacatomn"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"zhacatomn"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"zhacatomn"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"zhacatomn"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"zhacatomn"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":30}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"    public Todo(String description) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"        super(description.trim());","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"        if (this.description.equals(\"\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhacatomn"},"content":"todo read book","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"zhacatomn"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"zhacatomn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhacatomn"},"content":"todo join sports club","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhacatomn"},"content":"mark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhacatomn"},"content":"mark 4","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhacatomn"},"content":"todo borrow book","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhacatomn"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhacatomn"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhacatomn"},"content":"delete 2","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhacatomn"},"content":"delete 5","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zhacatomn"},"content":"delete 10","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zhacatomn"},"content":"bye","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhacatomn":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"zhacatomn"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"zhacatomn":1}}]
