[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"# duke.Duke project template","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zhoyx":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"zhoyx"},"content":"checkstyle {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"zhoyx"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"zhoyx":5,"-":41}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License.","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"zhoyx"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 duke.command could be found in your PATH.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo location of your Java installation.","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"goto fail","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":":findJavaFromJavaHome","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"if exist \"%JAVA_EXE%\" goto init","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo location of your Java installation.","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"goto fail","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":":init","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"zhoyx"},"content":"@rem Get duke.command-line arguments, handling Windows variants","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":":win9xME_args","lastModifiedDate":"2020-05-25"},{"lineNumber":73,"author":{"gitId":"zhoyx"},"content":"@rem Slurp the duke.command line arguments.","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"set CMD_LINE_ARGS\u003d","lastModifiedDate":"2020-05-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"set _SKIP\u003d2","lastModifiedDate":"2020-05-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":":win9xME_args_slurp","lastModifiedDate":"2020-05-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute","lastModifiedDate":"2020-05-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"set CMD_LINE_ARGS\u003d%*","lastModifiedDate":"2020-05-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":":execute","lastModifiedDate":"2020-05-25"},{"lineNumber":83,"author":{"gitId":"zhoyx"},"content":"@rem Setup the duke.command line","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2020-05-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"@rem Execute Gradle","lastModifiedDate":"2020-05-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%","lastModifiedDate":"2020-05-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":":end","lastModifiedDate":"2020-05-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2020-05-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2020-05-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":":fail","lastModifiedDate":"2020-05-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2020-05-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2020-05-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":":mainEnd","lastModifiedDate":"2020-05-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2020-05-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":":omega","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zhoyx":4,"-":99}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"import static duke.utils.FormatHelper.INPUTFORMAT;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import static duke.utils.FormatHelper.PRINTFORMAT;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"    Deadline(String description, LocalDateTime by) throws IllegalArgumentException {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"        return \"D||\" + super.toSaveFormat() + \"||\" + by.format(INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(PRINTFORMAT) + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"    public static Deadline fromSaveFormat(String savedData) {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"        String[] inputs \u003d savedData.split(\"\\\\|\\\\|\");","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"        Deadline generatedDeadline \u003d new Deadline(inputs[2], LocalDateTime.parse(inputs[3], INPUTFORMAT));","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"        if (inputs[1].equals(\"1\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"            generatedDeadline.setCompleted(true);","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"        return generatedDeadline;","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhoyx":34}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import static duke.utils.FormatHelper.INPUTFORMAT;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"    private static Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"    private static String currentInput;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"    private static TaskList taskList;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"    private static Storage memory \u003d new Storage(\"/duke.txt\");","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"    private static Ui ui \u003d new Ui();","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"        taskList \u003d new TaskList(memory.load());","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"        //Introduction","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"        ui.greet();","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"        currentInput \u003d sc.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"        while (!currentInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"            try {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"                //when there is no input","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"                if (currentInput.equals(\"\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"                    ui.reply(\"Please input a command\");","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"                } else if (currentInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"                    ui.reply(taskList.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"                } else if (currentInput.matches(\"mark \\\\d+\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"                    int index \u003d Integer.parseInt(currentInput.substring(5)) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"                    ui.reply(taskList.mark(index));","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"                    memory.saveState(taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"                } else if (currentInput.matches(\"unmark \\\\d+\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"                    int index \u003d Integer.parseInt(currentInput.substring(7)) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"zhoyx"},"content":"                    ui.reply(taskList.unmark(index));","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"zhoyx"},"content":"                    memory.saveState(taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"zhoyx"},"content":"                } else if (currentInput.matches(\"^(todo|deadline|event) .*\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"zhoyx"},"content":"                    if (currentInput.matches(\"^todo .*\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"zhoyx"},"content":"                        String description \u003d currentInput.substring(5);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"zhoyx"},"content":"                        ui.reply(taskList.addTodo(description));","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"zhoyx"},"content":"                    } else if (currentInput.matches(\"^deadline .*\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"zhoyx"},"content":"                        int byPos \u003d currentInput.indexOf(\" /by \");","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"zhoyx"},"content":"                        if (byPos \u003d\u003d -1) {","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"zhoyx"},"content":"                            throw new DukeException(\"Deadline not specified with /by\");","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"zhoyx"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"zhoyx"},"content":"                        String description \u003d currentInput.substring(9, byPos);","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"zhoyx"},"content":"                        String by \u003d currentInput.substring(byPos + 5);","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"zhoyx"},"content":"                        LocalDateTime convertedBy \u003d LocalDateTime.parse(by, INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"zhoyx"},"content":"                        ui.reply(taskList.addDeadline(description, convertedBy));","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"zhoyx"},"content":"                    } else if (currentInput.matches(\"^event .*\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"zhoyx"},"content":"                        int fromPos \u003d currentInput.indexOf(\" /from \");","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"zhoyx"},"content":"                        int toPos \u003d currentInput.indexOf(\" /to \");","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"zhoyx"},"content":"                        if (fromPos \u003d\u003d -1 || toPos \u003d\u003d -1 || toPos \u003e currentInput.length() + 4) {","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"zhoyx"},"content":"                            throw new DukeException(\"Please include both /from and /to\");","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"zhoyx"},"content":"                        }","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"zhoyx"},"content":"                        if (fromPos \u003e toPos) {","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"zhoyx"},"content":"                            throw new DukeException(\"Please add the from date first followed by to date\");","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"zhoyx"},"content":"                        }","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"zhoyx"},"content":"                        if (fromPos \u003d\u003d 5) {","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"zhoyx"},"content":"                            throw new DukeException(\"Please include a description of the task\");","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"zhoyx"},"content":"                        }","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"zhoyx"},"content":"                        String description \u003d currentInput.substring(6, fromPos);","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"zhoyx"},"content":"                        String from \u003d currentInput.substring(fromPos + 7, toPos);","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"zhoyx"},"content":"                        String to \u003d currentInput.substring(toPos + 5);","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"zhoyx"},"content":"                        LocalDateTime convertedFrom \u003d LocalDateTime.parse(from, INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"zhoyx"},"content":"                        LocalDateTime convertedTo \u003d LocalDateTime.parse(to, INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"zhoyx"},"content":"                        ui.reply(taskList.addEvent(description, convertedFrom, convertedTo));","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"zhoyx"},"content":"                    }","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"zhoyx"},"content":"                    memory.saveState(taskList);","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"zhoyx"},"content":"                } else if (currentInput.matches(\"^delete \\\\d+\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"zhoyx"},"content":"                    ui.reply(taskList.deleteTask(currentInput));","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"zhoyx"},"content":"                    memory.saveState(taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"zhoyx"},"content":"                } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"zhoyx"},"content":"                    ui.reply(\"Unknown command, please try again\");","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"zhoyx"},"content":"                }","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"zhoyx"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":77,"author":{"gitId":"zhoyx"},"content":"                ui.reply(e.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"zhoyx"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":79,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":80,"author":{"gitId":"zhoyx"},"content":"            currentInput \u003d sc.nextLine();","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"zhoyx"},"content":"        //Signing off","lastModifiedDate":"2023-01-17"},{"lineNumber":83,"author":{"gitId":"zhoyx"},"content":"        ui.signOff();","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zhoyx":82,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"    DukeException(String error) {","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"        super(error);","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"        return \"DukeException: \" + super.getMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zhoyx":12}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import static duke.utils.FormatHelper.PRINTFORMAT;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"import static duke.utils.FormatHelper.INPUTFORMAT;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"    Event (String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"        return \"E||\" + super.toSaveFormat() + \"||\" + this.from.format(INPUTFORMAT) + \"||\" + this.to.format(INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"                + \" (from: \" + this.from.format(PRINTFORMAT) + \", to: \" + this.to.format(PRINTFORMAT) + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"    public static Event fromSaveFormat(String savedData) {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"        String[] inputs \u003d savedData.split(\"\\\\|\\\\|\");","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"        LocalDateTime parseFrom \u003d LocalDateTime.parse(inputs[3], INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"        LocalDateTime parseTo \u003d LocalDateTime.parse(inputs[4], INPUTFORMAT);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"        Event generatedEvent \u003d new Event(inputs[2], parseFrom, parseTo);","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"        if (inputs[1].equals(\"1\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"zhoyx"},"content":"            generatedEvent.setCompleted(true);","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"zhoyx"},"content":"        return generatedEvent;","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhoyx":39}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"public class Parser {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"zhoyx":5}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import java.io.File;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"public class Storage {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"    private File storageFile;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"    Storage(String file) {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"            String innerPath \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"            Path path \u003d Paths.get(innerPath, \"src\", \"main\", \"java\", \"data\");","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"            Files.createDirectories(path);","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"            storageFile \u003d new File(path.toString() + file);","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"    // create an empty text file if there is no data or load the existing data to task list if data exist","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"            if (!storageFile.createNewFile()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"                // Parse the file and add the tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"                Scanner s \u003d new Scanner(storageFile);","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"                while (s.hasNext()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"                    String line \u003d s.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"                    switch (line.charAt(0)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"zhoyx"},"content":"                    case \u0027T\u0027:","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"zhoyx"},"content":"                        tasks.add(Todo.fromSaveFormat(line));","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"zhoyx"},"content":"                        break;","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"zhoyx"},"content":"                    case \u0027D\u0027:","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"zhoyx"},"content":"                        tasks.add(Deadline.fromSaveFormat(line));","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"zhoyx"},"content":"                        break;","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"zhoyx"},"content":"                    case \u0027E\u0027:","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"zhoyx"},"content":"                        tasks.add(Event.fromSaveFormat(line));","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"zhoyx"},"content":"                        break;","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"zhoyx"},"content":"                    }","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"zhoyx"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"zhoyx"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"zhoyx"},"content":"            return tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"zhoyx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"zhoyx"},"content":"            System.out.println(\"Error creating Storage file\");","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"zhoyx"},"content":"            return new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"zhoyx"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"zhoyx"},"content":"            FileWriter fw \u003d new FileWriter(storageFile, true);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"zhoyx"},"content":"            if (storageFile.length() \u003d\u003d 0) {","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"zhoyx"},"content":"                fw.write(t.toSaveFormat());","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"zhoyx"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"zhoyx"},"content":"                fw.write(System.lineSeparator() + t.toSaveFormat());","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"zhoyx"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"zhoyx"},"content":"            fw.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"zhoyx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"zhoyx"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"zhoyx"},"content":"    public void saveState(TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"zhoyx"},"content":"            int numberOfTasks \u003d tasks.size();","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"zhoyx"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"zhoyx"},"content":"            for (int i \u003d 0; i \u003c numberOfTasks; i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"zhoyx"},"content":"                Task t \u003d tasks.getTask(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"zhoyx"},"content":"                if (i !\u003d 0) {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"zhoyx"},"content":"                    sb.append(System.lineSeparator());","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"zhoyx"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"zhoyx"},"content":"                sb.append(t.toSaveFormat());","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"zhoyx"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"zhoyx"},"content":"            FileWriter fw \u003d new FileWriter(storageFile);","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"zhoyx"},"content":"            fw.write(sb.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"zhoyx"},"content":"            fw.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"zhoyx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"zhoyx"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"zhoyx":88}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"    private boolean completed;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"    private String description;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"    Task (String description) {","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"        return this.completed ? \"X\" : \" \";","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"        return this.description;","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"    public void setCompleted(boolean completed) {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"        this.completed \u003d completed;","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"        String status \u003d completed ? \"1\" : \"0\";","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"        return status + \"||\" + description;","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"zhoyx":35}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"public class TaskList {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"    TaskList() {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"    TaskList (ArrayList\u003cTask\u003e existingTasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"        this.tasks \u003d existingTasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"            return \"List empty, add tasks!\";","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"            StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"                Task curTask \u003d tasks.get(i);","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"                response.append((i+ 1)).append(\".\").append(curTask.toString());","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"                if (i \u003c tasks.size() - 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"                    response.append(\"\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"            return response.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"zhoyx"},"content":"    public int size() {","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"zhoyx"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"zhoyx"},"content":"    public String getTaskString(int index) {","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"zhoyx"},"content":"        return tasks.get(index).toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"zhoyx"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"zhoyx"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"zhoyx"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"zhoyx"},"content":"        this.tasks.add(t);","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"zhoyx"},"content":"    public String deleteTask(String command) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"zhoyx"},"content":"        int index \u003d Integer.parseInt(command.substring(7)) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"zhoyx"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"zhoyx"},"content":"            throw new DukeException(\"Error: Please input a valid task index!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"zhoyx"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"zhoyx"},"content":"            StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"zhoyx"},"content":"            response.append(\"Noted. I\u0027ve removed this task:\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"zhoyx"},"content":"            response.append(\"  \").append(this.getTaskString(index)).append(\"\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"zhoyx"},"content":"            tasks.remove(index);","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"zhoyx"},"content":"            response.append(\"Now you have \").append(this.size()).append(\" tasks in the list.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"zhoyx"},"content":"            return response.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"zhoyx"},"content":"    public String mark(int index) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"zhoyx"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"zhoyx"},"content":"            throw new DukeException(\"Task index out of bounds, please input a valid index\");","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"zhoyx"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"zhoyx"},"content":"            Task curTask \u003d tasks.get(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"zhoyx"},"content":"            curTask.setCompleted(true);","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"zhoyx"},"content":"            String output;","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"zhoyx"},"content":"            output \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"zhoyx"},"content":"            return output + \"  \" + curTask.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"zhoyx"},"content":"    public String unmark(int index) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"zhoyx"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"zhoyx"},"content":"            throw new DukeException(\"Task index out of bounds, please input a valid index\");","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"zhoyx"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"zhoyx"},"content":"            Task curTask \u003d tasks.get(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"zhoyx"},"content":"            curTask.setCompleted(false);","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"zhoyx"},"content":"            String output;","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"zhoyx"},"content":"            output \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"zhoyx"},"content":"            return output + \"  \" + curTask.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"zhoyx"},"content":"    public String addTodo(String description) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"zhoyx"},"content":"            StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"zhoyx"},"content":"            response.append(\"Got it. I\u0027ve added this task:\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"zhoyx"},"content":"            tasks.add(new Todo(description));","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"zhoyx"},"content":"            response.append(getAfterAddStatus());","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"zhoyx"},"content":"            return response.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"zhoyx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"zhoyx"},"content":"            throw new DukeException(\"Invalid Date and Time provided, use the format: dd/MM/yyyy HH:mm\");","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"zhoyx"},"content":"    public String addDeadline(String description, LocalDateTime by) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"zhoyx"},"content":"            StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"zhoyx"},"content":"            response.append(\"Got it. I\u0027ve added this task:\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"zhoyx"},"content":"            tasks.add(new Deadline(description, by));","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"zhoyx"},"content":"            response.append(getAfterAddStatus());","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"zhoyx"},"content":"            return response.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"zhoyx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"zhoyx"},"content":"            throw new DukeException(\"Invalid Date and Time provided, use the format: dd/MM/yyyy HH:mm\");","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"zhoyx"},"content":"    public String addEvent(String description, LocalDateTime from, LocalDateTime to) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"zhoyx"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"zhoyx"},"content":"            StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"zhoyx"},"content":"            response.append(\"Got it. I\u0027ve added this task:\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"zhoyx"},"content":"            tasks.add(new Event(description, from, to));","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"zhoyx"},"content":"            response.append(getAfterAddStatus());","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"zhoyx"},"content":"            return response.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"zhoyx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"zhoyx"},"content":"            throw new DukeException(\"Invalid Date and Time provided, use the format: dd/MM/yyyy HH:mm\");","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"zhoyx"},"content":"    private String getAfterAddStatus() {","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"zhoyx"},"content":"        int count \u003d tasks.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"zhoyx"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"zhoyx"},"content":"        response.append(\"  \").append(getTaskString(count - 1)).append(\"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"zhoyx"},"content":"        response.append(\"Now you have \").append(count).append(\" tasks in the list.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"zhoyx"},"content":"        return response.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"zhoyx":135}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"    Todo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"        return \"T||\" + super.toSaveFormat();","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"    public static Todo fromSaveFormat(String savedData) {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"        String[] inputs \u003d savedData.split(\"\\\\|\\\\|\");","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"        Todo generatedTodo \u003d new Todo(inputs[2]);","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"        if (inputs[1].equals(\"1\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"            generatedTodo.setCompleted(true);","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"        return generatedTodo;","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"zhoyx":26}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import duke.utils.FormatHelper;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"public class Ui {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"    private static final String linebreak \u003d \"    ___________________________________________________________________________________\";","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"    private Scanner input;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"    private PrintStream output;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"    public Ui() {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"        this.input \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"        this.output \u003d new PrintStream(System.out);","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"    };","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"    public void reply(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"        if (s.equals(\"\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"            return;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"        output.println(linebreak);","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"        output.println(FormatHelper.indent(4, s));","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"        output.println(linebreak);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"    public void greet() {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"        reply(\"Hello! I\u0027m Duke\\n What can I do for you?\");","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"zhoyx"},"content":"    public void signOff() {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"zhoyx"},"content":"        reply(\"Bye. Hope to see you again!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"zhoyx":34}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"    public abstract void execute();","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"zhoyx":5}},{"path":"src/main/java/duke/utils/FormatHelper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"package duke.utils;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":" * A utility class containing formatting methods","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"public final class FormatHelper {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"    public static final DateTimeFormatter PRINTFORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"    public static final DateTimeFormatter INPUTFORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"     * Adds indentations of n spaces to each new line in the input string.","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"     * @param n Number of spaces to add to each new line.","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"     * @param s The String to add indentation to.","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"     * @return A String with n spaces of indentation added to each new line.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"    public static String indent(int n, String s) {","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"        Stream\u003cString\u003e stream \u003d s.lines();","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"        final String spaces \u003d \" \".repeat(n);","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"        stream \u003d stream.map(sentence -\u003e spaces + sentence);","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zhoyx"},"content":"        return stream.collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zhoyx"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"zhoyx"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zhoyx":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhoyx"},"content":"wrong duke.command","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"zhoyx"},"content":"todo Borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zhoyx"},"content":"deadline return book /by 23/01/2023 03:22","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"zhoyx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"zhoyx"},"content":"event project meeting /from 30/12/2023 12:33 /to 12/12/2024 23:59","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"zhoyx"},"content":"event /from /to","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zhoyx"},"content":"event Tennis /from Friday","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zhoyx"},"content":"event /from 28 Jan 2023 /to 30 Jan 2023","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zhoyx"},"content":"event Tennis /to Friday /from Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"zhoyx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zhoyx"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zhoyx"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zhoyx"},"content":"mark 5","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zhoyx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zhoyx"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"delete 1","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zhoyx"},"content":"delete 10","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"zhoyx"},"content":"delete -2","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"zhoyx"},"content":"delete 1","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"zhoyx"},"content":"delete 1","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zhoyx":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"zhoyx"},"content":"REM run the program, feed duke.command from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"zhoyx"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zhoyx":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"zhoyx"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/**/*.java","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"zhoyx"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zhoyx":2,"-":36}}]
