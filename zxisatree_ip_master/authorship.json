[{"path":"Duke.java.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"public class duke.Duke {","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"        duke.TaskList taskList \u003d new duke.TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"        String reply \u003d \"\";","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"        String dataFolderPath \u003d \"data\";","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"        String dataFilePath \u003d dataFolderPath + \"/duke.txt\";","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"        FileWriter writer;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"        // Create the file if it does not exist","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"            File targetFile \u003d new File(dataFilePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"            File parent \u003d targetFile.getParentFile();","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"            if (parent !\u003d null \u0026\u0026 !parent.exists() \u0026\u0026 !parent.mkdirs()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"                throw new IllegalStateException(\"Couldn\u0027t create dir: \" + parent);","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"            if (!targetFile.createNewFile()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"                // Load data","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"                Scanner dataFile \u003d new Scanner(targetFile);","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"                String dataLine;","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"                Pattern wholeStrPattern \u003d Pattern.compile(\"\\\\d+\\\\.\\\\[(T|D|E)]\\\\[( |X)\\\\] (.*)\");","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"                Pattern deadlinePattern \u003d Pattern.compile(\"(.*) /by (.*)\");","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"                Pattern eventPattern \u003d Pattern.compile(\"(.*) /from (.*) /to (.*)\");;","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"                Matcher wholeStrMatcher, individualMatcher;","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"                tasks.Task toAdd;","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"                while (dataFile.hasNext()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"                    dataLine \u003d dataFile.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"                    wholeStrMatcher \u003d wholeStrPattern.matcher(dataLine);","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"                    if (wholeStrMatcher.find()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"                        // Group 0 is the whole matched string","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"                        switch (wholeStrMatcher.group(1)) {","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"                        case \"T\":","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"                            toAdd \u003d new tasks.ToDo(wholeStrMatcher.group(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"                            break;","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"                        case \"D\":","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"                            individualMatcher \u003d deadlinePattern.matcher(wholeStrMatcher.group(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"                            if (individualMatcher.find()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"                                toAdd \u003d new tasks.Deadline(individualMatcher.group(1), individualMatcher.group(2), true);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"                            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"                                throw new exceptions.InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"                            }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"                            break;","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"                        case \"E\":","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"                            individualMatcher \u003d eventPattern.matcher(wholeStrMatcher.group(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"                            if (individualMatcher.find()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"                                toAdd \u003d new tasks.Event(individualMatcher.group(1), individualMatcher.group(2), individualMatcher.group(3), true);","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"                            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"                                throw new exceptions.InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"                            }","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"                            break;","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"                        default:","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"                            throw new exceptions.InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"                        }","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"                        if (wholeStrMatcher.group(2).equals(\"X\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"                            toAdd.setDone(true);","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"                        }","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"                        taskList.addTask(toAdd);","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"zxisatree"},"content":"        printTextWithLines(\"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\");","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"zxisatree"},"content":"        while (true) {","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"zxisatree"},"content":"            reply \u003d input.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"zxisatree"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"zxisatree"},"content":"                if (reply.equals(\"bye\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"zxisatree"},"content":"                    printTextWithLines(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.equals(\"list\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"zxisatree"},"content":"                    printTextWithLines(taskList.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"zxisatree"},"content":"                    Matcher matcher \u003d compileAndMatch(\"mark (.*)\", reply);","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"zxisatree"},"content":"                    if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"zxisatree"},"content":"                        int taskNumber \u003d Integer.parseInt(matcher.group(1));","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"zxisatree"},"content":"                        taskList.setDone(taskNumber, true);","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"zxisatree"},"content":"                        printTextWithLines(\"Nice! I\u0027ve marked this task as done:\\n  \" + taskList.getTask(taskNumber));","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"zxisatree"},"content":"                    } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"zxisatree"},"content":"                        throw new exceptions.InvalidCommandException(\"The task number of a mark command cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":92,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"zxisatree"},"content":"                    Matcher matcher \u003d compileAndMatch(\"unmark (.*)\", reply);","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"zxisatree"},"content":"                    if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"zxisatree"},"content":"                        int taskNumber \u003d Integer.parseInt(matcher.group(1));","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"zxisatree"},"content":"                        taskList.setDone(taskNumber, true);","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"zxisatree"},"content":"                        printTextWithLines(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + taskList.getTask(taskNumber));","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"zxisatree"},"content":"                    } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"zxisatree"},"content":"                        throw new exceptions.InvalidCommandException(\"The task number of an unmark command cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.startsWith(\"delete\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"zxisatree"},"content":"                    Matcher matcher \u003d compileAndMatch(\"delete (.*)\", reply);","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"zxisatree"},"content":"                    if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"zxisatree"},"content":"                        int taskNumber \u003d Integer.parseInt(matcher.group(1));","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"zxisatree"},"content":"                        String taskDescription \u003d taskList.getTask(taskNumber).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"zxisatree"},"content":"                        taskList.deleteTask(taskNumber);","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"zxisatree"},"content":"                        printTextWithLines(\"Noted. I\u0027ve removed this task:\\n  \" + taskDescription + \"\\n\" + taskList.describeLength());","lastModifiedDate":"2023-01-24"},{"lineNumber":109,"author":{"gitId":"zxisatree"},"content":"                    } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"zxisatree"},"content":"                        throw new exceptions.InvalidCommandException(\"The task number to be deleted must be specified, and must be an integer.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"zxisatree"},"content":"                    Matcher matcher \u003d compileAndMatch(\"todo (.*)\", reply);","lastModifiedDate":"2023-01-24"},{"lineNumber":114,"author":{"gitId":"zxisatree"},"content":"                    if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"zxisatree"},"content":"                        tasks.Task task \u003d new tasks.ToDo(matcher.group(1));","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"zxisatree"},"content":"                        taskList.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"zxisatree"},"content":"                        printTextWithLines(\"Got it. I\u0027ve added this task:\\n  \" + task + \"\\n\" + taskList.describeLength());","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"zxisatree"},"content":"                    } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"zxisatree"},"content":"                        throw new exceptions.InvalidCommandException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"zxisatree"},"content":"                    Matcher matcher \u003d compileAndMatch(\"deadline (.*) /by (.*)\", reply);","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"zxisatree"},"content":"                    if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0 \u0026\u0026 matcher.group(2).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"zxisatree"},"content":"                        tasks.Task task \u003d new tasks.Deadline(matcher.group(1), matcher.group(2), false);","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"zxisatree"},"content":"                        taskList.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"zxisatree"},"content":"                        printTextWithLines(\"Got it. I\u0027ve added this task:\\n  \" + task + \"\\n\" + taskList.describeLength());","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"zxisatree"},"content":"                    } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"zxisatree"},"content":"                        throw new exceptions.InvalidCommandException(\"The end date of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"zxisatree"},"content":"                } else if (reply.startsWith(\"event\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"zxisatree"},"content":"                    Matcher matcher \u003d compileAndMatch(\"event (.*) /from (.*) /to (.*)\", reply);","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"zxisatree"},"content":"                    if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0 \u0026\u0026 matcher.group(2).length() \u003e 0 \u0026\u0026 matcher.group(3).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"zxisatree"},"content":"                        tasks.Task task \u003d new tasks.Event(matcher.group(1), matcher.group(2), matcher.group(3), false);","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"zxisatree"},"content":"                        taskList.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"zxisatree"},"content":"                        printTextWithLines(\"Got it. I\u0027ve added this task:\\n  \" + task + \"\\n\" + taskList.describeLength());","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"zxisatree"},"content":"                    } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"zxisatree"},"content":"                        throw new exceptions.InvalidCommandException(\"An event must have a nonempty from date and a to date.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":138,"author":{"gitId":"zxisatree"},"content":"                    }","lastModifiedDate":"2023-01-24"},{"lineNumber":139,"author":{"gitId":"zxisatree"},"content":"                } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"zxisatree"},"content":"                    throw new exceptions.UnknownCommandException();","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":142,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"zxisatree"},"content":"                // After each command, save the current task list to the file","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"zxisatree"},"content":"                if (taskList.getLength() !\u003d 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"zxisatree"},"content":"                    writer \u003d new FileWriter(dataFilePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"zxisatree"},"content":"                    writer.write(taskList.toEncodedString());","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"zxisatree"},"content":"                    writer.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"zxisatree"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"zxisatree"},"content":"                printTextWithLines(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":152,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":153,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":154,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"zxisatree"},"content":"    static Matcher compileAndMatch(String regex, String toMatch) {","lastModifiedDate":"2023-01-24"},{"lineNumber":156,"author":{"gitId":"zxisatree"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2023-01-24"},{"lineNumber":157,"author":{"gitId":"zxisatree"},"content":"        return pattern.matcher(toMatch);","lastModifiedDate":"2023-01-24"},{"lineNumber":158,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":160,"author":{"gitId":"zxisatree"},"content":"    static void printTextWithLines(String text) {","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"zxisatree"},"content":"        printLineBreak();","lastModifiedDate":"2023-01-24"},{"lineNumber":162,"author":{"gitId":"zxisatree"},"content":"        System.out.println(text);","lastModifiedDate":"2023-01-24"},{"lineNumber":163,"author":{"gitId":"zxisatree"},"content":"        printLineBreak();","lastModifiedDate":"2023-01-24"},{"lineNumber":164,"author":{"gitId":"zxisatree"},"content":"        System.out.println();","lastModifiedDate":"2023-01-24"},{"lineNumber":165,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":166,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":167,"author":{"gitId":"zxisatree"},"content":"    static void printLineBreak() {","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"zxisatree"},"content":"        System.out.println(\"_________________________________________________________________\");","lastModifiedDate":"2023-01-24"},{"lineNumber":169,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":170,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"zxisatree":170}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zxisatree":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"checkstyle {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zxisatree":6,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import tasks.Event;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import tasks.Task;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"import tasks.ToDo;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":" * The main class, includes logic to run the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"     * Constructs a new chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"     * @param dataFilePath Path to store the task list text file.","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"    public Duke(String dataFilePath) {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"        storage \u003d new Storage(dataFilePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"     * Runs the main input loop for the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"    public void run() {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"        ui.showGreeting();","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"        Task task;","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"        int taskNumber;","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"        label:","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"        while (true) {","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"            try {","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"                String[] parsedCommand \u003d Parser.parseCommand(ui.readCommand());","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"                String command \u003d parsedCommand[0];","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"                switch (command) {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"                case \"bye\":","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"                    ui.showGoodbye();","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"                    break label;","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"                case \"list\":","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"                    ui.showTextWithLines(tasks.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"                case \"mark\":","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"                    taskNumber \u003d Integer.parseInt(parsedCommand[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"                    tasks.setDone(taskNumber, true);","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"                    task \u003d tasks.getTask(taskNumber);","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"                    ui.showMarkTaskMessage(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"                case \"unmark\":","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"                    taskNumber \u003d Integer.parseInt(parsedCommand[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"                    tasks.setDone(taskNumber, false);","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"                    task \u003d tasks.getTask(taskNumber);","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"                    ui.showUnmarkTaskMessage(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"                case \"delete\":","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"                    taskNumber \u003d Integer.parseInt(parsedCommand[1]);","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"                    task \u003d tasks.getTask(taskNumber);","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"                    tasks.deleteTask(taskNumber);","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"zxisatree"},"content":"                    ui.showDeleteTaskMessage(task, tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"zxisatree"},"content":"                case \"find\":","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"zxisatree"},"content":"                    ui.showFindTaskMessage(tasks.findTasks(parsedCommand[1]));","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"zxisatree"},"content":"                case \"todo\":","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"zxisatree"},"content":"                    task \u003d new ToDo(parsedCommand[1]);","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"zxisatree"},"content":"                    tasks.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"zxisatree"},"content":"                    ui.showAddTaskMessage(task, tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"zxisatree"},"content":"                case \"deadline\":","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"zxisatree"},"content":"                    task \u003d new Deadline(parsedCommand[1], Parser.parseDate(parsedCommand[2], false));","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"zxisatree"},"content":"                    tasks.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"zxisatree"},"content":"                    ui.showAddTaskMessage(task, tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"zxisatree"},"content":"                case \"event\":","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"zxisatree"},"content":"                    task \u003d new Event(parsedCommand[1], Parser.parseDate(parsedCommand[2], false),","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"zxisatree"},"content":"                            Parser.parseDate(parsedCommand[3], false));","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"zxisatree"},"content":"                    tasks.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"zxisatree"},"content":"                    ui.showAddTaskMessage(task, tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"zxisatree"},"content":"                    break;","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"zxisatree"},"content":"                // After each command, save the current task list to the file","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"zxisatree"},"content":"                storage.saveTasks(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"zxisatree"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"zxisatree"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"zxisatree"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"zxisatree"},"content":"                ui.showError(e.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":104,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zxisatree":103,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import exceptions.InvalidDataFileException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import exceptions.UnknownCommandException;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"import tasks.Task;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":" * Parses user commands and commands inputted through the data file stored in memory.","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"public class Parser {","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"     * Parses a string input by the user into an array of each segment of the command.","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"     * @param toParse String input by the user.","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"     * @return Array of each segment of the command.","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"     * @throws DukeException if the command given is invalid or not a command known by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"    public static String[] parseCommand(String toParse) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"        if (toParse.equals(\"bye\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"            return new String[]{\"bye\"};","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.equals(\"list\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"            return new String[]{\"list\"};","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"mark (.*)\", toParse);","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"mark\", matcher.group(1)};","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(\"The task number of a mark command cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"unmark (.*)\", toParse);","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"unmark\", matcher.group(1)};","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(\"The task number of an unmark command cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"delete\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"delete (.*)\", toParse);","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"delete\", matcher.group(1)};","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"                        \"The task number to be deleted must be specified, and must be an integer.\");","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"find\")) {","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"find (.*)\", toParse);","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"find\", matcher.group(1)};","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"                        \"Must supply a search string to the find command.\");","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"todo (.*)\", toParse);","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"todo\", matcher.group(1)};","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"deadline (.*) /by (.*)\", toParse);","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0 \u0026\u0026 matcher.group(2).length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"deadline\", matcher.group(1), matcher.group(2)};","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(\"The end date of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"        } else if (toParse.startsWith(\"event\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"zxisatree"},"content":"            Matcher matcher \u003d compileAndMatch(\"event (.*) /from (.*) /to (.*)\", toParse);","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"zxisatree"},"content":"            if (matcher.find() \u0026\u0026 matcher.group(1).length() \u003e 0 \u0026\u0026 matcher.group(2).length() \u003e 0 \u0026\u0026","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"zxisatree"},"content":"                    matcher.group(3).length() \u003e 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"event\", matcher.group(1), matcher.group(2), matcher.group(3)};","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"zxisatree"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidCommandException(\"An event must have a nonempty from date and a to date.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"zxisatree"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"zxisatree"},"content":"            throw new UnknownCommandException();","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"zxisatree"},"content":"     * Parses a string input from the data file into an array of each segment of the command.","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"zxisatree"},"content":"     * @param toParse String input from the data file.","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"zxisatree"},"content":"     * @return Array of each segment of the command.","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"zxisatree"},"content":"     * @throws DukeException if the command given is invalid or is not a command known by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"zxisatree"},"content":"    public static String[] parseFileCommand(String toParse) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"zxisatree"},"content":"        Pattern fileCommandPattern \u003d Pattern.compile(\"\\\\d+\\\\.\\\\[([TDE])]\\\\[([ X])\\\\] (.*)\");","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"zxisatree"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(\"(.*) /by (.*)\");","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"zxisatree"},"content":"        Pattern eventPattern \u003d Pattern.compile(\"(.*) /from (.*) /to (.*)\");","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"zxisatree"},"content":"        Matcher fileCommandMatcher \u003d fileCommandPattern.matcher(toParse);","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"zxisatree"},"content":"        Matcher individualMatcher;","lastModifiedDate":"2023-01-25"},{"lineNumber":99,"author":{"gitId":"zxisatree"},"content":"        if (fileCommandMatcher.find()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"zxisatree"},"content":"            switch (fileCommandMatcher.group(1)) {","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"zxisatree"},"content":"            case \"T\":","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"zxisatree"},"content":"                return new String[]{\"T\", fileCommandMatcher.group(2), fileCommandMatcher.group(3)};","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"zxisatree"},"content":"            case \"D\":","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"zxisatree"},"content":"                individualMatcher \u003d deadlinePattern.matcher(fileCommandMatcher.group(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"zxisatree"},"content":"                if (individualMatcher.find()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"zxisatree"},"content":"                    return new String[]{\"D\", fileCommandMatcher.group(2), individualMatcher.group(1),","lastModifiedDate":"2023-01-25"},{"lineNumber":107,"author":{"gitId":"zxisatree"},"content":"                            individualMatcher.group(2)};","lastModifiedDate":"2023-01-25"},{"lineNumber":108,"author":{"gitId":"zxisatree"},"content":"                } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":109,"author":{"gitId":"zxisatree"},"content":"                    throw new InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"zxisatree"},"content":"            case \"E\":","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"zxisatree"},"content":"                individualMatcher \u003d eventPattern.matcher(fileCommandMatcher.group(3));","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"zxisatree"},"content":"                if (individualMatcher.find()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":114,"author":{"gitId":"zxisatree"},"content":"                    return new String[]{\"D\", fileCommandMatcher.group(2), individualMatcher.group(1),","lastModifiedDate":"2023-01-25"},{"lineNumber":115,"author":{"gitId":"zxisatree"},"content":"                            individualMatcher.group(2), individualMatcher.group(3)};","lastModifiedDate":"2023-01-25"},{"lineNumber":116,"author":{"gitId":"zxisatree"},"content":"                } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"zxisatree"},"content":"                    throw new InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"zxisatree"},"content":"            default:","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"zxisatree"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"zxisatree"},"content":"            return new String[]{};","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":128,"author":{"gitId":"zxisatree"},"content":"     * Parses a given date time string into a LocalDateTime object.","lastModifiedDate":"2023-01-25"},{"lineNumber":129,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":130,"author":{"gitId":"zxisatree"},"content":"     * @param dateTime Date time string.","lastModifiedDate":"2023-01-25"},{"lineNumber":131,"author":{"gitId":"zxisatree"},"content":"     * @param fromFile Whether the date time string was input via command line or from the data file.","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"zxisatree"},"content":"     * @return LocalDateTime object representing the date time given.","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":134,"author":{"gitId":"zxisatree"},"content":"    public static LocalDateTime parseDate(String dateTime, boolean fromFile) {","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"zxisatree"},"content":"        if (fromFile) {","lastModifiedDate":"2023-01-25"},{"lineNumber":136,"author":{"gitId":"zxisatree"},"content":"            return LocalDateTime.parse(dateTime, Task.outputDateTimeFormatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":137,"author":{"gitId":"zxisatree"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":138,"author":{"gitId":"zxisatree"},"content":"            return LocalDateTime.parse(dateTime, Task.inputDateTimeFormatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":140,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":141,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":142,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":143,"author":{"gitId":"zxisatree"},"content":"     * Compiles a given regex and matches it with the given input.","lastModifiedDate":"2023-01-25"},{"lineNumber":144,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":145,"author":{"gitId":"zxisatree"},"content":"     * @param regex   Regular expression search pattern.","lastModifiedDate":"2023-01-25"},{"lineNumber":146,"author":{"gitId":"zxisatree"},"content":"     * @param toMatch String to match regex with.","lastModifiedDate":"2023-01-25"},{"lineNumber":147,"author":{"gitId":"zxisatree"},"content":"     * @return Matcher object containing the given regex and input string.","lastModifiedDate":"2023-01-25"},{"lineNumber":148,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":149,"author":{"gitId":"zxisatree"},"content":"    private static Matcher compileAndMatch(String regex, String toMatch) {","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"zxisatree"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"zxisatree"},"content":"        return pattern.matcher(toMatch);","lastModifiedDate":"2023-01-24"},{"lineNumber":152,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":153,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"zxisatree":153}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":" * Writes and loads task lists to and from storage.","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"public class Storage {","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"    private final String dataFilePath;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"     * Constructs a storage, creating the parent directories for the data file if they do not exist.","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"     * @param dataFilePath Path to store the task list text file.","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"    public Storage(String dataFilePath) {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"        this.dataFilePath \u003d dataFilePath;","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"        // Create the directories if they do not exist","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"            File targetFile \u003d new File(dataFilePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"            File parent \u003d targetFile.getParentFile();","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"            if (parent !\u003d null \u0026\u0026 !parent.exists() \u0026\u0026 !parent.mkdirs()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"                throw new IllegalStateException(\"Couldn\u0027t create dir: \" + parent);","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"     * Saves the task list to memory.","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"     * @param tasks Task list containing tasks to be saved.","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"     * @throws IOException if the path exists but is a directory instead of a file, or cannot be opened for some reason.","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"    public void saveTasks(TaskList tasks) throws IOException {","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"            FileWriter writer \u003d new FileWriter(dataFilePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"            writer.write(tasks.toEncodedString());","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"            writer.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"     * Parses and separates the data file into an ArrayList of each line.","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"     * @return ArrayList of parsed commands.","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"     * @throws DukeException if the command given is invalid or is not a command known by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"    public ArrayList\u003cString[]\u003e load() throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"        File targetFile \u003d new File(dataFilePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"        ArrayList\u003cString[]\u003e fileCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"            if (!targetFile.createNewFile()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"                Scanner scanner \u003d new Scanner(targetFile);","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"                while (scanner.hasNext()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"                    fileCommands.add(Parser.parseFileCommand(scanner.nextLine()));","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"        return fileCommands;","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"zxisatree":73}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"import exceptions.InvalidDataFileException;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import exceptions.TaskNotFoundException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"import tasks.Event;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"import tasks.Task;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"import tasks.ToDo;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":" * Wraps the task list and provides methods to interact with it.","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"public class TaskList {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"     * Constructs a new task list wrapper.","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"     * Constructs a new task list wrapper using parsed input from a data file.","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"     * @param dataFileTasks Lines of parsed input commands from the data file.","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"     * @throws DukeException if the command given is invalid or is not a command known by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"    public TaskList(ArrayList\u003cString[]\u003e dataFileTasks) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"        Task toAdd;","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"        for (String[] fileCommand : dataFileTasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"            switch (fileCommand[0]) {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"            case \"T\":","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"                toAdd \u003d new ToDo(fileCommand[2]);","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"            case \"D\":","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"                toAdd \u003d new Deadline(fileCommand[2], Parser.parseDate(fileCommand[3], true));","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"            case \"E\":","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"                toAdd \u003d new Event(fileCommand[2], Parser.parseDate(fileCommand[3], true),","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"                        Parser.parseDate(fileCommand[4], true));","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"            default:","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"                throw new InvalidDataFileException();","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"            if (fileCommand[1].equals(\"X\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"                toAdd.setDone(true);","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"            this.addTask(toAdd);","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"     * Gets the length of the task list.","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"     * @return Length of the task list.","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"    public int size() {","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"     * Checks if the task list is empty.","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"     * @return Whether the task list is empty or not.","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"        return this.taskList.size() \u003d\u003d 0;","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"zxisatree"},"content":"    private boolean indexOutOfRange(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"zxisatree"},"content":"        return index - 1 \u003e\u003d this.size() || index \u003c 0;","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"zxisatree"},"content":"     * Gets a task by its index.","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"zxisatree"},"content":"     * @param taskNumber Index of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"zxisatree"},"content":"     * @return The requested task.","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"zxisatree"},"content":"     * @throws TaskNotFoundException if task index is out of range.","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"zxisatree"},"content":"    public Task getTask(int taskNumber) throws TaskNotFoundException {","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"zxisatree"},"content":"        if (this.indexOutOfRange(taskNumber)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"zxisatree"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"zxisatree"},"content":"        return this.taskList.get(taskNumber - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":94,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"zxisatree"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-01-25"},{"lineNumber":96,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":97,"author":{"gitId":"zxisatree"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":99,"author":{"gitId":"zxisatree"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"zxisatree"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":104,"author":{"gitId":"zxisatree"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-01-25"},{"lineNumber":105,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":106,"author":{"gitId":"zxisatree"},"content":"     * @param taskNumber Index of the task to be deleted.","lastModifiedDate":"2023-01-25"},{"lineNumber":107,"author":{"gitId":"zxisatree"},"content":"     * @throws TaskNotFoundException if task index is out of range.","lastModifiedDate":"2023-01-25"},{"lineNumber":108,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":109,"author":{"gitId":"zxisatree"},"content":"    public void deleteTask(int taskNumber) throws TaskNotFoundException {","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"zxisatree"},"content":"        if (this.indexOutOfRange(taskNumber)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":111,"author":{"gitId":"zxisatree"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"zxisatree"},"content":"        this.taskList.remove(taskNumber - 1);","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":117,"author":{"gitId":"zxisatree"},"content":"     * Marks a task as complete or uncomplete.","lastModifiedDate":"2023-01-25"},{"lineNumber":118,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":119,"author":{"gitId":"zxisatree"},"content":"     * @param taskNumber Index of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":120,"author":{"gitId":"zxisatree"},"content":"     * @param done       Whether to mark the task as complete or uncomplete.","lastModifiedDate":"2023-01-25"},{"lineNumber":121,"author":{"gitId":"zxisatree"},"content":"     * @throws TaskNotFoundException if task index is out of range.","lastModifiedDate":"2023-01-25"},{"lineNumber":122,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":123,"author":{"gitId":"zxisatree"},"content":"    public void setDone(int taskNumber, boolean done) throws TaskNotFoundException {","lastModifiedDate":"2023-01-19"},{"lineNumber":124,"author":{"gitId":"zxisatree"},"content":"        if (this.indexOutOfRange(taskNumber)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":125,"author":{"gitId":"zxisatree"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-01-19"},{"lineNumber":126,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":127,"author":{"gitId":"zxisatree"},"content":"        this.taskList.get(taskNumber - 1).setDone(done);","lastModifiedDate":"2023-01-25"},{"lineNumber":128,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":129,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":130,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":131,"author":{"gitId":"zxisatree"},"content":"     * Finds tasks from the task list matching the given search string.","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"zxisatree"},"content":"     * @param searchString String to search for in the tasks.","lastModifiedDate":"2023-01-25"},{"lineNumber":134,"author":{"gitId":"zxisatree"},"content":"     * @return List of tasks matching the search string.","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":136,"author":{"gitId":"zxisatree"},"content":"    public ArrayList\u003cTask\u003e findTasks(String searchString) {","lastModifiedDate":"2023-01-25"},{"lineNumber":137,"author":{"gitId":"zxisatree"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-25"},{"lineNumber":138,"author":{"gitId":"zxisatree"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"zxisatree"},"content":"            if (task.match(searchString)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":140,"author":{"gitId":"zxisatree"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-01-25"},{"lineNumber":141,"author":{"gitId":"zxisatree"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":142,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":143,"author":{"gitId":"zxisatree"},"content":"        return matchingTasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":144,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":145,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":146,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":147,"author":{"gitId":"zxisatree"},"content":"     * Describes the length of the task list in a human readable format.","lastModifiedDate":"2023-01-25"},{"lineNumber":148,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":149,"author":{"gitId":"zxisatree"},"content":"     * @return Description of the task list in a human readable format.","lastModifiedDate":"2023-01-25"},{"lineNumber":150,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":151,"author":{"gitId":"zxisatree"},"content":"    public String describeLength() {","lastModifiedDate":"2023-01-19"},{"lineNumber":152,"author":{"gitId":"zxisatree"},"content":"        return \"Now you have \" + this.size() + \" tasks in the list.\";","lastModifiedDate":"2023-01-25"},{"lineNumber":153,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":154,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":155,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":156,"author":{"gitId":"zxisatree"},"content":"     * Represents the task list in a string suitable for storing in memory.","lastModifiedDate":"2023-01-25"},{"lineNumber":157,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":158,"author":{"gitId":"zxisatree"},"content":"     * @return Representation of the task list to be stored in memory.","lastModifiedDate":"2023-01-25"},{"lineNumber":159,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":160,"author":{"gitId":"zxisatree"},"content":"    public String toEncodedString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"zxisatree"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":162,"author":{"gitId":"zxisatree"},"content":"            return \"\";","lastModifiedDate":"2023-01-24"},{"lineNumber":163,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":164,"author":{"gitId":"zxisatree"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":165,"author":{"gitId":"zxisatree"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":166,"author":{"gitId":"zxisatree"},"content":"            String encodedTask \u003d taskList.get(i).toEncodedString();","lastModifiedDate":"2023-01-25"},{"lineNumber":167,"author":{"gitId":"zxisatree"},"content":"            result.append(i + 1).append(\".\").append(encodedTask).append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":169,"author":{"gitId":"zxisatree"},"content":"        if (result.length() \u003e 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":170,"author":{"gitId":"zxisatree"},"content":"            result.deleteCharAt(result.length() - 1);","lastModifiedDate":"2023-01-24"},{"lineNumber":171,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"zxisatree"},"content":"        return result.toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":173,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":174,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":175,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":176,"author":{"gitId":"zxisatree"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":177,"author":{"gitId":"zxisatree"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":178,"author":{"gitId":"zxisatree"},"content":"            return \"No tasks found.\";","lastModifiedDate":"2023-01-19"},{"lineNumber":179,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":180,"author":{"gitId":"zxisatree"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-01-19"},{"lineNumber":181,"author":{"gitId":"zxisatree"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":182,"author":{"gitId":"zxisatree"},"content":"            result.append(i + 1).append(\".\").append(taskList.get(i)).append(\"\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":183,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":184,"author":{"gitId":"zxisatree"},"content":"        if (result.length() \u003e 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":185,"author":{"gitId":"zxisatree"},"content":"            result.deleteCharAt(result.length() - 1);","lastModifiedDate":"2023-01-19"},{"lineNumber":186,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":187,"author":{"gitId":"zxisatree"},"content":"        return result.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":188,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":189,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":189}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import tasks.Task;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":" * Handles interaction with the user and prints information about the program.","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"public class Ui {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"     * Reads an input command from the user.","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"     * @return The input command by the user.","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"    public String readCommand() {","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"        return this.scanner.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"     * Prints a greeting message.","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"    public void showGreeting() {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Hello! I\u0027m Duke.\\nWhat can I do for you?\");","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"     * Prints a goodbye message.","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"     * Prints information about the task list after adding a task.","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"     * @param task  Task that was added.","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"     * @param tasks Task list that task was added to.","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"    public void showAddTaskMessage(Task task, TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Got it. I\u0027ve added this task:\\n  \" + task + \"\\n\" + tasks.describeLength());","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"     * Prints information about the task list after deleting a task.","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"     * @param task  Task that was deleted.","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"     * @param tasks Task list that task was deleted from.","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"    public void showDeleteTaskMessage(Task task, TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Noted. I\u0027ve removed this task:\\n  \" + task + \"\\n\" + tasks.describeLength());","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"     * Prints information about the task list after marking a task as complete.","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"     * @param task Task that was marked as complete.","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"    public void showMarkTaskMessage(Task task) {","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Nice! I\u0027ve marked this task as done:\\n  \" + task);","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"     * Prints information about the task list after marking a task as uncomplete.","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"     * @param task Task that was marked as uncomplete.","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"    public void showUnmarkTaskMessage(Task task) {","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + task);","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"zxisatree"},"content":"     * Prints information about the tasks found with the search string.","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"zxisatree"},"content":"     * @param tasks List of tasks that were found by the search string.","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"zxisatree"},"content":"    public void showFindTaskMessage(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"zxisatree"},"content":"        StringBuilder tasksStr \u003d new StringBuilder();","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"zxisatree"},"content":"        tasksStr.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"zxisatree"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"zxisatree"},"content":"            tasksStr.append(i + 1).append(\u0027.\u0027).append(tasks.get(i).toString()).append(\u0027\\n\u0027);","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"zxisatree"},"content":"        if (tasksStr.length() \u003e 0) {","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"zxisatree"},"content":"            tasksStr.deleteCharAt(tasksStr.length() - 1);","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(tasksStr.toString());","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"zxisatree"},"content":"     * Prints information about an error message.","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"zxisatree"},"content":"     * @param errorMessage Error message describing the error.","lastModifiedDate":"2023-01-25"},{"lineNumber":96,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":97,"author":{"gitId":"zxisatree"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Something went wrong:\\n\" + errorMessage);","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":102,"author":{"gitId":"zxisatree"},"content":"     * Prints an error message for unexpected errors.","lastModifiedDate":"2023-01-25"},{"lineNumber":103,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":104,"author":{"gitId":"zxisatree"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"zxisatree"},"content":"        showTextWithLines(\"Something went wrong while loading Duke.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":109,"author":{"gitId":"zxisatree"},"content":"     * Prints text in a pretty format.","lastModifiedDate":"2023-01-25"},{"lineNumber":110,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":111,"author":{"gitId":"zxisatree"},"content":"     * @param text Text to be printed.","lastModifiedDate":"2023-01-25"},{"lineNumber":112,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":113,"author":{"gitId":"zxisatree"},"content":"    public void showTextWithLines(String text) {","lastModifiedDate":"2023-01-24"},{"lineNumber":114,"author":{"gitId":"zxisatree"},"content":"        showLineBreak();","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"zxisatree"},"content":"        System.out.println(text);","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"zxisatree"},"content":"        showLineBreak();","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"zxisatree"},"content":"        System.out.println();","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":121,"author":{"gitId":"zxisatree"},"content":"     * Prints a line break using underscores.","lastModifiedDate":"2023-01-25"},{"lineNumber":122,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":123,"author":{"gitId":"zxisatree"},"content":"    public void showLineBreak() {","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"zxisatree"},"content":"        System.out.println(\"_________________________________________________________________\");","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"zxisatree":126}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents custom exceptions thrown by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"     * Constructs an exception with the given description.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"     * @param description Description of the problem.","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    public DukeException(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":15}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents exceptions for commands with invalid inputs.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"     * Constructs an exception for commands with invalid inputs.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"     * @param description Description of the problem.","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    public InvalidCommandException(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"        super(\"☹ OOPS!!! \" + description);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":15}},{"path":"src/main/java/exceptions/InvalidDataFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents exceptions for invalid, missing or corrupt data files.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public class InvalidDataFileException extends DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"     * Constructs an exception for invalid, missing or corrupt data files.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"    public InvalidDataFileException() {","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"        super(\"☹ OOPS!!! Could not read data from the provided source file.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"zxisatree":13}},{"path":"src/main/java/exceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents exceptions for requesting tasks not in the task list.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public class TaskNotFoundException extends DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"     * Constructs an exception for requesting tasks not in the task list.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"    public TaskNotFoundException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"        super(\"☹ OOPS!!! The requested task was not found in the task list.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":13}},{"path":"src/main/java/exceptions/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents exceptions for commands not known by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public class UnknownCommandException extends DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"     * Constructs an exception for a command not known by the chatbot.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":13}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"     * Constructs a task with a deadline.","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"     * @param endDateTime Deadline of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"    public Deadline(String description, LocalDateTime endDateTime) {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"    public String toEncodedString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + TaskType.D + \"]\" + super.toString() + \" /by \" +","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"                this.endDateTime.format(this.outputDateTimeFormatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + TaskType.D + \"]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"                + this.endDateTime.format(this.outputDateTimeFormatter) + \")\";","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":33}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":" * Represents a task that takes place within a time period.","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"    private final LocalDateTime startDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"     * Constructs a task that takes place within a time period.","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"     * @param description   Description of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"     * @param startDateTime Starting date and time of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"     * @param endDateTime   Ending date and time of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"    public String toEncodedString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + TaskType.E + \"]\" + super.toString() + \" /from \"","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"                + this.startDateTime.format(this.outputDateTimeFormatter) + \" /to \"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"                + this.endDateTime.format(this.outputDateTimeFormatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + TaskType.E + \"]\" + super.toString() + \" (from: \"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"                + this.startDateTime.format(this.outputDateTimeFormatter) + \" to: \"","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"                + this.endDateTime.format(this.outputDateTimeFormatter) + \")\";","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":38}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":" * Represents a task to be completed.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"     * Description of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    protected String description;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"     * Whether the task is done or not.","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"     * Formatters to parse date time strings.","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"    public static DateTimeFormatter inputDateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"    public static DateTimeFormatter outputDateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"     * Constructs a new task.","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"     * Sets a task as complete or uncomplete.","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"zxisatree"},"content":"     * @param done Whether to set the task as complete or uncomplete.","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"zxisatree"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"zxisatree"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"zxisatree"},"content":"     * Get a human readable representation of whether the task is complete or not.","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"zxisatree"},"content":"     * @return A human readable representation of whether the task is complete or not.","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"zxisatree"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"zxisatree"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"zxisatree"},"content":"     * Check if a task contains a given string.","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"zxisatree"},"content":"     * @param toMatch String to check for.","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"zxisatree"},"content":"     * @return Whether the task contains the given string or not.","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"zxisatree"},"content":"    public boolean match(String toMatch) {","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"zxisatree"},"content":"        Pattern pattern \u003d Pattern.compile(toMatch);","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"zxisatree"},"content":"        Matcher matcher \u003d pattern.matcher(this.description);","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"zxisatree"},"content":"        return matcher.find();","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"zxisatree"},"content":"     * Represents the task in a string suitable for storing in memory.","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"zxisatree"},"content":"     * @return A string representing the task suitable for storing in memory.","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"zxisatree"},"content":"    public abstract String toEncodedString();","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"zxisatree"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.description;","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":77}},{"path":"src/main/java/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents different types of tasks.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public enum TaskType {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    T,","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"    D,","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"    E","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":10}},{"path":"src/main/java/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":" * Represents a simple task that can be completed.","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"     * Construct a new task that can be completed.","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"    public String toEncodedString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + TaskType.T + \"]\" + super.toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"        return \"[\" + TaskType.T + \"]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":25}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"    public void deadlineCommand_deadlineTask_success() {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"            String[] parsed \u003d Parser.parseCommand(\"deadline read book /by 22-01-2023 16:00\");","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"            assertArrayEquals(new String[]{\"deadline\", \"read book\", \"22-01-2023 16:00\"}, parsed);","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"    public void deadlineFileCommand_deadlineTask_success() {","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"            String[] parsed \u003d Parser.parseFileCommand(\"1.[D][ ] read book /by Jan 22 2023, 16:00\");","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"            assertArrayEquals(new String[]{\"D\", \" \", \"read book\", \"Jan 22 2023, 16:00\"}, parsed);","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"    public void eventCommand_eventTask_success() {","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"            String[] parsed \u003d Parser.parseCommand(\"event swim /from 24-01-2023 09:15 /to 24-01-2023 10:30\");","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"            assertArrayEquals(new String[]{\"event\", \"swim\", \"24-01-2023 09:15\", \"24-01-2023 10:30\"}, parsed);","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"zxisatree":37}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"package duke;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"import tasks.Event;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"import tasks.ToDo;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"    public void addTaskCommand_toDoTask_success() {","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"        taskList.addTask(new ToDo(\"Valid task description\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"zxisatree"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"zxisatree"},"content":"    public void deadlineCommand_invalidDateTime_exceptionThrown() {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"zxisatree"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"zxisatree"},"content":"        assertThrows(DateTimeParseException.class,","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"zxisatree"},"content":"                () -\u003e taskList.addTask(new Deadline(\"invalid hour\", Parser.parseDate(","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"zxisatree"},"content":"                        \"22-01-2023 25:00\", false))));","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"zxisatree"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"zxisatree"},"content":"    @Test","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"zxisatree"},"content":"    public void eventCommand_invalidDateTime_exceptionThrown() {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"zxisatree"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"zxisatree"},"content":"        assertThrows(DateTimeParseException.class,","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"zxisatree"},"content":"                () -\u003e taskList.addTask(new Event(\"invalid start day\", Parser.parseDate(","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"zxisatree"},"content":"                        \"36-01-2023 16:00\", false),","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"zxisatree"},"content":"                        Parser.parseDate(\"04-02-2023 12:00\", false))));","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"zxisatree"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"zxisatree"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"zxisatree":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zxisatree"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"zxisatree"},"content":"todo read book","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"zxisatree"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"zxisatree"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"zxisatree"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"zxisatree"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"zxisatree"},"content":"delete 1","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"zxisatree"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"zxisatree"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"zxisatree"},"content":"deadline","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"zxisatree"},"content":"deadline fail /by","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"zxisatree"},"content":"event","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"zxisatree"},"content":"event fail /from","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"zxisatree"},"content":"event fail /from 1 /to","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"zxisatree"},"content":"mark","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"zxisatree"},"content":"unmark","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"zxisatree"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"zxisatree":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"zxisatree"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zxisatree":1,"-":20}}]
